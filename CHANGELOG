# Version 8.0.0
- Dual license: GNU GPL and paid proprietary license for commercial purposes
- Requires Python >=3.9
- Engines can operate more efficiently using vectorization by means of numpy arrays (floats operation still supported)
- Arguments that can be float and numpy arrays are now of type fl.Scalar (see fuzzylite/types.py)
- Arguments that can only be arrays of floats are now fl.ScalarArray (see fuzzylite/types.py)
- Op.scalar now converts any argument to a numpy array, instead of a float
- Op.to_float converts any argument to a float, which is the old behaviour of Op.scalar.
- All enum values are automatically assigned with enum.auto(), instead of manual assignments
- New: Arc and SemiEllipse terms.
- Using `from __future__ import annotations` in every file to use better type annotations
- Many more tests and better structures for tests

## __init__.py
- Changed: fl.inf, fl.nan, fl.isnan, fl.isinf now map to their numpy equivalents
- Removed: fl.inf, fl.nan, fl.isnan, fl.isinf, moved to library.py
- Removed: fl.lib. See library.py for settings

## activation.py
- New: Only General activation support vector operations, other methods require float operations (as before)
- Changed: Activation is abstract
- Removed: Activation.class_name, use now Op.class_name when needed

## defuzzifier.py
- Bug fix: Weighted defuzzifiers infer the type correctly now (see WeightedDefuzzifier::infer_type)
- Changed: Defuzzifier is abstract, and hence so are IntegralDefuzzifier and WeightedDefuzzifier
- Changed: Integral defuzzifiers work on vectors
- Changed: Integral defuzzifiers use 1000 steps instead of 100
- Changed: Algorithms to compute BiSector, Centroid, MeanOfMaximum, and WeightedAverage are simplified
- Changed: values of WeightedDefuzzifier.Type are enum.auto() instead of manual assignments
- Removed: Defuzzifier.class_name, use now Op.class_name when needed

## engine.py
- New: Engine.input_values() and Engine.output_values() produce 2D matrices with their respective values
- Changed: values of Engine.Type are enum.auto() instead of manual assignments

## exporter.py
- Changed: Exporter is abstract
- Changed: Discrete term exported as `Discrete.create(name: str, values: dict[float, float])`
- Removed: Exporter.class_name, use now Op.class_name when needed

## factory.py
- New: Arc and SemiEllipse added to TermFactory
- New: ConstructionFactory.import_from automatically imports all the classes from the given fuzzylite module
- Changed: ConstructionFactory takes an optional dictionary of constructors
- Changed: CloningFactory takes an optional dictionary of objects
- Changed: FunctionFactory: Operators and Functions now mostly map to their equivalent methods in numpy, but preserving their names
- Removed: ConstructionFactory.class_name and CloningFactory.class_name, use now Op.class_name when needed

## hedges.py
- Changed: Hedge is abstract
- Changed: Vectorized all hedges

## library.py
- Removed: Library class
- New: methods fl.scalar, fl.to_float, and fl.array
- New: Settings class for the library configuration, and a `settings` final instance that is used across the library
- New: Settings.float_type for the type of floats across the library is now np.float64, instead of the previous Python float
- New: Settings.debugging is a property to get and set the debugging for logging purposes
- New: Settings.rtol for relative tolerance across the library is 0.0
- New: Information class that contains information about the library, and an `information` final instance to access the information
- Changed: Settings.atol for absolute tolerance across the library is now 1e-03, instead of the previous abs_tolerance=1e-05

## norm.py
- Changed: Norm is abstract, and so are SNorm and TNorm
- Changed: Vectorized all norms
- Removed: Norm.class_name, use now Op.class_name when needed

## operation.py
- New: `midpoints` method to discretize a range of values into a list of midpoints
- New: Op.is_close method to compare two values with absolute and relative tolerance given by the library settings
- New: Op.class_name method to get the class name of the given object
- Changed: Removed `decimals` parameter from `Op.str()`
- Changed: Vectorized all comparative operations (eq, neq, lt, le, gt, ge)
- Changed: empty identifiers now return "_" instead of "unnamed" (see `as_identifier(name:str)`
- Removed tolerance from all comparative operations (eq, neq, lt, le, gt, ge)
- Removed: `pi` method.
- Removed: `slots` parameter in `describe` method.
- Removed: `scalar` method, moved to `library.py`


## rule.py
- Changed: Expression is abstract
- Changed: Enabled vectorization
- Changed: in `Rule`, `triggered` is now an array of bools and `activation_degrees` is now a Scalar to support vectorization

## term.py
- Fix: Bug in Concave.Tsukamoto
- New: Arc edge and SemiEllipsis terms
- New: `_parse` method to parse configuration parameters
- New: Discrete.to_list, Discrete.to_dict, Discrete.to_xy
- New: Discrete.create to create a Discrete term from a list, dict or pairs
- Changed: Term is abstract
- Changed: All terms are vectorized, ie, membership and tsukamoto functions return fl.Scalar
- Changed: All equations are simplified and use numpy
- Changed: Tsukamoto functions use the term's height
- Change: Term.tsukamoto now raises exception if the term is not monotonic, before it returned the membership function value
- Change: Term.discretize now discretizes by default using midpoints
- Change: Activated.degree is a property now that automatically replaces nan and inf values
- Change: Discrete.values are now a numpy array instead of list of Discrete.Pair
- Change: Discrete.membership interpolates with numpy, which takes the first or last y-value for x-values beyond range
- Removed: Term.class_name, use now Op.class_name when needed
- Removed: Discrete.Pair
- Removed: Discrete.pairs_from, Discrete.values_from, Discrete.dict_from, Discrete.list_from



## new: types.py
- New: fl.Scalar type to support float and numpy arrays
- New: fl.ScalarArray type to support numpy arrays of floats
- New: fl.Array (mapping to np.NDArray) to support numpy arrays of any type

## variable.py
- Changed: OutputVariable.defuzzify is simpler and works with vectorized operations

## noxfile.py
- New: default sessions to run tests
- New: pyright session to run type checking
- Changed: simplified command texts

## pyproject.py
- New: numpy as a dependency
- New: pyright configuration


















