{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyfuzzylite","text":""},{"location":"#pyfuzzylite-806","title":"pyfuzzylite 8.0.6","text":""},{"location":"#a-fuzzy-logic-control-library-in-python","title":"A Fuzzy Logic Control Library in Python","text":""},{"location":"#by-juan-rada-vilela-phd","title":"by Juan Rada-Vilela, PhD","text":""},{"location":"#fuzzylite","title":"FuzzyLite","text":"<p>The FuzzyLite Libraries for Fuzzy Logic Control refer to <code>fuzzylite</code> (C++), <code>pyfuzzylite</code> (Python), and <code>jfuzzylite</code> (Java).</p> <p>The goal of the FuzzyLite Libraries is to easily design and efficiently operate fuzzy logic controllers following an object-oriented programming model with minimal dependency on external libraries.</p>"},{"location":"#license","title":"License","text":"<p><code>pyfuzzylite</code> is dual-licensed under the GNU GPL 3.0 and under a proprietary license for commercial purposes.</p> <p>You are strongly encouraged to support the development of the FuzzyLite Libraries by purchasing a license of <code>QtFuzzyLite</code>.</p> <p><code>QtFuzzyLite</code> is the best graphical user interface available to easily design and directly operate fuzzy logic controllers in real time. Available for Windows, Mac, and Linux, its goal is to significantly speed up the design of your fuzzy logic controllers, while providing a very useful, functional and beautiful user interface. Please, download it and check it out for free at fuzzylite.com/downloads.</p>"},{"location":"#features","title":"Features","text":"<p>Documentation: fuzzylite.github.io/pyfuzzylite/</p> <p>(6) Controllers: Mamdani, Takagi-Sugeno, Larsen, Tsukamoto, Inverse Tsukamoto, Hybrid</p> <p>(25) Linguistic terms:  (5) Basic: Triangle, Trapezoid, Rectangle, Discrete, SemiEllipse. (8) Extended: Bell, Cosine, Gaussian, GaussianProduct, PiShape, SigmoidDifference, SigmoidProduct, Spike. (7) Edges: Arc, Binary, Concave, Ramp, Sigmoid, SShape, ZShape. (3) Functions: Constant, Linear, Function. (2) Special: Aggregated, Activated.</p> <p>(7) Activation methods:  General, Proportional, Threshold, First, Last, Lowest, Highest.</p> <p>(9) Conjunction and Implication (T-Norms): Minimum, AlgebraicProduct, BoundedDifference, DrasticProduct, EinsteinProduct, HamacherProduct, NilpotentMinimum, LambdaNorm, FunctionNorm.</p> <p>(11) Disjunction and Aggregation (S-Norms):  Maximum, AlgebraicSum, BoundedSum, DrasticSum, EinsteinSum, HamacherSum, NilpotentMaximum, NormalizedSum, UnboundedSum, LambdaNorm, FunctionNorm.</p> <p>(7) Defuzzifiers:  (5) Integral: Centroid, Bisector, SmallestOfMaximum, LargestOfMaximum, MeanOfMaximum. (2) Weighted: WeightedAverage, WeightedSum.</p> <p>(7) Hedges: Any, Not, Extremely, Seldom, Somewhat, Very, Function.</p> <p>(3) Importers: FuzzyLite Language <code>fll</code>. With <code>fuzzylite</code>: Fuzzy Inference System <code>fis</code>, Fuzzy Control Language <code>fcl</code>.</p> <p>(7) Exporters: <code>Python</code>, FuzzyLite Language <code>fll</code>, FuzzyLite Dataset <code>fld</code>. With <code>fuzzylite</code>: <code>C++</code>, <code>Java</code>, FuzzyLite Language <code>fll</code>, FuzzyLite Dataset <code>fld</code>, <code>R</code> script, Fuzzy Inference System <code>fis</code>, Fuzzy Control Language <code>fcl</code>.</p> <p>(30+) Examples  of Mamdani, Takagi-Sugeno, Tsukamoto, and Hybrid controllers from <code>fuzzylite</code>, Octave, and Matlab, each included in the following formats: <code>py</code>, <code>fll</code>, <code>fld</code>. With <code>fuzzylite</code>: <code>C++</code>, <code>Java</code>, <code>R</code>, <code>fis</code>, and <code>fcl</code>.</p>"},{"location":"#examples","title":"Examples","text":"FuzzyLite LanguagePython <pre><code># File: examples/mamdani/ObstacleAvoidance.fll\nEngine: ObstacleAvoidance\nInputVariable: obstacle\n  enabled: true\n  range: 0.000 1.000\n  lock-range: false\n  term: left Ramp 1.000 0.000\n  term: right Ramp 0.000 1.000\nOutputVariable: mSteer\n  enabled: true\n  range: 0.000 1.000\n  lock-range: false\n  aggregation: Maximum\n  defuzzifier: Centroid 100\n  default: nan\n  lock-previous: false\n  term: left Ramp 1.000 0.000\n  term: right Ramp 0.000 1.000\nRuleBlock: mamdani\n  enabled: true\n  conjunction: none\n  disjunction: none\n  implication: AlgebraicProduct\n  activation: General\n  rule: if obstacle is left then mSteer is right\n  rule: if obstacle is right then mSteer is left\n</code></pre> <pre><code># Python\nimport fuzzylite as fl\n\nengine = fl.FllImporter().from_file(\"examples/mamdani/ObstacleAvoidance.fll\")\n</code></pre> <pre><code>import fuzzylite as fl\n\nengine = fl.Engine(\n    name=\"ObstacleAvoidance\",\n    input_variables=[\n        fl.InputVariable(\n            name=\"obstacle\",\n            minimum=0.0,\n            maximum=1.0,\n            lock_range=False,\n            terms=[fl.Ramp(\"left\", 1.0, 0.0), fl.Ramp(\"right\", 0.0, 1.0)],\n        )\n    ],\n    output_variables=[\n        fl.OutputVariable(\n            name=\"mSteer\",\n            minimum=0.0,\n            maximum=1.0,\n            lock_range=False,\n            lock_previous=False,\n            default_value=fl.nan,\n            aggregation=fl.Maximum(),\n            defuzzifier=fl.Centroid(resolution=100),\n            terms=[fl.Ramp(\"left\", 1.0, 0.0), fl.Ramp(\"right\", 0.0, 1.0)],\n        )\n    ],\n    rule_blocks=[\n        fl.RuleBlock(\n            name=\"mamdani\",\n            conjunction=None,\n            disjunction=None,\n            implication=fl.AlgebraicProduct(),\n            activation=fl.General(),\n            rules=[\n                fl.Rule.create(\"if obstacle is left then mSteer is right\"),\n                fl.Rule.create(\"if obstacle is right then mSteer is left\"),\n            ],\n        )\n    ],\n)\n</code></pre>"},{"location":"#float-and-vectorization","title":"<code>float</code> and vectorization","text":"<pre><code># single `float` operation\nengine.input_variable(\"obstacle\").value = 0.5\nengine.process()\nprint(\"y =\", engine.output_variable(\"mSteer\").value)\n# &gt; y = 0.5\nprint(\"\u1ef9 =\", engine.output_variable(\"mSteer\").fuzzy_value())\n# &gt; \u1ef9 = 0.500/left + 0.500/right\n\n# vectorization\nengine.input_variable(\"obstacle\").value = fl.array([0, 0.25, 0.5, 0.75, 1.0])\nengine.process()\nprint(\"y =\", repr(engine.output_variable(\"mSteer\").value))\n# &gt; y = array([0.6666665 , 0.62179477, 0.5       , 0.37820523, 0.3333335 ])\nprint(\"\u1ef9 =\", repr(engine.output_variable(\"mSteer\").fuzzy_value()))\n# &gt; \u1ef9 = array(['0.000/left + 1.000/right',\n#              '0.250/left + 0.750/right',\n#              '0.500/left + 0.500/right',\n#              '0.750/left + 0.250/right',\n#              '1.000/left + 0.000/right'], dtype='&lt;U26')\n</code></pre> <p>Please refer to the documentation for more information: fuzzylite.github.io/pyfuzzylite/</p>"},{"location":"#contributing","title":"Contributing","text":"<p>All contributions are welcome, provided they follow the following guidelines:</p> <ul> <li>Pull requests are made to the development branch</li> <li>Source code is consistent with standards in the library</li> <li>Contribution is properly documented and tested, raising issues where appropriate</li> <li>Contribution is licensed under the FuzzyLite License</li> </ul>"},{"location":"#reference","title":"Reference","text":"<p>If you are using the FuzzyLite Libraries, please cite the following reference in your article:</p> <p>Juan Rada-Vilela. The FuzzyLite Libraries for Fuzzy Logic Control, 2018. URL https://fuzzylite.com.</p> <p>Or using <code>bibtex</code>:</p> <pre><code>@misc{fl::fuzzylite,\n    author={Juan Rada-Vilela},\n    title={The FuzzyLite Libraries for Fuzzy Logic Control},\n    url={https://fuzzylite.com},\n    year={2018}\n}\n</code></pre> <p>fuzzylite\u00ae is a registered trademark of FuzzyLite  jfuzzylite\u2122, pyfuzzylite\u2122 and QtFuzzyLite\u2122 are trademarks of FuzzyLite</p>"},{"location":"fuzzylite/__all__/activation/","title":"Activation","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Activation","title":"Activation","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for activation methods.</p> <p>Activation methods implement the criteria to activate the rules in a rule block. Activation methods should process every rule and determine whether the rule is to be activated or deactivated.</p> related <ul> <li>fuzzylite.activation.General</li> <li>fuzzylite.activation.First</li> <li>fuzzylite.activation.Last</li> <li>fuzzylite.activation.Highest</li> <li>fuzzylite.activation.Lowest</li> <li>fuzzylite.activation.Proportional</li> <li>fuzzylite.activation.Threshold</li> <li>fuzzylite.factory.ActivationFactory</li> </ul>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Activation-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Activation.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Returns the code to construct the activation method in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the activation method in Python.</p>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Activation.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the activation method in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the activation method in the FuzzyLite Language.</p>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Activation.activate","title":"activate  <code>abstractmethod</code>","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Implement the activation method of the rule block.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate</p> required"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Activation.assert_is_not_vector","title":"assert_is_not_vector","text":"<pre><code>assert_is_not_vector(activation_degree: Scalar) -&gt; None\n</code></pre> <p>Assert that the activation degree is not a vector.</p> <p>Parameters:</p> Name Type Description Default <code>activation_degree</code> <code>Scalar</code> <p>activation degree to assert</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if the activation degree contains more than one element</p>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Activation.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the activation method with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>list of space-separated parameter values</p> required"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Activation.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the activation method.</p> <p>Returns:</p> Type Description <code>str</code> <p>parameters of the activation method.</p>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.First","title":"First","text":"<p>               Bases: <code>Activation</code></p> <p>Activate the first \\(n\\) rules (in insertion order) whose activation degrees are greater than or equal to the threshold.</p> related <ul> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.activation.Last</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.First-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.First.rules","title":"rules  <code>instance-attribute</code>","text":"<pre><code>rules = rules\n</code></pre>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.First.threshold","title":"threshold  <code>instance-attribute</code>","text":"<pre><code>threshold = threshold\n</code></pre>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.First-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.First.__init__","title":"__init__","text":"<pre><code>__init__(rules: int = 1, threshold: float = 0.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>rules</code> <code>int</code> <p>maximum number of rules to activate</p> <code>1</code> <code>threshold</code> <code>float</code> <p>minimum activation degree required to activate the rule.</p> <code>0.0</code>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.First.activate","title":"activate","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Activate the first \\(n\\) rules (in insertion order) whose activation degrees are greater than or equal to the threshold.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate.</p> required"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.First.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the activation method with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>number of rules and threshold (eg, <code>3 0.5</code>).</p> required"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.First.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the number of rules and threshold.</p> <p>Returns:</p> Type Description <code>str</code> <p>number of rules and threshold.</p>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.General","title":"General","text":"<p>               Bases: <code>Activation</code></p> <p>Activation method that activates every rule of a rule block in insertion order.</p> related <ul> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.General-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.General.activate","title":"activate","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Activate every rule in the rule block in the order they were added.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate.</p> required"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Highest","title":"Highest","text":"<p>               Bases: <code>Activation</code></p> <p>Activation method that activates only the rules with the highest activation degrees in descending order.</p> related <ul> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.activation.Lowest</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Highest-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Highest.rules","title":"rules  <code>instance-attribute</code>","text":"<pre><code>rules = rules\n</code></pre>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Highest-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Highest.__init__","title":"__init__","text":"<pre><code>__init__(rules: int = 1) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>rules</code> <code>int</code> <p>number of rules to activate.</p> <code>1</code>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Highest.activate","title":"activate","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Activate the rules with the highest activation degrees.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate.</p> required"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Highest.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the activation method with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>number of rules (eg, <code>3</code>).</p> required"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Highest.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the number of rules.</p> <p>Returns:</p> Type Description <code>str</code> <p>number of rules.</p>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Last","title":"Last","text":"<p>               Bases: <code>Activation</code></p> <p>Activation method that activates the first \\(n\\) rules (in reverse insertion order) whose activation degrees are greater than or equal to the threshold.</p> related <ul> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.activation.First</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Last-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Last.rules","title":"rules  <code>instance-attribute</code>","text":"<pre><code>rules = rules\n</code></pre>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Last.threshold","title":"threshold  <code>instance-attribute</code>","text":"<pre><code>threshold = threshold\n</code></pre>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Last-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Last.__init__","title":"__init__","text":"<pre><code>__init__(rules: int = 1, threshold: float = 0.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>rules</code> <code>int</code> <p>maximum number of rules to activate</p> <code>1</code> <code>threshold</code> <code>float</code> <p>minimum activation degree required to activate the rule.</p> <code>0.0</code>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Last.activate","title":"activate","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Activate the last \\(n\\) rules (in reverse insertion order) whose activation degrees are greater than or equal to the threshold.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate.</p> required"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Last.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the activation method with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>number of rules and threshold (eg, <code>3 0.5</code>).</p> required"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Last.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the number of rules and threshold.</p> <p>Returns:</p> Type Description <code>str</code> <p>number of rules and threshold.</p>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Lowest","title":"Lowest","text":"<p>               Bases: <code>Activation</code></p> <p>Activation method that activates only the rules with the lowest activation degrees in ascending order.</p> related <ul> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.activation.Highest</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Lowest-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Lowest.rules","title":"rules  <code>instance-attribute</code>","text":"<pre><code>rules = rules\n</code></pre>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Lowest-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Lowest.__init__","title":"__init__","text":"<pre><code>__init__(rules: int = 1) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>rules</code> <code>int</code> <p>number of rules to activate.</p> <code>1</code>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Lowest.activate","title":"activate","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Activate the rules with the lowest activation degrees.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate.</p> required"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Lowest.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the activation method with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>number of rules (eg, <code>3</code>).</p> required"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Lowest.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the number of rules.</p> <p>Returns:</p> Type Description <code>str</code> <p>number of rules.</p>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Proportional","title":"Proportional","text":"<p>               Bases: <code>Activation</code></p> <p>Activation method that activates the rules utilizing normalized activation degrees, thus the sum of the activation degrees is equal to one.</p> related <ul> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.activation.General</li> <li>fuzzylite.activation.Threshold</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Proportional-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Proportional.activate","title":"activate","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Activate the rules using normalized activation degrees.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate.</p> required"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold","title":"Threshold","text":"<p>               Bases: <code>Activation</code></p> <p>Activation method that activates the rules whose activation degrees satisfy the comparison operator and the threshold, and deactivates the rest.</p> related <ul> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.activation.General</li> <li>fuzzylite.activation.Proportional</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.comparator","title":"comparator  <code>instance-attribute</code>","text":"<pre><code>comparator = comparator\n</code></pre>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.threshold","title":"threshold  <code>instance-attribute</code>","text":"<pre><code>threshold = threshold\n</code></pre>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold-classes","title":"Classes","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.Comparator","title":"Comparator","text":"<p>               Bases: <code>Enum</code></p> <p>Six comparison operators between the activation degree \\(a\\) and the threshold \\(\\theta\\).</p>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.Comparator-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.Comparator.EqualTo","title":"EqualTo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EqualTo = '=='\n</code></pre>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.Comparator.GreaterThan","title":"GreaterThan  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GreaterThan = '&gt;'\n</code></pre>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.Comparator.GreaterThanOrEqualTo","title":"GreaterThanOrEqualTo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GreaterThanOrEqualTo = '&gt;='\n</code></pre>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.Comparator.LessThan","title":"LessThan  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LessThan = '&lt;'\n</code></pre>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.Comparator.LessThanOrEqualTo","title":"LessThanOrEqualTo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LessThanOrEqualTo = '&lt;='\n</code></pre>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.Comparator.NotEqualTo","title":"NotEqualTo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NotEqualTo = '!='\n</code></pre>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.Comparator.__operator__","title":"__operator__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__operator__: dict[str, Callable[[Scalar, Scalar], bool | Array[bool_]]] = {\n    LessThan: lt,\n    LessThanOrEqualTo: le,\n    EqualTo: eq,\n    NotEqualTo: ne,\n    GreaterThanOrEqualTo: ge,\n    GreaterThan: gt,\n}\n</code></pre>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.Comparator.operator","title":"operator  <code>property</code>","text":"<pre><code>operator: Callable[[Scalar, Scalar], bool | Array[bool_]]\n</code></pre> <p>Return the function reference for the operator.</p> <p>Returns:</p> Type Description <code>Callable[[Scalar, Scalar], bool | Array[bool_]]</code> <p>function reference for the operator.</p>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.Comparator-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.Comparator.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the comparator in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the comparator in Python.</p>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.__init__","title":"__init__","text":"<pre><code>__init__(comparator: Comparator | str = GreaterThan, threshold: float = 0.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>comparator</code> <code>Comparator | str</code> <p>comparison operator</p> <code>GreaterThan</code> <code>threshold</code> <code>float</code> <p>value for activation degrees.</p> <code>0.0</code>"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.activate","title":"activate","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Activates the rules whose activation degrees satisfy the comparator and threshold, and deactivate the rest.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate.</p> required"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the activation method with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>comparator and threshold (eg, <code>&gt; 0.5</code>).</p> required"},{"location":"fuzzylite/__all__/activation/#fuzzylite.activation.Threshold.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the comparator and threshold.</p> <p>Returns:</p> Type Description <code>str</code> <p>comparator and threshold.</p>"},{"location":"fuzzylite/__all__/benchmark/","title":"Benchmark","text":""},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark","title":"Benchmark","text":"<p>Evaluate the performance of an engine on a dataset.</p> <p>The performance time is measured in seconds and the error is measured as the mean squared error over the differences between the expected dataset output values and the obtained output values.</p> related <ul> <li>fuzzylite.engine.Engine</li> <li>fuzzylite.library.Settings</li> </ul>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data = data\n</code></pre>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.engine","title":"engine  <code>instance-attribute</code>","text":"<pre><code>engine = engine\n</code></pre>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.error","title":"error  <code>instance-attribute</code>","text":"<pre><code>error: list[float] = []\n</code></pre>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.random","title":"random  <code>instance-attribute</code>","text":"<pre><code>random = RandomState(seed=seed)\n</code></pre>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.rows","title":"rows  <code>instance-attribute</code>","text":"<pre><code>rows = rows\n</code></pre>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.seed","title":"seed  <code>instance-attribute</code>","text":"<pre><code>seed = seed\n</code></pre>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.shuffle","title":"shuffle  <code>instance-attribute</code>","text":"<pre><code>shuffle = shuffle\n</code></pre>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.test_data","title":"test_data  <code>instance-attribute</code>","text":"<pre><code>test_data = view()\n</code></pre>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.time","title":"time  <code>instance-attribute</code>","text":"<pre><code>time: list[float] = []\n</code></pre>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str,\n    engine: Engine,\n    data: ScalarArray,\n    *,\n    rows: int | float = 1.0,\n    shuffle: bool = True,\n    seed: int | None = None\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the benchmark</p> required <code>engine</code> <code>Engine</code> <p>engine to benchmark</p> required <code>data</code> <code>ScalarArray</code> <p>data to benchmark the engine on</p> required <code>rows</code> <code>int | float</code> <p>number (int) or ratio (float) of rows to use from the data</p> <code>1.0</code> <code>shuffle</code> <code>bool</code> <p>shuffles the data</p> <code>True</code> <code>seed</code> <code>int | None</code> <p>seed to shuffle the data.</p> <code>None</code>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the benchmark in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the benchmark in Python.</p>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.engine_and_data","title":"engine_and_data  <code>classmethod</code>","text":"<pre><code>engine_and_data(example: ModuleType) -&gt; tuple[Engine, ScalarArray]\n</code></pre> <p>Create the engine and load the dataset for the example.</p> <p>Parameters:</p> Name Type Description Default <code>example</code> <code>ModuleType</code> <p>is the module to benchmark (eg, fuzzylite.examples.terms.arc)</p> required <p>Returns:</p> Type Description <code>tuple[Engine, ScalarArray]</code> <p>tuple of engine and dataset</p>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.for_example","title":"for_example  <code>classmethod</code>","text":"<pre><code>for_example(example: ModuleType, rows: int | float = 1.0, shuffle: bool = True, seed: int | None = None) -&gt; Benchmark\n</code></pre> <p>Create benchmark for the example.</p> <p>Parameters:</p> Name Type Description Default <code>example</code> <code>ModuleType</code> <p>example to benchmark (eg, <code>fuzzylite.examples.terms.arc</code>)</p> required <code>rows</code> <code>int | float</code> <p>number (int) or ratio (float) of rows to use from the data</p> <code>1.0</code> <code>shuffle</code> <code>bool</code> <p>whether to shuffle the data</p> <code>True</code> <code>seed</code> <code>int | None</code> <p>seed to shuffle the data</p> <code>None</code> <p>Returns:</p> Type Description <code>Benchmark</code> <p>a benchmark ready for the example</p>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.measure","title":"measure","text":"<pre><code>measure(*, runs: int = 1) -&gt; None\n</code></pre> <p>Measure the performance of the engine on the dataset for a number of runs.</p> <p>Parameters:</p> Name Type Description Default <code>runs</code> <code>int</code> <p>number of runs to evaluate the engine on the test data</p> <code>1</code>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.prepare","title":"prepare","text":"<pre><code>prepare() -&gt; None\n</code></pre> <p>Prepare the engine and dataset to benchmark.</p>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.prepare_data","title":"prepare_data","text":"<pre><code>prepare_data() -&gt; None\n</code></pre> <p>Prepare the dataset to benchmark on.</p>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.prepare_engine","title":"prepare_engine","text":"<pre><code>prepare_engine() -&gt; None\n</code></pre> <p>Prepare the engine to benchmark.</p>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.reset","title":"reset","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset the benchmark.</p>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the benchmark once (without computing statistics).</p>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.summary","title":"summary","text":"<pre><code>summary() -&gt; dict[str, Any]\n</code></pre> <p>Summarize the benchmark results.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dictionary of statistics containing the performance time in seconds and the mean squared error</p>"},{"location":"fuzzylite/__all__/benchmark/#fuzzylite.benchmark.Benchmark.summary_markdown","title":"summary_markdown","text":"<pre><code>summary_markdown(*, header: bool = False) -&gt; str\n</code></pre> <p>Summarize the benchmark results and format them using markdown.</p> <p>Parameters:</p> Name Type Description Default <code>header</code> <code>bool</code> <p>whether to include table header in summary</p> <code>False</code>"},{"location":"fuzzylite/__all__/defuzzifier/","title":"Defuzzifier","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.Bisector","title":"Bisector","text":"<p>               Bases: <code>IntegralDefuzzifier</code></p> <p>Integral defuzzifier that computes the bisector of a fuzzy set.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.IntegralDefuzzifier</li> <li>fuzzylite.defuzzifier.Centroid</li> </ul>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.Bisector-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.Bisector.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify(term: Term, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Compute the bisector of a fuzzy set, that is, the x-coordinate such that the area to its left is approximately equal to the area to its right.</p> <p>The defuzzification process integrates over the fuzzy set using the given range. The integration algorithm is the midpoint rectangle method (https://en.wikipedia.org/wiki/Rectangle_method).</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>fuzzy set to defuzzify</p> required <code>minimum</code> <code>float</code> <p>value to start defuzzification</p> required <code>maximum</code> <code>float</code> <p>value to end defuzzification</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x\\)-coordinate of the bisector of the fuzzy set</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.Centroid","title":"Centroid","text":"<p>               Bases: <code>IntegralDefuzzifier</code></p> <p>Integral defuzzifier that computes the centroid of a fuzzy set.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.IntegralDefuzzifier</li> <li>fuzzylite.defuzzifier.Bisector</li> </ul>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.Centroid-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.Centroid.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify(term: Term, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Compute the centroid of a fuzzy set.</p> <p>The defuzzification process integrates over the fuzzy set using the given range. The integration algorithm is the midpoint rectangle method (https://en.wikipedia.org/wiki/Rectangle_method).</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>fuzzy set to defuzzify</p> required <code>minimum</code> <code>float</code> <p>value to start defuzzification</p> required <code>maximum</code> <code>float</code> <p>value to end defuzzification</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x\\)-coordinate of the centroid of the fuzzy set</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.Defuzzifier","title":"Defuzzifier","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for defuzzifiers.</p> related <ul> <li>fuzzylite.defuzzifier.IntegralDefuzzifier<ul> <li>fuzzylite.defuzzifier.Bisector</li> <li>fuzzylite.defuzzifier.Centroid</li> <li>fuzzylite.defuzzifier.LargestOfMaximum</li> <li>fuzzylite.defuzzifier.MeanOfMaximum</li> <li>fuzzylite.defuzzifier.SmallestOfMaximum</li> </ul> </li> <li>fuzzylite.defuzzifier.WeightedDefuzzifier<ul> <li>fuzzylite.defuzzifier.WeightedAverage</li> <li>fuzzylite.defuzzifier.WeightedSum</li> </ul> </li> <li>fuzzylite.variable.OutputVariable</li> <li>fuzzylite.term.Aggregated</li> <li>fuzzylite.term.Activated</li> </ul>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.Defuzzifier-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.Defuzzifier.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the defuzzifier in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the defuzzifier in Python.</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.Defuzzifier.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the defuzzifier in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the defuzzifier in the FuzzyLite Language.</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.Defuzzifier.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the defuzzifier with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>space-separated parameter values</p> required"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.Defuzzifier.defuzzify","title":"defuzzify  <code>abstractmethod</code>","text":"<pre><code>defuzzify(term: Term, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Defuzzify the term using the range <code>[minimum,maximum]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to defuzzify, typically an Aggregated term</p> required <code>minimum</code> <code>float</code> <p>minimum value of the range</p> required <code>maximum</code> <code>float</code> <p>maximum value of the range</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>defuzzified value of the term.</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.Defuzzifier.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the defuzzifier.</p> <p>Returns:</p> Type Description <code>str</code> <p>space-separated parameters of the defuzzifier.</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier","title":"IntegralDefuzzifier","text":"<p>               Bases: <code>Defuzzifier</code></p> <p>Abstract class for defuzzifiers that integrate over the fuzzy set.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.Bisector</li> <li>fuzzylite.defuzzifier.Centroid</li> <li>fuzzylite.defuzzifier.LargestOfMaximum</li> <li>fuzzylite.defuzzifier.MeanOfMaximum</li> <li>fuzzylite.defuzzifier.SmallestOfMaximum</li> </ul>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier.default_resolution","title":"default_resolution  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_resolution: Final[int] = 1000\n</code></pre>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier.resolution","title":"resolution  <code>instance-attribute</code>","text":"<pre><code>resolution = resolution or default_resolution\n</code></pre>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier.__init__","title":"__init__","text":"<pre><code>__init__(resolution: int | None = None) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>resolution</code> <code>int | None</code> <p>number of divisions to discretize the range and compute the area under the curve.</p> <code>None</code>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the defuzzifier in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the defuzzifier in Python.</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the defuzzifier with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>list of space-separated parameter values</p> required"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier.defuzzify","title":"defuzzify  <code>abstractmethod</code>","text":"<pre><code>defuzzify(term: Term, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Implement the defuzzification of the term using the given range.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to defuzzify</p> required <code>minimum</code> <code>float</code> <p>value to start defuzzification</p> required <code>maximum</code> <code>float</code> <p>value to end defuzzification</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>defuzzified value.</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters to configure the defuzzifier.</p> <p>Returns:</p> Type Description <code>str</code> <p>parameters to configure the defuzzifier.</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.LargestOfMaximum","title":"LargestOfMaximum","text":"<p>               Bases: <code>IntegralDefuzzifier</code></p> <p>Integral defuzzifier that computes the largest value of the maximum membership function of a fuzzy set.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.IntegralDefuzzifier</li> <li>fuzzylite.defuzzifier.MeanOfMaximum</li> <li>fuzzylite.defuzzifier.SmallestOfMaximum</li> </ul>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.LargestOfMaximum-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.LargestOfMaximum.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify(term: Term, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Compute the largest value of the maximum membership function of a fuzzy set.</p> <p>The defuzzification process integrates over the fuzzy set using the given range. The integration algorithm is the midpoint rectangle method (https://en.wikipedia.org/wiki/Rectangle_method).</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>fuzzy set to defuzzify</p> required <code>minimum</code> <code>float</code> <p>value to start defuzzification</p> required <code>maximum</code> <code>float</code> <p>value to end defuzzification</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>largest \\(x\\)-coordinate of the maximum membership function value in the fuzzy set</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.MeanOfMaximum","title":"MeanOfMaximum","text":"<p>               Bases: <code>IntegralDefuzzifier</code></p> <p>Integral defuzzifier that computes the mean value of the maximum membership function of a fuzzy set.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.IntegralDefuzzifier</li> <li>fuzzylite.defuzzifier.SmallestOfMaximum</li> <li>fuzzylite.defuzzifier.LargestOfMaximum</li> </ul>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.MeanOfMaximum-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.MeanOfMaximum.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify(term: Term, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Compute the mean value of the maximum membership function of a fuzzy set.</p> <p>The defuzzification process integrates over the fuzzy set using the given range. The integration algorithm is the midpoint rectangle method (https://en.wikipedia.org/wiki/Rectangle_method).</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>fuzzy set to defuzzify</p> required <code>minimum</code> <code>float</code> <p>value to start defuzzification</p> required <code>maximum</code> <code>float</code> <p>value to end defuzzification</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>mean \\(x\\)-coordinate of the maximum membership function value in the fuzzy set</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.SmallestOfMaximum","title":"SmallestOfMaximum","text":"<p>               Bases: <code>IntegralDefuzzifier</code></p> <p>Integral defuzzifier that computes the smallest value of the maximum membership function of a fuzzy set.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.IntegralDefuzzifier</li> <li>fuzzylite.defuzzifier.MeanOfMaximum</li> <li>fuzzylite.defuzzifier.LargestOfMaximum</li> </ul>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.SmallestOfMaximum-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.SmallestOfMaximum.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify(term: Term, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Compute the smallest value of the maximum membership function in the fuzzy set.</p> <p>The defuzzification process integrates over the fuzzy set using the given range. The integration algorithm is the midpoint rectangle method (https://en.wikipedia.org/wiki/Rectangle_method).</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>fuzzy set to defuzzify</p> required <code>minimum</code> <code>float</code> <p>value to start defuzzification</p> required <code>maximum</code> <code>float</code> <p>value to end defuzzification</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>smallest \\(x\\)-coordinate of the maximum membership function value in the fuzzy set</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedAverage","title":"WeightedAverage","text":"<p>               Bases: <code>WeightedDefuzzifier</code></p> <p>Weighted defuzzifier that computes the weighted average of a fuzzy set represented by an Aggregated term.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.WeightedDefuzzifier</li> <li>fuzzylite.defuzzifier.WeightedSum</li> <li>fuzzylite.term.Aggregated</li> </ul>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedAverage-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedAverage.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify(term: Term, minimum: float = nan, maximum: float = nan) -&gt; Scalar\n</code></pre> <p>Computes the weighted average of the fuzzy set.</p> <p>The fuzzy set is represented by an Aggregated Term as \\(y = \\sum_i{w_iz_i}\\), where \\(w_i\\) is the activation degree of term \\(i\\), and \\(z_i = \\mu_i(w_i)\\).</p> <p>In Takagi-Sugeno controllers, the membership function \\(\\mu_i(w_i)\\) is generally a Constant, Linear, or Function term, which typically disregards the \\(w_i\\) value.</p> Warning <p>From version 8, the aggregation operator is used to aggregate multiple activations of the same term.</p> <p>In previous versions, the implication and aggregation operators are not used for weighted defuzzification.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to defuzzify</p> required <code>minimum</code> <code>float</code> <p>irrelevant</p> <code>nan</code> <code>maximum</code> <code>float</code> <p>irrelevant</p> <code>nan</code> <p>Returns:</p> Type Description <code>Scalar</code> <p>weighted average of the fuzzy set</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier","title":"WeightedDefuzzifier","text":"<p>               Bases: <code>Defuzzifier</code></p> <p>Abstract class for defuzzifiers that compute a weighted function on the fuzzy set.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.WeightedAverage</li> <li>fuzzylite.defuzzifier.WeightedSum</li> </ul>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type = Type[type]\n</code></pre>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier-classes","title":"Classes","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.Type","title":"Type","text":"<p>               Bases: <code>Enum</code></p> <p>Type of the weighted defuzzifier based on the terms in the fuzzy set.</p> <ul> <li><code>Automatic</code>: Automatically inferred from the terms</li> <li><code>TakagiSugeno</code>: Manually set to TakagiSugeno (or Inverse Tsukamoto)</li> <li><code>Tsukamoto</code>: Manually set to Tsukamoto</li> </ul>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.Type-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.Type.Automatic","title":"Automatic  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Automatic = auto()\n</code></pre>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.Type.TakagiSugeno","title":"TakagiSugeno  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TakagiSugeno = auto()\n</code></pre>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.Type.Tsukamoto","title":"Tsukamoto  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Tsukamoto = auto()\n</code></pre>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.Type-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.Type.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to identify the type of defuzzifier in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to identify the type of defuzzifier in Python.</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.__init__","title":"__init__","text":"<pre><code>__init__(type: str | Type = Automatic) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str | Type</code> <p>name or type of the weighted defuzzifier.</p> <code>Automatic</code>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the defuzzifier in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the defuzzifier in Python.</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the defuzzifier with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>list of space-separated parameter values</p> required"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.defuzzify","title":"defuzzify  <code>abstractmethod</code>","text":"<pre><code>defuzzify(term: Term, minimum: float = nan, maximum: float = nan) -&gt; Scalar\n</code></pre> <p>Implement the defuzzification of the term.</p> Warning <p>From version 8, the aggregation operator is used to aggregate multiple activations of the same term.</p> <p>In previous versions, the implication and aggregation operators are not used for weighted defuzzification.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to defuzzify</p> required <code>minimum</code> <code>float</code> <p>irrelevant</p> <code>nan</code> <code>maximum</code> <code>float</code> <p>irrelevant</p> <code>nan</code> <p>Returns:</p> Type Description <code>Scalar</code> <p>defuzzified value</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.infer_type","title":"infer_type  <code>classmethod</code>","text":"<pre><code>infer_type(component: Term | Variable) -&gt; Type\n</code></pre> <p>Infer the type of the defuzzifier based on the component.</p> <p>Parameters:</p> Name Type Description Default <code>component</code> <code>Term | Variable</code> <p>term or variable to infer the type for</p> required <p>Returns:</p> Type Description <code>Type</code> <p>inferred type of the defuzzifier based on the component.</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters to configure the defuzzifier.</p> <p>Returns:</p> Type Description <code>str</code> <p>parameters to configure the defuzzifier.</p>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedSum","title":"WeightedSum","text":"<p>               Bases: <code>WeightedDefuzzifier</code></p> <p>Weighted defuzzifier that computes the weighted sum of a fuzzy set represented by an Aggregated term.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.WeightedDefuzzifier</li> <li>fuzzylite.defuzzifier.WeightedAverage</li> <li>fuzzylite.term.Aggregated</li> </ul>"},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedSum-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/defuzzifier/#fuzzylite.defuzzifier.WeightedSum.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify(term: Term, minimum: float = nan, maximum: float = nan) -&gt; Scalar\n</code></pre> <p>Computes the weighted sum of the fuzzy set.</p> <p>The fuzzy set is represented by Aggregated term as \\(y = \\sum_i{w_iz_i}\\), where \\(w_i\\) is the activation degree of term \\(i\\), and \\(z_i = \\mu_i(w_i)\\).</p> <p>In Takagi-Sugeno controllers, the membership function \\(\\mu_i(w_i)\\) is generally a Constant, Linear, or Function term, which typically disregards the \\(w_i\\) value.</p> Warning <p>From version 8, the aggregation operator is used to aggregate multiple activations of the same term.</p> <p>In previous versions, the implication and aggregation operators are not used for weighted defuzzification.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to defuzzify</p> required <code>minimum</code> <code>float</code> <p>irrelevant</p> <code>nan</code> <code>maximum</code> <code>float</code> <p>irrelevant</p> <code>nan</code> <p>Returns:</p> Type Description <code>Scalar</code> <p>weighted sum of the fuzzy set</p>"},{"location":"fuzzylite/__all__/engine/","title":"Engine","text":""},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine","title":"Engine","text":"<p>Core class of the library that groups the necessary components of a fuzzy logic controller.</p> related <ul> <li>fuzzylite.variable.InputVariable</li> <li>fuzzylite.variable.OutputVariable</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description = description\n</code></pre>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.input_values","title":"input_values  <code>property</code> <code>writable</code>","text":"<pre><code>input_values: ScalarArray\n</code></pre> <p>Get/Set 2D array where columns represent input variables and rows their input values.</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.input_values--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>ScalarArray</code> <p>2D array of input values (rows) for each input variable (columns)</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.input_values--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>values</code> <code>ScalarArray</code> <p>input values of the engine.</p> required Tip when <code>values</code> is a: the result: single scalar value sets the values of all input variables 1D array on an engine with a single variable sets the values for the input variable 1D array on an engine with multiple variables sets each value to each input variable 2D array sets each column of values to each input variable <p>Raises:</p> Type Description <code>RuntimeError</code> <p>when there are no input variables</p> <code>ValueError</code> <p>when the dimensionality of values is greater than 2</p> <code>ValueError</code> <p>when the number of columns in the values is different from the number of input variables</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.input_variables","title":"input_variables  <code>instance-attribute</code>","text":"<pre><code>input_variables = list(input_variables or [])\n</code></pre>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.output_values","title":"output_values  <code>property</code>","text":"<pre><code>output_values: ScalarArray\n</code></pre> <p>Return a 2D array of output values (rows) for each output variable (columns).</p> <p>Returns:</p> Type Description <code>ScalarArray</code> <p>2D array of output values (rows) for each output variable (columns).</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.output_variables","title":"output_variables  <code>instance-attribute</code>","text":"<pre><code>output_variables = list(output_variables or [])\n</code></pre>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.rule_blocks","title":"rule_blocks  <code>instance-attribute</code>","text":"<pre><code>rule_blocks = list(rule_blocks or [])\n</code></pre>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.values","title":"values  <code>property</code>","text":"<pre><code>values: ScalarArray\n</code></pre> <p>Return a 2D array of current input and output values.</p> <p>Returns:</p> Type Description <code>ScalarArray</code> <p>2D array of current input and output values.</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.variables","title":"variables  <code>property</code>","text":"<pre><code>variables: list[InputVariable | OutputVariable]\n</code></pre> <p>Return the list of input and output variables.</p> <p>Returns:</p> Type Description <code>list[InputVariable | OutputVariable]</code> <p>list of input and output variables.</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine-classes","title":"Classes","text":""},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.Type","title":"Type","text":"<p>               Bases: <code>Enum</code></p> <p>Determine type of engine.</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.Type-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.Type.Hybrid","title":"Hybrid  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Hybrid = auto()\n</code></pre>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.Type.InverseTsukamoto","title":"InverseTsukamoto  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>InverseTsukamoto = auto()\n</code></pre>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.Type.Larsen","title":"Larsen  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Larsen = auto()\n</code></pre>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.Type.Mamdani","title":"Mamdani  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Mamdani = auto()\n</code></pre>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.Type.TakagiSugeno","title":"TakagiSugeno  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TakagiSugeno = auto()\n</code></pre>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.Type.Tsukamoto","title":"Tsukamoto  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Tsukamoto = auto()\n</code></pre>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.Type.Unknown","title":"Unknown  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Unknown = auto()\n</code></pre>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(item: str) -&gt; InputVariable | OutputVariable | RuleBlock\n</code></pre> <p>Allow operation of engines as <code>engine[\"power\"].value</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>str</code> <p>name of the component to find in input variables, output variables, or rule blocks</p> required <p>Returns:</p> Type Description <code>InputVariable | OutputVariable | RuleBlock</code> <p>first component found with the name</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    description: str = \"\",\n    input_variables: Iterable[InputVariable] | None = None,\n    output_variables: Iterable[OutputVariable] | None = None,\n    rule_blocks: Iterable[RuleBlock] | None = None,\n    load: bool = True,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the engine</p> <code>''</code> <code>description</code> <code>str</code> <p>description of the engine</p> <code>''</code> <code>input_variables</code> <code>Iterable[InputVariable] | None</code> <p>list of input variables</p> <code>None</code> <code>output_variables</code> <code>Iterable[OutputVariable] | None</code> <p>list of output variables</p> <code>None</code> <code>rule_blocks</code> <code>Iterable[RuleBlock] | None</code> <p>list of rule blocks</p> <code>None</code> <code>load</code> <code>bool</code> <p>whether to automatically update references to this engine and load the rules in the rule blocks.</p> <code>True</code>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the engine in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the engine in Python.</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the engine in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the engine in the FuzzyLite Language.</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.configure","title":"configure","text":"<pre><code>configure(\n    conjunction: TNorm | str | None = None,\n    disjunction: SNorm | str | None = None,\n    implication: TNorm | str | None = None,\n    aggregation: SNorm | str | None = None,\n    defuzzifier: Defuzzifier | str | None = None,\n    activation: Activation | str | None = None,\n) -&gt; None\n</code></pre> <p>Configure the engine with the given operators.</p> <p>Parameters:</p> Name Type Description Default <code>conjunction</code> <code>TNorm | str | None</code> <p>object or name of TNorm registered in the TNormFactory</p> <code>None</code> <code>disjunction</code> <code>SNorm | str | None</code> <p>object or name of SNorm registered in the SNormFactory</p> <code>None</code> <code>implication</code> <code>TNorm | str | None</code> <p>object or name of TNorm registered in the TNormFactory</p> <code>None</code> <code>aggregation</code> <code>SNorm | str | None</code> <p>object or name of SNorm registered in the SNormFactory</p> <code>None</code> <code>defuzzifier</code> <code>Defuzzifier | str | None</code> <p>object or name of defuzzifier registered in the DefuzzifierFactory</p> <code>None</code> <code>activation</code> <code>Activation | str | None</code> <p>object or name of activation method registered in the ActivationFactory</p> <code>None</code>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.copy","title":"copy","text":"<pre><code>copy() -&gt; Engine\n</code></pre> <p>Create a deep copy of the engine.</p> <p>Returns:</p> Type Description <code>Engine</code> <p>deep copy of the engine</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.infer_type","title":"infer_type","text":"<pre><code>infer_type(reasons: list[str] | None = None) -&gt; Type\n</code></pre> <p>Infer the type of the engine based on its configuration.</p> <p>Parameters:</p> Name Type Description Default <code>reasons</code> <code>list[str] | None</code> <p>optional output list explaining the reasons for the inferred type</p> <code>None</code> <p>Returns:</p> Type Description <code>Type</code> <p>type of engine inferred from its configuration.</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.input_variable","title":"input_variable","text":"<pre><code>input_variable(name_or_index: str | int) -&gt; InputVariable\n</code></pre> <p>Find the input variable by the name or index.</p> <p>The best performance is \\(O(1)\\) when using indices, and the worst performance is \\(O(n)\\) when using names, where \\(n\\) is the number of input variables.</p> <p>Parameters:</p> Name Type Description Default <code>name_or_index</code> <code>str | int</code> <p>name or index of the input variable</p> required <p>Returns:</p> Type Description <code>InputVariable</code> <p>input variable by the name or index</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when there is no variable by the given name.</p> <code>IndexError</code> <p>when the index is out of range</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.is_ready","title":"is_ready","text":"<pre><code>is_ready(errors: list[str] | None = None) -&gt; bool\n</code></pre> <p>Determine whether the engine is configured correctly and ready for operation.</p> Note <p>In advanced engines, the result of this method should be taken as a suggestion and not as a prerequisite to operate the engine.</p> <p>Parameters:</p> Name Type Description Default <code>errors</code> <code>list[str] | None</code> <p>optional output list that stores the errors found if the engine is not ready</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>whether the engine is ready.</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.output_variable","title":"output_variable","text":"<pre><code>output_variable(name_or_index: str | int) -&gt; OutputVariable\n</code></pre> <p>Find the output variable of the given name or at the given index.</p> <p>The best performance is \\(O(1)\\) when using indices, and the worst performance is \\(O(n)\\) when using names, where \\(n\\) is the number of output variables.</p> <p>Parameters:</p> Name Type Description Default <code>name_or_index</code> <code>str | int</code> <p>name or index of the output variable</p> required <p>Returns:</p> Type Description <code>OutputVariable</code> <p>output variable by the given name or at the given index</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when there is no variable with the given name.</p> <code>IndexError</code> <p>when the index is out of range</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.process","title":"process","text":"<pre><code>process() -&gt; None\n</code></pre> <p>Process the engine in its current state as follows.</p> <ol> <li>clear the aggregated fuzzy output variables,</li> <li>activate the rule blocks, and</li> <li>defuzzify the output variables</li> </ol> related <ul> <li>fuzzylite.term.Aggregated.clear</li> <li>fuzzylite.rule.RuleBlock.activate</li> <li>fuzzylite.variable.OutputVariable.defuzzify</li> </ul>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.restart","title":"restart","text":"<pre><code>restart() -&gt; None\n</code></pre> <p>Restart the engine as follows.</p> <ol> <li>setting the values of the input variables to nan,</li> <li>reloading the rules of the rule blocks, and</li> <li>clearing the output variables</li> </ol> related <ul> <li>fuzzylite.variable.Variable.value</li> <li>fuzzylite.variable.OutputVariable.clear</li> </ul>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.rule_block","title":"rule_block","text":"<pre><code>rule_block(name_or_index: str | int) -&gt; RuleBlock\n</code></pre> <p>Find the rule block of the given name or at the given index.</p> <p>The best performance is \\(O(1)\\) when using indices, and the worst performance is \\(O(n)\\) when using names, where \\(n\\) is the number of rule blocks.</p> <p>Parameters:</p> Name Type Description Default <code>name_or_index</code> <code>str | int</code> <p>name or index of the rule block</p> required <p>Returns:</p> Type Description <code>RuleBlock</code> <p>rule block by the given name or at the given index</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when there is no variable with the given name.</p> <code>IndexError</code> <p>when the index is out of range</p>"},{"location":"fuzzylite/__all__/engine/#fuzzylite.engine.Engine.variable","title":"variable","text":"<pre><code>variable(name: str) -&gt; Variable\n</code></pre> <p>Find the variable by the name, iterating first over the input variables and then over the output variables.</p> <p>The cost of this method is \\(O(n)\\), where \\(n\\) is the number of variables in the engine. For better performance, get the variables by index.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the input or output variable</p> required <p>Returns:</p> Type Description <code>Variable</code> <p>variable of the given name</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when there is no variable by the given name.</p>"},{"location":"fuzzylite/__all__/exporter/","title":"Exporter","text":""},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.Exporter","title":"Exporter","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class to export engines and its components to different formats.</p> related <ul> <li>fuzzylite.exporter.FldExporter</li> <li>fuzzylite.exporter.FllExporter</li> <li>fuzzylite.exporter.PythonExporter</li> <li>fuzzylite.engine.Engine</li> </ul>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.Exporter-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.Exporter.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return code to construct the exporter in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the exporter in Python</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.Exporter.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the class name of the exporter.</p> <p>Returns:</p> Type Description <code>str</code> <p>class name of the exporter</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.Exporter.to_file","title":"to_file","text":"<pre><code>to_file(path: str | Path, instance: Any) -&gt; None\n</code></pre> <p>Write the string representation of the instance into the file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>file path to export the instance.</p> required <code>instance</code> <code>Any</code> <p>a fuzzylite object.</p> required"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.Exporter.to_string","title":"to_string  <code>abstractmethod</code>","text":"<pre><code>to_string(instance: Any) -&gt; str\n</code></pre> <p>Return string representation of the instance.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>Any</code> <p>a fuzzylite object</p> required <p>Returns:</p> Type Description <code>str</code> <p>string representation of the object</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter","title":"FldExporter","text":"<p>               Bases: <code>Exporter</code></p> <p>Export the input values and output values of an engine to the FuzzyLite Dataset (FLD) format.</p> related <ul> <li>fuzzylite.exporter.Exporter</li> </ul> warning <p>FldExporter uses vectorization so it only works with the fuzzylite.activation.General activation method</p> todo <p>include option for non-vectorized export so other activation methods can be used</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.headers","title":"headers  <code>instance-attribute</code>","text":"<pre><code>headers = headers\n</code></pre>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.input_values","title":"input_values  <code>instance-attribute</code>","text":"<pre><code>input_values = input_values\n</code></pre>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.output_values","title":"output_values  <code>instance-attribute</code>","text":"<pre><code>output_values = output_values\n</code></pre>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.separator","title":"separator  <code>instance-attribute</code>","text":"<pre><code>separator = separator\n</code></pre>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter-classes","title":"Classes","text":""},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.ScopeOfValues","title":"ScopeOfValues","text":"<p>               Bases: <code>Enum</code></p> <p>Scope of the equally-distributed values to generate.</p> <ul> <li><code>EachVariable</code>: Generates \\(v\\) values for each variable, resulting in a total resolution of \\(-1 + \\max(1, v^{\\frac{1}{|I|})\\) from all combinations, where \\(I\\) refers to the input variables.</li> <li><code>AllVariables</code>: Generates values for each variable such that the total resolution is \\(v\\).</li> </ul>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.ScopeOfValues-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.ScopeOfValues.AllVariables","title":"AllVariables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AllVariables = auto()\n</code></pre>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.ScopeOfValues.EachVariable","title":"EachVariable  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EachVariable = auto()\n</code></pre>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.__init__","title":"__init__","text":"<pre><code>__init__(separator: str = ' ', headers: bool = True, input_values: bool = True, output_values: bool = True) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>separator</code> <code>str</code> <p>separator of the dataset columns</p> <code>' '</code> <code>headers</code> <code>bool</code> <p>whether to export the header of the dataset</p> <code>True</code> <code>input_values</code> <code>bool</code> <p>whether to export the input values</p> <code>True</code> <code>output_values</code> <code>bool</code> <p>whether to export the output values.</p> <code>True</code>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.header","title":"header","text":"<pre><code>header(engine: Engine) -&gt; str\n</code></pre> <p>Return the header of the dataset for the engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>header of the dataset for the engine.</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.to_file_from_reader","title":"to_file_from_reader","text":"<pre><code>to_file_from_reader(path: Path, engine: Engine, reader: IO[str], skip_lines: int = 0) -&gt; None\n</code></pre> <p>Write the FuzzyLite Dataset to the file using the input values from the engine.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>path to the output file</p> required <code>engine</code> <code>Engine</code> <p>engine to export</p> required <code>reader</code> <code>IO[str]</code> <p>reader of a set of lines containing space-separated input values</p> required <code>skip_lines</code> <code>int</code> <p>number of lines to skip from the beginning.</p> <code>0</code> <p>Returns:</p> Type Description <code>None</code> <p>FuzzyLite Dataset from the engine.</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.to_file_from_scope","title":"to_file_from_scope","text":"<pre><code>to_file_from_scope(\n    path: Path,\n    engine: Engine,\n    values: int = 1024,\n    scope: ScopeOfValues = AllVariables,\n    active_variables: set[InputVariable] | None = None,\n) -&gt; None\n</code></pre> <p>Write the FuzzyLite Dataset from the engine to the file using the input values and their scope.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>file path</p> required <code>engine</code> <code>Engine</code> <p>engine to export</p> required <code>values</code> <code>int</code> <p>number of values to export</p> <code>1024</code> <code>scope</code> <code>ScopeOfValues</code> <p>scope of the values</p> <code>AllVariables</code> <code>active_variables</code> <code>set[InputVariable] | None</code> <p>set of input variables to set values for</p> <code>None</code>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.to_string","title":"to_string","text":"<pre><code>to_string(instance: object) -&gt; str\n</code></pre> <p>Return a FuzzyLite Dataset from the engine using 1024 input values for all variables.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>object</code> <p>engine to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>FuzzyLite Dataset from the engine</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the instance is not an Engine.</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.to_string_from_reader","title":"to_string_from_reader","text":"<pre><code>to_string_from_reader(engine: Engine, reader: IO[str], skip_lines: int = 0) -&gt; str\n</code></pre> <p>Return a FuzzyLite Dataset from the engine using the input values from the reader.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <code>reader</code> <code>IO[str]</code> <p>reader of a set of lines containing space-separated input values</p> required <code>skip_lines</code> <code>int</code> <p>number of lines to skip from the beginning</p> <code>0</code> <p>Returns:</p> Type Description <code>str</code> <p>FuzzyLite Dataset from the engine.</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.to_string_from_scope","title":"to_string_from_scope","text":"<pre><code>to_string_from_scope(\n    engine: Engine,\n    values: int = 1024,\n    scope: ScopeOfValues = AllVariables,\n    active_variables: set[InputVariable] | None = None,\n) -&gt; str\n</code></pre> <p>Return a FuzzyLite Dataset from the engine using the input values and their scope.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <code>values</code> <code>int</code> <p>number of values to export</p> <code>1024</code> <code>scope</code> <code>ScopeOfValues</code> <p>scope of the values</p> <code>AllVariables</code> <code>active_variables</code> <code>set[InputVariable] | None</code> <p>input variables to set values for</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>FuzzyLite Dataset from the engine.</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.write","title":"write","text":"<pre><code>write(engine: Engine, writer: IO[str], input_values: Scalar) -&gt; None\n</code></pre> <p>Write a FuzzyLite Dataset line from the engine to the writer using the input values.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <code>writer</code> <code>IO[str]</code> <p>output where the engine will be written to</p> required <code>input_values</code> <code>Scalar</code> <p>matrix of input values.</p> required"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.write_from_reader","title":"write_from_reader","text":"<pre><code>write_from_reader(engine: Engine, writer: IO[str], reader: IO[str], skip_lines: int = 0) -&gt; None\n</code></pre> <p>Write the FuzzyLite Dataset from the engine to the writer using the input values from the reader.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <code>writer</code> <code>IO[str]</code> <p>output to write the engine</p> required <code>reader</code> <code>IO[str]</code> <p>reader of a set of lines containing space-separated input values</p> required <code>skip_lines</code> <code>int</code> <p>number of lines to skip from the beginning.</p> <code>0</code>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FldExporter.write_from_scope","title":"write_from_scope","text":"<pre><code>write_from_scope(\n    engine: Engine,\n    writer: IO[str],\n    values: int,\n    scope: ScopeOfValues,\n    active_variables: set[InputVariable] | None = None,\n) -&gt; None\n</code></pre> <p>Write a FuzzyLite dataset from the engine to the writer.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <code>writer</code> <code>IO[str]</code> <p>output to write the engine</p> required <code>values</code> <code>int</code> <p>number of values to export</p> required <code>scope</code> <code>ScopeOfValues</code> <p>scope of the values</p> required <code>active_variables</code> <code>set[InputVariable] | None</code> <p>input variables to generate values for.</p> <code>None</code>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter","title":"FllExporter","text":"<p>               Bases: <code>Exporter</code></p> <p>Export an engine and its components to the FuzzyLite Language.</p> related <ul> <li>fuzzylite.exporter.Exporter</li> <li>fuzzylite.importer.FllImporter</li> <li>FuzzyLite Language (FLL)</li> </ul>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter.indent","title":"indent  <code>instance-attribute</code>","text":"<pre><code>indent = indent\n</code></pre>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter.separator","title":"separator  <code>instance-attribute</code>","text":"<pre><code>separator = separator\n</code></pre>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter.__init__","title":"__init__","text":"<pre><code>__init__(indent: str = '  ', separator: str = '\\n') -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>indent</code> <code>str</code> <p>indentation of the FuzzyLite Language.</p> <code>'  '</code> <code>separator</code> <code>str</code> <p>separation between components of the FuzzyLite Language.</p> <code>'\\n'</code>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter.activation","title":"activation","text":"<pre><code>activation(activation: Activation | None) -&gt; str\n</code></pre> <p>Return the activation method in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>activation</code> <code>Activation | None</code> <p>activation method to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>activation method in the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter.defuzzifier","title":"defuzzifier","text":"<pre><code>defuzzifier(defuzzifier: Defuzzifier | None) -&gt; str\n</code></pre> <p>Return the defuzzifier in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>defuzzifier</code> <code>Defuzzifier | None</code> <p>defuzzifier to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>defuzzifier in the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter.engine","title":"engine","text":"<pre><code>engine(engine: Engine) -&gt; str\n</code></pre> <p>Return the engine in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>engine in the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter.format","title":"format","text":"<pre><code>format(key: str | None, value: Any) -&gt; str\n</code></pre> <p>Format the arguments according to the FuzzyLite Language.</p> formatting table value formatted <code>None</code> <code>none</code> <code>bool</code> <code>true</code>, <code>false</code> <code>float</code> <code>0.999</code> using fuzzylite.library.Settings.decimals <code>list|set|tuple</code> space-separated values, each formatted with this method object anything else uses the object's <code>__str__()</code> method <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str | None</code> <p>name of the property</p> required <code>value</code> <code>Any</code> <p>value to format</p> required <p>Returns:</p> Type Description <code>str</code> <p>formatted (key and) value according to the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter.input_variable","title":"input_variable","text":"<pre><code>input_variable(variable: InputVariable) -&gt; str\n</code></pre> <p>Return the input variable in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>variable</code> <code>InputVariable</code> <p>input variable to export</p> required <p>Returns: input variable in the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter.norm","title":"norm","text":"<pre><code>norm(norm: Norm | None) -&gt; str\n</code></pre> <p>Return the norm in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>norm</code> <code>Norm | None</code> <p>norm to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>norm in the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter.output_variable","title":"output_variable","text":"<pre><code>output_variable(variable: OutputVariable) -&gt; str\n</code></pre> <p>Return the output variable in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>variable</code> <code>OutputVariable</code> <p>output variable to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>output variable in the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter.rule","title":"rule","text":"<pre><code>rule(rule: Rule) -&gt; str\n</code></pre> <p>Return the rule in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>Rule</code> <p>rule to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>rule in the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter.rule_block","title":"rule_block","text":"<pre><code>rule_block(rule_block: RuleBlock) -&gt; str\n</code></pre> <p>Return the rule block in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>rule block in the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter.term","title":"term","text":"<pre><code>term(term: Term) -&gt; str\n</code></pre> <p>Return the term in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>term in the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter.to_string","title":"to_string","text":"<pre><code>to_string(instance: Any) -&gt; str\n</code></pre> <p>Return the object in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>Any</code> <p>fuzzylite object.</p> required <p>Returns:</p> Type Description <code>str</code> <p>object in the FuzzyLite Language.</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.FllExporter.variable","title":"variable","text":"<pre><code>variable(variable: Variable, /, terms: bool = True) -&gt; str\n</code></pre> <p>Return the variable in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>variable</code> <code>Variable</code> <p>variable to export</p> required <code>terms</code> <code>bool</code> <p>whether to export the terms</p> <code>True</code> <p>Returns:</p> Type Description <code>str</code> <p>variable in the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter","title":"PythonExporter","text":"<p>               Bases: <code>Exporter</code></p> <p>Export an engine and its components to Python.</p> related <ul> <li>fuzzylite.exporter.Exporter</li> </ul>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter.encapsulated","title":"encapsulated  <code>instance-attribute</code>","text":"<pre><code>encapsulated = encapsulated\n</code></pre>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter.formatted","title":"formatted  <code>instance-attribute</code>","text":"<pre><code>formatted = formatted\n</code></pre>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter.__init__","title":"__init__","text":"<pre><code>__init__(formatted: bool = True, encapsulated: bool = False) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>formatted</code> <code>bool</code> <p>try to format the code using <code>black</code> if it is installed</p> <code>True</code> <code>encapsulated</code> <code>bool</code> <p>whether to encapsulate the code (using classes for engines and methods for other components).</p> <code>False</code>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter.activation","title":"activation","text":"<pre><code>activation(activation: Activation | None) -&gt; str\n</code></pre> <p>Return the code to construct the activation method in Python.</p> <p>Parameters:</p> Name Type Description Default <code>activation</code> <code>Activation | None</code> <p>activation method to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the activation method in Python</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter.defuzzifier","title":"defuzzifier","text":"<pre><code>defuzzifier(defuzzifier: Defuzzifier | None) -&gt; str\n</code></pre> <p>Return the code to construct the defuzzifier in Python.</p> <p>Parameters:</p> Name Type Description Default <code>defuzzifier</code> <code>Defuzzifier | None</code> <p>defuzzifier to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the defuzzifier in Python</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter.encapsulate","title":"encapsulate","text":"<pre><code>encapsulate(instance: Any) -&gt; str\n</code></pre> <p>Encapsulate the instance in a new class if it is an engine, or in a create method otherwise.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>Any</code> <p>object to encapsulate</p> required <p>Returns:</p> Type Description <code>str</code> <p>if the instance is an engine, then the class constructing the engine during initialization;</p> <code>str</code> <p>otherwise a method constructing the object</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter.engine","title":"engine","text":"<pre><code>engine(engine: Engine) -&gt; str\n</code></pre> <p>Return the code to construct the engine in Python.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the engine in Python</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter.format","title":"format","text":"<pre><code>format(code: str, **kwargs: Any) -&gt; str\n</code></pre> <p>Format the code using the <code>black</code> formatter if it is installed, otherwise no effects on the code.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>code to format.</p> required <code>**kwargs</code> <code>Any</code> <p>keyword arguments to pass to <code>black.Mode</code></p> <code>{}</code> <p>Returns:     code formatted if <code>black</code> is installed, otherwise the code without format</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter.input_variable","title":"input_variable","text":"<pre><code>input_variable(input_variable: InputVariable) -&gt; str\n</code></pre> <p>Return the code to construct the input variable in Python.</p> <p>Parameters:</p> Name Type Description Default <code>input_variable</code> <code>InputVariable</code> <p>input variable to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the input variable in Python</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter.norm","title":"norm","text":"<pre><code>norm(norm: Norm | None) -&gt; str\n</code></pre> <p>Return the code to construct the norm in Python.</p> <p>Parameters:</p> Name Type Description Default <code>norm</code> <code>Norm | None</code> <p>norm to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the norm in Python</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter.output_variable","title":"output_variable","text":"<pre><code>output_variable(output_variable: OutputVariable) -&gt; str\n</code></pre> <p>Return the code to construct the output variable in Python.</p> <p>Parameters:</p> Name Type Description Default <code>output_variable</code> <code>OutputVariable</code> <p>output variable to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the output variable in Python</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter.rule","title":"rule","text":"<pre><code>rule(rule: Rule) -&gt; str\n</code></pre> <p>Return the code to construct the rule in Python.</p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>Rule</code> <p>rule to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the rule in Python</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter.rule_block","title":"rule_block","text":"<pre><code>rule_block(rule_block: RuleBlock) -&gt; str\n</code></pre> <p>Return the code to construct the rule block in Python.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block variable to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the rule block in Python</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter.term","title":"term","text":"<pre><code>term(term: Term) -&gt; str\n</code></pre> <p>Return the code to construct the term in Python.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in Python</p>"},{"location":"fuzzylite/__all__/exporter/#fuzzylite.exporter.PythonExporter.to_string","title":"to_string","text":"<pre><code>to_string(instance: Any) -&gt; str\n</code></pre> <p>Return the code to construct the instance in Python.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>Any</code> <p>fuzzylite object</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the instance in Python</p>"},{"location":"fuzzylite/__all__/factory/","title":"Factory","text":""},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ActivationFactory","title":"ActivationFactory","text":"<p>               Bases: <code>ConstructionFactory[Activation]</code></p> <p>Construction factory of activation methods for rule blocks.</p> related <ul> <li>fuzzylite.factory.ConstructionFactory</li> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.rule.RuleBlock</li> <li>fuzzylite.factory.FactoryManager</li> </ul>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ActivationFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ActivationFactory.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.CloningFactory","title":"CloningFactory","text":"<p>               Bases: <code>Generic[T]</code></p> <p>Base class for a factory whose objects are created by a deep copy of registered instances.</p> related <ul> <li>fuzzylite.factory.FunctionFactory</li> <li>fuzzylite.factory.FactoryManager</li> <li>fuzzylite.factory.ConstructionFactory</li> </ul>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.CloningFactory-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.CloningFactory.objects","title":"objects  <code>instance-attribute</code>","text":"<pre><code>objects = objects or {}\n</code></pre>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.CloningFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.CloningFactory.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str) -&gt; T\n</code></pre> <p>Return the object by the key.</p> <p>Returns:</p> Type Description <code>T</code> <p>object by the key.</p> <p>Raises: KeyError: when the key is not in the factory</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.CloningFactory.__init__","title":"__init__","text":"<pre><code>__init__(objects: dict[str, T] | None = None) -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.CloningFactory.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str]\n</code></pre> <p>Return the iterator of the factory.</p> <p>Returns:</p> Type Description <code>Iterator[str]</code> <p>iterator of the factory.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.CloningFactory.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Return the number of objects in the factory.</p> <p>Returns:</p> Type Description <code>int</code> <p>number of objects in the factory.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.CloningFactory.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the Python code to construct the factory.</p> <p>Returns:</p> Type Description <code>str</code> <p>Python code to construct the factory.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.CloningFactory.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(key: str, value: T) -&gt; None\n</code></pre> <p>Set the value for the key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>name of the object</p> required <code>value</code> <code>T</code> <p>instance to be deep copied</p> required"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.CloningFactory.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the class name of the factory.</p> <p>Returns:</p> Type Description <code>str</code> <p>class name of the factory.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.CloningFactory.copy","title":"copy","text":"<pre><code>copy(key: str) -&gt; T\n</code></pre> <p>Create a deep copy of the object registered by the key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>name of the object</p> required <p>Returns:</p> Type Description <code>T</code> <p>deep copy of the object registered by the key</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when the key is not registered.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ConstructionFactory","title":"ConstructionFactory","text":"<p>               Bases: <code>Generic[T]</code></p> <p>Base class for a factory whose objects are created from a registered constructor.</p> related <ul> <li>fuzzylite.factory.ActivationFactory</li> <li>fuzzylite.factory.DefuzzifierFactory</li> <li>fuzzylite.factory.HedgeFactory</li> <li>fuzzylite.factory.SNormFactory</li> <li>fuzzylite.factory.TermFactory</li> <li>fuzzylite.factory.TNormFactory</li> <li>fuzzylite.factory.FactoryManager</li> <li>fuzzylite.factory.CloningFactory</li> </ul>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ConstructionFactory-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ConstructionFactory.constructors","title":"constructors  <code>instance-attribute</code>","text":"<pre><code>constructors = constructors or {}\n</code></pre>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ConstructionFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ConstructionFactory.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str) -&gt; type[T]\n</code></pre> <p>Return the type by the key.</p> <p>Returns:</p> Type Description <code>type[T]</code> <p>type by the key.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>when the key is not in the constructors</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ConstructionFactory.__init__","title":"__init__","text":"<pre><code>__init__(constructors: dict[str, type[T]] | None = None) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>constructors</code> <code>dict[str, type[T]] | None</code> <p>dictionary of constructors</p> <code>None</code>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ConstructionFactory.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str]\n</code></pre> <p>Return the iterator of the factory.</p> <p>Returns:</p> Type Description <code>Iterator[str]</code> <p>iterator of the factory.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ConstructionFactory.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Return the number of constructors in the factory.</p> <p>Returns:</p> Type Description <code>int</code> <p>number of constructors in the factory.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ConstructionFactory.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the Python code to construct the factory.</p> <p>Returns:</p> Type Description <code>str</code> <p>Python code to construct the factory.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ConstructionFactory.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(key: str, value: type[T]) -&gt; None\n</code></pre> <p>Set the value for the key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>name of the constructor</p> required <code>value</code> <code>type[T]</code> <p>type of the constructor</p> required"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ConstructionFactory.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the class name of the factory.</p> <p>Returns:</p> Type Description <code>str</code> <p>class name of the factory.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ConstructionFactory.construct","title":"construct","text":"<pre><code>construct(key: str, **kwargs: Any) -&gt; T\n</code></pre> <p>Create an object from the constructor registered by the key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>name of the constructor</p> required <code>**kwargs</code> <code>Any</code> <p>parameters to pass to the constructor</p> <code>{}</code> <p>Returns:</p> Type Description <code>T</code> <p>object created from the constructor registered by the key</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when the key is not registered</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.ConstructionFactory.import_from","title":"import_from","text":"<pre><code>import_from(module: ModuleType, cls: type[T]) -&gt; list[type[T]]\n</code></pre> <p>Import constructors from the module.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>ModuleType</code> <p>module to import constructors</p> required <code>cls</code> <code>type[T]</code> <p>class of constructors to import</p> required <p>Returns:</p> Type Description <code>list[type[T]]</code> <p>list of constructors imported from the module.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.DefuzzifierFactory","title":"DefuzzifierFactory","text":"<p>               Bases: <code>ConstructionFactory[Defuzzifier]</code></p> <p>Factory of defuzzifiers.</p> related <ul> <li>fuzzylite.factory.ConstructionFactory</li> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.factory.FactoryManager</li> </ul>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.DefuzzifierFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.DefuzzifierFactory.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FactoryManager","title":"FactoryManager","text":"<p>Manager that groups different factories to facilitate access across the library.</p> related <ul> <li>fuzzylite.factory.ConstructionFactory</li> <li>fuzzylite.factory.CloningFactory</li> <li>fuzzylite.factory.TermFactory</li> <li>fuzzylite.factory.TNormFactory</li> <li>fuzzylite.factory.SNormFactory</li> <li>fuzzylite.factory.HedgeFactory</li> <li>fuzzylite.factory.ActivationFactory</li> <li>fuzzylite.factory.DefuzzifierFactory</li> <li>fuzzylite.factory.FunctionFactory</li> </ul>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FactoryManager-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FactoryManager.activation","title":"activation  <code>instance-attribute</code>","text":"<pre><code>activation = activation or ActivationFactory()\n</code></pre>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FactoryManager.defuzzifier","title":"defuzzifier  <code>instance-attribute</code>","text":"<pre><code>defuzzifier = defuzzifier or DefuzzifierFactory()\n</code></pre>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FactoryManager.function","title":"function  <code>instance-attribute</code>","text":"<pre><code>function = function or FunctionFactory()\n</code></pre>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FactoryManager.hedge","title":"hedge  <code>instance-attribute</code>","text":"<pre><code>hedge = hedge or HedgeFactory()\n</code></pre>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FactoryManager.snorm","title":"snorm  <code>instance-attribute</code>","text":"<pre><code>snorm = snorm or SNormFactory()\n</code></pre>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FactoryManager.term","title":"term  <code>instance-attribute</code>","text":"<pre><code>term = term or TermFactory()\n</code></pre>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FactoryManager.tnorm","title":"tnorm  <code>instance-attribute</code>","text":"<pre><code>tnorm = tnorm or TNormFactory()\n</code></pre>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FactoryManager-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FactoryManager.__init__","title":"__init__","text":"<pre><code>__init__(\n    tnorm: TNormFactory | None = None,\n    snorm: SNormFactory | None = None,\n    activation: ActivationFactory | None = None,\n    defuzzifier: DefuzzifierFactory | None = None,\n    term: TermFactory | None = None,\n    hedge: HedgeFactory | None = None,\n    function: FunctionFactory | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>tnorm</code> <code>TNormFactory | None</code> <p>factory of TNorms</p> <code>None</code> <code>snorm</code> <code>SNormFactory | None</code> <p>factory of SNorms</p> <code>None</code> <code>activation</code> <code>ActivationFactory | None</code> <p>factory of activation methods</p> <code>None</code> <code>defuzzifier</code> <code>DefuzzifierFactory | None</code> <p>factory of defuzzifiers</p> <code>None</code> <code>term</code> <code>TermFactory | None</code> <p>factory of terms</p> <code>None</code> <code>hedge</code> <code>HedgeFactory | None</code> <p>factory of hedges</p> <code>None</code> <code>function</code> <code>FunctionFactory | None</code> <p>factory of functions</p> <code>None</code>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FunctionFactory","title":"FunctionFactory","text":"<p>               Bases: <code>CloningFactory[Element]</code></p> <p>Factory of operators and functions used by the Function term.</p> related <ul> <li>fuzzylite.factory.CloningFactory</li> <li>fuzzylite.term.Function.Element</li> <li>fuzzylite.term.Function</li> <li>fuzzylite.factory.FactoryManager</li> </ul>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FunctionFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FunctionFactory.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FunctionFactory._create_functions","title":"_create_functions","text":"<pre><code>_create_functions() -&gt; list[Element]\n</code></pre> <p>Return the list of functions.</p> <p>Returns:</p> Type Description <code>list[Element]</code> <p>list of functions</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FunctionFactory._create_operators","title":"_create_operators","text":"<pre><code>_create_operators() -&gt; list[Element]\n</code></pre> <p>Return the list of function operators.</p> <p>Returns:</p> Type Description <code>list[Element]</code> <p>list of function operators</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FunctionFactory._precedence","title":"_precedence","text":"<pre><code>_precedence(importance: int) -&gt; int\n</code></pre> <p>Inverts the priority of precedence of operations, mapping 0-10 in ascending order to 100-0 in descending order.</p> <p>Parameters:</p> Name Type Description Default <code>importance</code> <code>int</code> <p>value between 0 and 10, where 0 is the most important</p> required <p>Returns:</p> Type Description <code>int</code> <p>precedence between 100 and 0, where 100 is the most important</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FunctionFactory.functions","title":"functions","text":"<pre><code>functions() -&gt; dict[str, Element]\n</code></pre> <p>Return a dictionary of the functions available.</p> <p>Returns:</p> Type Description <code>dict[str, Element]</code> <p>dictionary of the functions available.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.FunctionFactory.operators","title":"operators","text":"<pre><code>operators() -&gt; dict[str, Element]\n</code></pre> <p>Return a dictionary of the operators available.</p> <p>Returns:</p> Type Description <code>dict[str, Element]</code> <p>dictionary of the operators available.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.HedgeFactory","title":"HedgeFactory","text":"<p>               Bases: <code>ConstructionFactory[Hedge]</code></p> <p>Factory of hedges.</p> related <ul> <li>fuzzylite.factory.ConstructionFactory</li> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.factory.FactoryManager</li> </ul>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.HedgeFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.HedgeFactory.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.SNormFactory","title":"SNormFactory","text":"<p>               Bases: <code>ConstructionFactory[SNorm]</code></p> <p>Factory of SNorms.</p> related <ul> <li>fuzzylite.factory.ConstructionFactory</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.factory.FactoryManager</li> </ul>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.SNormFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.SNormFactory.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.TNormFactory","title":"TNormFactory","text":"<p>               Bases: <code>ConstructionFactory[TNorm]</code></p> <p>Factory of TNorms.</p> related <ul> <li>fuzzylite.factory.ConstructionFactory</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.factory.FactoryManager</li> </ul>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.TNormFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.TNormFactory.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.TermFactory","title":"TermFactory","text":"<p>               Bases: <code>ConstructionFactory[Term]</code></p> <p>Factory of terms.</p> related <ul> <li>fuzzylite.factory.ConstructionFactory</li> <li>fuzzylite.term.Term</li> <li>fuzzylite.factory.FactoryManager</li> </ul>"},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.TermFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/factory/#fuzzylite.factory.TermFactory.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/__all__/hedge/","title":"Hedge","text":""},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Any","title":"Any","text":"<p>               Bases: <code>Hedge</code></p> <p>Special hedge that always returns <code>1.0</code>.</p> <p>The antecedent of a rule considers <code>Any</code> to be a syntactically special hedge because it is not followed by a term (e.g., <code>if Variable is any then...</code> vs <code>if Variable is very term then...</code>)</p> <p>The hedge is useful for better documenting rules.</p> related <ul> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Any-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Any.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Return scalar of same shape of <code>x</code> filled with <code>1.0</code>.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>irrelevant except for its shape</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x)=1.0\\)</p>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Extremely","title":"Extremely","text":"<p>               Bases: <code>Hedge</code></p> <p>Hedge that modifies the membership function value of a term as follows.</p> Equation <p>\\(h(x) = \\begin{cases}     2x^2 &amp; \\mbox{if } x \\le 0.5 \\cr     1-2(1-x)^2 &amp; \\mbox{otherwise} \\cr     \\end{cases}\\)</p> related <ul> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Extremely-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Extremely.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute \\(\\text{Extremely}(x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x) = \\begin{cases} 2x^2 &amp; \\mbox{if } x \\le 0.5 \\cr 1-2(1-x)^2 &amp; \\mbox{otherwise} \\cr \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Hedge","title":"Hedge","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for hedges.</p> <p>Hedges are used in the antecedent and consequent of a rule to modify the membership function of the term it precedes.</p> <p>The hedges in the library can be ordered based on the difference between the membership function \\(\\mu(x)\\) and its hedge \\(h(\\mu(x))\\) as follows (from most similar to least): Seldom   \\(&lt;\\) Somewhat   \\(&lt;\\) Very  \\(&lt;\\) Extremely   \\(&lt;\\) Not   \\(&lt;\\) Any</p> <code>term</code> Seldom Somewhat Very Extremely Not Any fuzzylite.term.Rectangle fuzzylite.hedge.Seldom fuzzylite.term.Rectangle fuzzylite.hedge.Somewhat fuzzylite.term.Rectangle fuzzylite.hedge.Very fuzzylite.term.Rectangle fuzzylite.hedge.Extremely fuzzylite.term.Rectangle fuzzylite.hedge.Not fuzzylite.term.Rectangle fuzzylite.hedge.Any fuzzylite.term.Rectangle fuzzylite.term.SemiEllipse fuzzylite.hedge.Seldom fuzzylite.term.SemiEllipse fuzzylite.hedge.Somewhat fuzzylite.term.SemiEllipse fuzzylite.hedge.Very fuzzylite.term.SemiEllipse fuzzylite.hedge.Extremely fuzzylite.term.SemiEllipse fuzzylite.hedge.Not fuzzylite.term.SemiEllipse fuzzylite.hedge.Any fuzzylite.term.SemiEllipse fuzzylite.term.Triangle fuzzylite.hedge.Seldom fuzzylite.term.Triangle fuzzylite.hedge.Somewhat fuzzylite.term.Triangle fuzzylite.hedge.Very fuzzylite.term.Triangle fuzzylite.hedge.Extremely fuzzylite.term.Triangle fuzzylite.hedge.Not fuzzylite.term.Triangle fuzzylite.hedge.Any fuzzylite.term.Triangle fuzzylite.term.Trapezoid fuzzylite.hedge.Seldom fuzzylite.term.Trapezoid fuzzylite.hedge.Somewhat fuzzylite.term.Trapezoid fuzzylite.hedge.Very fuzzylite.term.Trapezoid fuzzylite.hedge.Extremely fuzzylite.term.Trapezoid fuzzylite.hedge.Not fuzzylite.term.Trapezoid fuzzylite.hedge.Any fuzzylite.term.Trapezoid fuzzylite.term.Discrete fuzzylite.hedge.Seldom fuzzylite.term.Discrete fuzzylite.hedge.Somewhat fuzzylite.term.Discrete fuzzylite.hedge.Very fuzzylite.term.Discrete fuzzylite.hedge.Extremely fuzzylite.term.Discrete fuzzylite.hedge.Not fuzzylite.term.Discrete fuzzylite.hedge.Any fuzzylite.term.Discrete fuzzylite.term.Bell fuzzylite.hedge.Seldom fuzzylite.term.Bell fuzzylite.hedge.Somewhat fuzzylite.term.Bell fuzzylite.hedge.Very fuzzylite.term.Bell fuzzylite.hedge.Extremely fuzzylite.term.Bell fuzzylite.hedge.Not fuzzylite.term.Bell fuzzylite.hedge.Any fuzzylite.term.Bell fuzzylite.term.Cosine fuzzylite.hedge.Seldom fuzzylite.term.Cosine fuzzylite.hedge.Somewhat fuzzylite.term.Cosine fuzzylite.hedge.Very fuzzylite.term.Cosine fuzzylite.hedge.Extremely fuzzylite.term.Cosine fuzzylite.hedge.Not fuzzylite.term.Cosine fuzzylite.hedge.Any fuzzylite.term.Cosine fuzzylite.term.Gaussian fuzzylite.hedge.Seldom fuzzylite.term.Gaussian fuzzylite.hedge.Somewhat fuzzylite.term.Gaussian fuzzylite.hedge.Very fuzzylite.term.Gaussian fuzzylite.hedge.Extremely fuzzylite.term.Gaussian fuzzylite.hedge.Not fuzzylite.term.Gaussian fuzzylite.hedge.Any fuzzylite.term.Gaussian fuzzylite.term.GaussianProduct fuzzylite.hedge.Seldom fuzzylite.term.GaussianProduct fuzzylite.hedge.Somewhat fuzzylite.term.GaussianProduct fuzzylite.hedge.Very fuzzylite.term.GaussianProduct fuzzylite.hedge.Extremely fuzzylite.term.GaussianProduct fuzzylite.hedge.Not fuzzylite.term.GaussianProduct fuzzylite.hedge.Any fuzzylite.term.GaussianProduct fuzzylite.term.PiShape fuzzylite.hedge.Seldom fuzzylite.term.PiShape fuzzylite.hedge.Somewhat fuzzylite.term.PiShape fuzzylite.hedge.Very fuzzylite.term.PiShape fuzzylite.hedge.Extremely fuzzylite.term.PiShape fuzzylite.hedge.Not fuzzylite.term.PiShape fuzzylite.hedge.Any fuzzylite.term.PiShape fuzzylite.term.SigmoidDifference fuzzylite.hedge.Seldom fuzzylite.term.SigmoidDifference fuzzylite.hedge.Somewhat fuzzylite.term.SigmoidDifference fuzzylite.hedge.Very fuzzylite.term.SigmoidDifference fuzzylite.hedge.Extremely fuzzylite.term.SigmoidDifference fuzzylite.hedge.Not fuzzylite.term.SigmoidDifference fuzzylite.hedge.Any fuzzylite.term.SigmoidDifference fuzzylite.term.SigmoidProduct fuzzylite.hedge.Seldom fuzzylite.term.SigmoidProduct fuzzylite.hedge.Somewhat fuzzylite.term.SigmoidProduct fuzzylite.hedge.Very fuzzylite.term.SigmoidProduct fuzzylite.hedge.Extremely fuzzylite.term.SigmoidProduct fuzzylite.hedge.Not fuzzylite.term.SigmoidProduct fuzzylite.hedge.Any fuzzylite.term.SigmoidProduct fuzzylite.term.Spike fuzzylite.hedge.Seldom fuzzylite.term.Spike fuzzylite.hedge.Somewhat fuzzylite.term.Spike fuzzylite.hedge.Very fuzzylite.term.Spike fuzzylite.hedge.Extremely fuzzylite.term.Spike fuzzylite.hedge.Not fuzzylite.term.Spike fuzzylite.hedge.Any fuzzylite.term.Spike fuzzylite.term.Arc fuzzylite.hedge.Seldom fuzzylite.term.Arc fuzzylite.hedge.Somewhat fuzzylite.term.Arc fuzzylite.hedge.Very fuzzylite.term.Arc fuzzylite.hedge.Extremely fuzzylite.term.Arc fuzzylite.hedge.Not fuzzylite.term.Arc fuzzylite.hedge.Any fuzzylite.term.Arc fuzzylite.term.Binary fuzzylite.hedge.Seldom fuzzylite.term.Binary fuzzylite.hedge.Somewhat fuzzylite.term.Binary fuzzylite.hedge.Very fuzzylite.term.Binary fuzzylite.hedge.Extremely fuzzylite.term.Binary fuzzylite.hedge.Not fuzzylite.term.Binary fuzzylite.hedge.Any fuzzylite.term.Binary fuzzylite.term.Concave fuzzylite.hedge.Seldom fuzzylite.term.Concave fuzzylite.hedge.Somewhat fuzzylite.term.Concave fuzzylite.hedge.Very fuzzylite.term.Concave fuzzylite.hedge.Extremely fuzzylite.term.Concave fuzzylite.hedge.Not fuzzylite.term.Concave fuzzylite.hedge.Any fuzzylite.term.Concave fuzzylite.term.Ramp fuzzylite.hedge.Seldom fuzzylite.term.Ramp fuzzylite.hedge.Somewhat fuzzylite.term.Ramp fuzzylite.hedge.Very fuzzylite.term.Ramp fuzzylite.hedge.Extremely fuzzylite.term.Ramp fuzzylite.hedge.Not fuzzylite.term.Ramp fuzzylite.hedge.Any fuzzylite.term.Ramp fuzzylite.term.Sigmoid fuzzylite.hedge.Seldom fuzzylite.term.Sigmoid fuzzylite.hedge.Somewhat fuzzylite.term.Sigmoid fuzzylite.hedge.Very fuzzylite.term.Sigmoid fuzzylite.hedge.Extremely fuzzylite.term.Sigmoid fuzzylite.hedge.Not fuzzylite.term.Sigmoid fuzzylite.hedge.Any fuzzylite.term.Sigmoid fuzzylite.term.SShape - fuzzylite.term.ZShape fuzzylite.hedge.Seldom fuzzylite.term.SShape - fuzzylite.hedge.Seldom fuzzylite.term.ZShape][] fuzzylite.hedge.Somewhat fuzzylite.term.SShape - fuzzylite.hedge.Somewhat fuzzylite.term.ZShape fuzzylite.hedge.Very fuzzylite.term.SShape - fuzzylite.hedge.Very fuzzylite.term.ZShape fuzzylite.hedge.Extremely fuzzylite.term.SShape - fuzzylite.hedge.Extremely fuzzylite.term.ZShape fuzzylite.hedge.Not fuzzylite.term.SShape - fuzzylite.hedge.Not fuzzylite.term.ZShape fuzzylite.hedge.Any fuzzylite.term.SShape - fuzzylite.hedge.Any fuzzylite.term.ZShape fuzzylite.term.SShape fuzzylite.hedge.Seldom fuzzylite.term.SShape fuzzylite.hedge.Somewhat fuzzylite.term.SShape fuzzylite.hedge.Very fuzzylite.term.SShape fuzzylite.hedge.Extremely fuzzylite.term.SShape fuzzylite.hedge.Not fuzzylite.term.SShape fuzzylite.hedge.Any fuzzylite.term.SShape fuzzylite.term.ZShape fuzzylite.hedge.Seldom fuzzylite.term.ZShape fuzzylite.hedge.Somewhat fuzzylite.term.ZShape fuzzylite.hedge.Very fuzzylite.term.ZShape fuzzylite.hedge.Extremely fuzzylite.term.ZShape fuzzylite.hedge.Not fuzzylite.term.ZShape fuzzylite.hedge.Any fuzzylite.term.ZShape related <ul> <li>fuzzylite.hedge.Not</li> <li>fuzzylite.hedge.Seldom</li> <li>fuzzylite.hedge.Somewhat</li> <li>fuzzylite.hedge.Very</li> <li>fuzzylite.hedge.Extremely</li> <li>fuzzylite.hedge.Any</li> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Consequent</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Hedge-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Hedge.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Return the name of the hedge.</p> <p>Returns:</p> Type Description <code>str</code> <p>name of the hedge.</p>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Hedge-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Hedge.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the Python code to construct the hedge.</p> <p>Returns:</p> Type Description <code>str</code> <p>Python code to construct the hedge.</p>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Hedge.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the name of the hedge.</p> <p>Returns:</p> Type Description <code>str</code> <p>name of the hedge.</p>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Hedge.hedge","title":"hedge  <code>abstractmethod</code>","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Implement the hedge for the membership function value \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>hedge of \\(x\\).</p>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.HedgeFunction","title":"HedgeFunction","text":"<p>               Bases: <code>Hedge</code></p> <p>Hedge that modifies the membership function value of a term according to the term Function.</p> <p>This hedge is not registered with the HedgeFactory because the Function cannot be easily configured.</p> related <ul> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.hedge.HedgeLambda</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.HedgeFunction-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.HedgeFunction.function","title":"function  <code>instance-attribute</code>","text":"<pre><code>function = function\n</code></pre>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.HedgeFunction.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Get the name of the hedge.</p> <p>Returns:</p> Type Description <code>str</code> <p>name of the hedge</p>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.HedgeFunction-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.HedgeFunction.__init__","title":"__init__","text":"<pre><code>__init__(function: Function) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Function</code> <p>function \\(f\\).</p> required"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.HedgeFunction.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute \\(f(x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x) = f(x)\\)</p>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.HedgeLambda","title":"HedgeLambda","text":"<p>               Bases: <code>Hedge</code></p> <p>Hedge that modifies the membership function value of a term according to a \\(\\lambda\\) function.</p> <p>This hedge is not registered with the HedgeFactory because the \\(\\lambda\\) function cannot be easily configured.</p> related <ul> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.hedge.HedgeFunction</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.HedgeLambda-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.HedgeLambda._name","title":"_name  <code>instance-attribute</code>","text":"<pre><code>_name = name\n</code></pre>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.HedgeLambda.function","title":"function  <code>instance-attribute</code>","text":"<pre><code>function = function\n</code></pre>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.HedgeLambda.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Get the name of the hedge.</p> <p>Returns:</p> Type Description <code>str</code> <p>name of the hedge</p>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.HedgeLambda-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.HedgeLambda.__init__","title":"__init__","text":"<pre><code>__init__(name: str, function: Callable[[Scalar], Scalar]) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the hedge</p> required <code>function</code> <code>Callable[[Scalar], Scalar]</code> <p>\\(\\lambda\\) function.</p> required"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.HedgeLambda.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute \\(\\lambda(x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x) = \\lambda(x)\\)</p>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Not","title":"Not","text":"<p>               Bases: <code>Hedge</code></p> <p>Hedge that modifies the membership function value of a term by.</p> Equation <p>\\(h(x) = 1-x\\)</p> related <ul> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Not-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Not.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute \\(\\text{Not}(x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x) = 1-x\\)</p>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Seldom","title":"Seldom","text":"<p>               Bases: <code>Hedge</code></p> <p>Hedge that modifies the membership function value of a term as follows.</p> Equation <p>\\(h(x) = \\begin{cases}     \\sqrt{\\dfrac{x}{2}} &amp; \\mbox{if } x \\le 0.5 \\cr     1-\\sqrt{\\dfrac{1-x}{2}} &amp; \\mbox{otherwise} \\end{cases}\\)</p> related <ul> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Seldom-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Seldom.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute \\(\\text{Seldom(x)}\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x) = \\begin{cases} \\sqrt{\\dfrac{x}{2}} &amp; \\mbox{if \\(x \\le 0.5\\)} \\cr 1-\\sqrt{\\dfrac{(1-x)}{2}} &amp; \\mbox{otherwise}\\cr \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Somewhat","title":"Somewhat","text":"<p>               Bases: <code>Hedge</code></p> <p>Hedge that modifies the membership function value of a term by.</p> Equation <p>\\(h(x) = \\sqrt{x}\\)</p> related <ul> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Somewhat-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Somewhat.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute \\(\\text{Somewhat}(x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x) = \\sqrt{x}\\)</p>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Very","title":"Very","text":"<p>               Bases: <code>Hedge</code></p> <p>Hedge that modifies the membership function value of a term by.</p> Equation <p>\\(h(x) = x^2\\)</p> related <ul> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Very-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/hedge/#fuzzylite.hedge.Very.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute \\(\\text{Very}(x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x) = x^2\\)</p>"},{"location":"fuzzylite/__all__/importer/","title":"Importer","text":""},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter","title":"FllImporter","text":"<p>               Bases: <code>Importer</code></p> <p>Import an engine and its components described using the FuzzyLite Language.</p> related <ul> <li>fuzzylite.importer.Importer</li> <li>fuzzylite.exporter.FllExporter</li> <li>FuzzyLite Language (FLL)</li> </ul>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.separator","title":"separator  <code>instance-attribute</code>","text":"<pre><code>separator = separator\n</code></pre>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.__init__","title":"__init__","text":"<pre><code>__init__(separator: str = '\\n') -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>separator</code> <code>str</code> <p>separation between components of the FuzzyLite Language.</p> <code>'\\n'</code>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter._process","title":"_process","text":"<pre><code>_process(component: str, block: list[str], engine: Engine) -&gt; None\n</code></pre> <p>Process the main components of the FuzzyLite Language, namely Engine, InputVariable, OutputVariable and RuleBlock.</p> <p>Parameters:</p> Name Type Description Default <code>component</code> <code>str</code> <p>one of <code>Engine</code>, <code>InputVariable</code>, <code>OutputVariable</code> and <code>RuleBlock</code></p> required <code>block</code> <code>list[str]</code> <p>list of lines that make up the component</p> required <code>engine</code> <code>Engine</code> <p>engine to add the component to</p> required"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.activation","title":"activation","text":"<pre><code>activation(fll: str) -&gt; Activation | None\n</code></pre> <p>Return the activation method described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>activation method described using the FuzzyLite Language</p> required <p>Returns:</p> Type Description <code>Activation | None</code> <p>activation method described using the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.boolean","title":"boolean","text":"<pre><code>boolean(fll: str) -&gt; bool\n</code></pre> <p>Returns a boolean value described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p><code>true</code> or <code>false</code></p> required <p>Returns:</p> Type Description <code>bool</code> <p>boolean value described using the FuzzyLite Language.</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.component","title":"component","text":"<pre><code>component(cls: type[Activation], fll: str) -&gt; Activation | None\n</code></pre><pre><code>component(cls: type[Defuzzifier], fll: str) -&gt; Defuzzifier | None\n</code></pre><pre><code>component(cls: type[SNorm], fll: str) -&gt; SNorm | None\n</code></pre><pre><code>component(cls: type[TNorm], fll: str) -&gt; TNorm | None\n</code></pre> <pre><code>component(\n    cls: type[Activation | Defuzzifier | TNorm | SNorm], fll: str\n) -&gt; Activation | Defuzzifier | TNorm | SNorm | None\n</code></pre> <p>Return the component described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>cls</code> <code>type[Activation | Defuzzifier | TNorm | SNorm]</code> <p>class of the component to import</p> required <code>fll</code> <code>str</code> <p>component described using the FuzzyLite Language</p> required <p>Returns:</p> Type Description <code>Activation | Defuzzifier | TNorm | SNorm | None</code> <p>component described using the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.defuzzifier","title":"defuzzifier","text":"<pre><code>defuzzifier(fll: str) -&gt; Defuzzifier | None\n</code></pre> <p>Return the defuzzifier described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>defuzzifier described using the FuzzyLite Language</p> required <p>Returns:</p> Type Description <code>Defuzzifier | None</code> <p>defuzzifier described using the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.engine","title":"engine","text":"<pre><code>engine(fll: str) -&gt; Engine\n</code></pre> <p>Return the engine describe using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>engine described using the FuzzyLite Language</p> required <p>Returns:</p> Type Description <code>Engine</code> <p>engine described using the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.extract_key_value","title":"extract_key_value","text":"<pre><code>extract_key_value(fll: str, component: str | None = None) -&gt; tuple[str, str]\n</code></pre> <p>Return key-value pair described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>key-value pair in the form <code>key: value</code></p> required <code>component</code> <code>str | None</code> <p>name of the key to extract</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[str, str]</code> <p>tuple of <code>(key, value)</code></p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.extract_value","title":"extract_value","text":"<pre><code>extract_value(fll: str, component: str | None = None) -&gt; str\n</code></pre> <p>Return value from the <code>key: value</code> pair described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>key-value pair in the form <code>key: value</code></p> required <code>component</code> <code>str | None</code> <p>name of the key to extract</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>value from the <code>key: value</code> pair described using the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.from_string","title":"from_string","text":"<pre><code>from_string(text: str) -&gt; Engine\n</code></pre> <p>Return the engine describe using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>engine described using the FuzzyLite Language</p> required <p>Returns:</p> Type Description <code>Engine</code> <p>engine described using the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.input_variable","title":"input_variable","text":"<pre><code>input_variable(fll: str, engine: Engine | None = None) -&gt; InputVariable\n</code></pre> <p>Return the input variable described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>input variable described using the FuzzyLite Language</p> required <code>engine</code> <code>Engine | None</code> <p>engine to update the reference of the terms in the variable</p> <code>None</code> <p>Returns:</p> Type Description <code>InputVariable</code> <p>input variable described using the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.output_variable","title":"output_variable","text":"<pre><code>output_variable(fll: str, engine: Engine | None = None) -&gt; OutputVariable\n</code></pre> <p>Return the output variable described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>output variable described using the FuzzyLite Language</p> required <code>engine</code> <code>Engine | None</code> <p>engine to update the reference of the terms in the variable</p> <code>None</code> <p>Returns:</p> Type Description <code>OutputVariable</code> <p>output variable described using the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.range","title":"range","text":"<pre><code>range(fll: str) -&gt; tuple[float, float]\n</code></pre> <p>Returns the values of a range described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>range of values described using the FuzzyLite Language (eg, <code>0.0 1.0</code>)</p> required <p>Returns:</p> Type Description <code>tuple[float, float]</code> <p>range of values described using the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.rule","title":"rule","text":"<pre><code>rule(fll: str, engine: Engine | None = None) -&gt; Rule | None\n</code></pre> <p>Return the rule described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>rule described using the FuzzyLite Language</p> required <code>engine</code> <code>Engine | None</code> <p>engine to load the rule</p> <code>None</code> <p>Returns:</p> Type Description <code>Rule | None</code> <p>rule described using the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.rule_block","title":"rule_block","text":"<pre><code>rule_block(fll: str, engine: Engine | None = None) -&gt; RuleBlock\n</code></pre> <p>Return the rule block described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>rule block described using the FuzzyLite Language</p> required <code>engine</code> <code>Engine | None</code> <p>engine to use for loading the rules</p> <code>None</code> <p>Returns:</p> Type Description <code>RuleBlock</code> <p>rule block described using the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.snorm","title":"snorm","text":"<pre><code>snorm(fll: str) -&gt; SNorm | None\n</code></pre> <p>Return the SNorm described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>SNorm described using the FuzzyLite Language</p> required <p>Returns:</p> Type Description <code>SNorm | None</code> <p>SNorm described using the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.term","title":"term","text":"<pre><code>term(fll: str, engine: Engine | None = None) -&gt; Term\n</code></pre> <p>Return the term described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>term described using the FuzzyLite Language</p> required <code>engine</code> <code>Engine | None</code> <p>engine to update the reference of the term</p> <code>None</code> <p>Returns:</p> Type Description <code>Term</code> <p>term described using the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.FllImporter.tnorm","title":"tnorm","text":"<pre><code>tnorm(fll: str) -&gt; TNorm | None\n</code></pre> <p>Return the TNorm described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>TNorm described using the FuzzyLite Language</p> required <p>Returns:</p> Type Description <code>TNorm | None</code> <p>TNorm described using the FuzzyLite Language</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.Importer","title":"Importer","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for importers to configure an engine and its components from different text formats.</p> related <ul> <li>fuzzylite.exporter.Exporter</li> </ul>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.Importer-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.Importer.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the Python code to construct the importer.</p> <p>Returns:</p> Type Description <code>str</code> <p>Python code to construct the importer.</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.Importer.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the class name of the importer.</p> <p>Returns:</p> Type Description <code>str</code> <p>class name of the importer.</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.Importer.from_file","title":"from_file","text":"<pre><code>from_file(path: Path | str) -&gt; Engine\n</code></pre> <p>Read from the file the text representation of an engine.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path | str</code> <p>file path to import engine</p> required <p>Returns:</p> Type Description <code>Engine</code> <p>engine represented in the file</p>"},{"location":"fuzzylite/__all__/importer/#fuzzylite.importer.Importer.from_string","title":"from_string  <code>abstractmethod</code>","text":"<pre><code>from_string(text: str) -&gt; Engine\n</code></pre> <p>Return the engine described in the text representation.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>representation of the engine to import</p> required <p>Returns:</p> Type Description <code>Engine</code> <p>engine described in the text representation</p>"},{"location":"fuzzylite/__all__/library/","title":"Library","text":""},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Information","title":"Information  <code>dataclass</code>","text":"<p>Information about the library.</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Information-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Information.author","title":"author  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>author: Final[str] = 'Juan Rada-Vilela, PhD'\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Information.author_email","title":"author_email  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>author_email: Final[str] = 'jcrada@fuzzylite.com'\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Information.company","title":"company  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>company: Final[str] = 'FuzzyLite'\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Information.copyright","title":"copyright  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>copyright: Final[str] = 'Copyright (C) 2010-2024 FuzzyLite by Juan Rada-Vilela. All rights reserved.'\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Information.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: Final[str] = 'a fuzzy logic control library in Python'\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Information.license","title":"license  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>license: Final[str] = 'FuzzyLite License'\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Information.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: Final[str] = 'fuzzylite'\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Information.version","title":"version  <code>property</code>","text":"<pre><code>version: str\n</code></pre> <p>Automatic version of the library handled by poetry using <code>[tool.poetry_bumpversion.file.\"fuzzylite/library.py\"]</code>.</p> <p>Returns:</p> Type Description <code>str</code> <p>version of the library</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Information.website","title":"website  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>website: Final[str] = 'https://fuzzylite.com/'\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Information-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Information.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: Final[str] = \"fuzzylite\",\n    description: Final[str] = \"a fuzzy logic control library in Python\",\n    license: Final[str] = \"FuzzyLite License\",\n    author: Final[str] = \"Juan Rada-Vilela, PhD\",\n    author_email: Final[str] = \"jcrada@fuzzylite.com\",\n    company: Final[str] = \"FuzzyLite\",\n    website: Final[str] = \"https://fuzzylite.com/\",\n    copyright: Final[str] = \"Copyright (C) 2010-2024 FuzzyLite by Juan Rada-Vilela. All rights reserved.\",\n) -&gt; None\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Information.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return code to construct the information in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the information in Python</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation","title":"Representation","text":"<p>               Bases: <code>Repr</code></p> <p>Representation class for the library.</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation.T","title":"T  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>T = TypeVar('T')\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation.fll","title":"fll  <code>instance-attribute</code>","text":"<pre><code>fll: Final = FllExporter()\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation.maxlevel","title":"maxlevel  <code>instance-attribute</code>","text":"<pre><code>maxlevel = 10\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation.repr_float128","title":"repr_float128  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repr_float128 = repr_float\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation.repr_float16","title":"repr_float16  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repr_float16 = repr_float\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation.repr_float32","title":"repr_float32  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repr_float32 = repr_float\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation.repr_float64","title":"repr_float64  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repr_float64 = repr_float\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return code to construct the representation in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the representation in Python</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation.as_constructor","title":"as_constructor","text":"<pre><code>as_constructor(\n    x: T, /, fields: dict[str, Any] | None = None, *, positional: bool = False, cast_as: type[T] | None = None\n) -&gt; str\n</code></pre> <p>Return the Python code to use the constructor of the object.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>T</code> <p>object to construct</p> required <code>fields</code> <code>dict[str, Any] | None</code> <p>override the parameters and arguments to use in the constructor</p> <code>None</code> <code>positional</code> <code>bool</code> <p>use positional parameters if <code>true</code>, and keyword parameters otherwise</p> <code>False</code> <code>cast_as</code> <code>type[T] | None</code> <p>type to upcast the object (useful in inheritance approaches)</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Python code to use the constructor of the object.</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation.construction_arguments","title":"construction_arguments","text":"<pre><code>construction_arguments(\n    x: T, /, fields: dict[str, Any] | None = None, *, positional: bool = False, cast_as: type[T] | None = None\n) -&gt; list[str]\n</code></pre> <p>Return the list of parameters and arguments for the constructor of the object.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>T</code> <p>object to construct</p> required <code>fields</code> <code>dict[str, Any] | None</code> <p>override the parameters and arguments to use in the constructor</p> <code>None</code> <code>positional</code> <code>bool</code> <p>use positional parameters if <code>true</code>, and keyword parameters otherwise</p> <code>False</code> <code>cast_as</code> <code>type[T] | None</code> <p>type to upcast the object (useful in inheritance approaches)</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list of parameters and arguments for the constructor of the object.</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation.import_statement","title":"import_statement","text":"<pre><code>import_statement() -&gt; str\n</code></pre> <p>Return the library's import statement based on the alias in the settings.</p> related <ul> <li>fuzzylite.library.Settings.alias</li> </ul> <p>Returns:</p> Type Description <code>str</code> <p>library's import statement based on the alias in the settings.</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation.package_of","title":"package_of","text":"<pre><code>package_of(x: Any) -&gt; str\n</code></pre> <p>Return the qualified class name of the object.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Any</code> <p>object to get package of</p> required <p>Returns:</p> Type Description <code>str</code> <p>qualified class name of the object.</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation.repr_float","title":"repr_float","text":"<pre><code>repr_float(x: float | floating[Any], level: int) -&gt; str\n</code></pre> <p>Return the string representation of the floating-point value in Python.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float | floating[Any]</code> <p>float to represent</p> required <code>level</code> <code>int</code> <p>irrelevant</p> required <p>Returns:</p> Type Description <code>str</code> <p>string representation of the floating-point value in Python.</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Representation.repr_ndarray","title":"repr_ndarray","text":"<pre><code>repr_ndarray(x: Array[Any], level: int) -&gt; str\n</code></pre> <p>Return the string representation of the numpy array in Python.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Array[Any]</code> <p>numpy array to represent</p> required <code>level</code> <code>int</code> <p>level for recursion control</p> required <p>Returns:</p> Type Description <code>str</code> <p>string representation of the numpy array in Python</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings","title":"Settings","text":"<p>Settings for the library.</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings._factory_manager","title":"_factory_manager  <code>instance-attribute</code>","text":"<pre><code>_factory_manager = factory_manager\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings.alias","title":"alias  <code>instance-attribute</code>","text":"<pre><code>alias = alias\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings.atol","title":"atol  <code>instance-attribute</code>","text":"<pre><code>atol = atol\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings.debugging","title":"debugging  <code>property</code> <code>writable</code>","text":"<pre><code>debugging: bool\n</code></pre> <p>Get/Set the library in debug mode.</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings.debugging--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>bool</code> <p>whether the library is in debug mode</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings.debugging--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool</code> <p>set logging level to <code>DEBUG</code> if <code>true</code>, and to <code>ERROR</code> otherwise</p> required"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings.decimals","title":"decimals  <code>instance-attribute</code>","text":"<pre><code>decimals = decimals\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings.factory_manager","title":"factory_manager  <code>property</code> <code>writable</code>","text":"<pre><code>factory_manager: FactoryManager\n</code></pre> <p>Get/Set the factory manager.</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings.factory_manager--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>FactoryManager</code> <p>factory manager</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings.factory_manager--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>FactoryManager</code> <p>factory manager</p> required"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings.float_type","title":"float_type  <code>instance-attribute</code>","text":"<pre><code>float_type = float_type\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = logger or getLogger('fuzzylite')\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings.rtol","title":"rtol  <code>instance-attribute</code>","text":"<pre><code>rtol = rtol\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings.__init__","title":"__init__","text":"<pre><code>__init__(\n    float_type: Any = float64,\n    decimals: int = 3,\n    atol: float = 0.001,\n    rtol: float = 0.0,\n    alias: str = \"fl\",\n    logger: Logger | None = None,\n    factory_manager: FactoryManager | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>float_type</code> <code>Any</code> <p>floating point type.</p> <code>float64</code> <code>decimals</code> <code>int</code> <p>number of decimals.</p> <code>3</code> <code>atol</code> <code>float</code> <p>absolute tolerance.</p> <code>0.001</code> <code>rtol</code> <code>float</code> <p>relative tolerance.</p> <code>0.0</code> <code>alias</code> <code>str</code> <p>alias to use when representing objects (ie, <code>__repr__()</code>). Cases:     - fully qualified package when alias == \"\" (eg, <code>fuzzylite.term.Constant(name=\"A\", height=1.0)</code>)     - no prefixes when alias == \"*\" (eg, <code>Constant(name=\"A\", height=1.0)</code>)     - alias otherwise (eg, <code>{alias}.Constant(name=\"A\", height=1.0)</code></p> <code>'fl'</code> <code>logger</code> <code>Logger | None</code> <p>logger.</p> <code>None</code> <code>factory_manager</code> <code>FactoryManager | None</code> <p>factory manager.</p> <code>None</code>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return code to construct the settings in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the settings in Python</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.Settings.context","title":"context","text":"<pre><code>context(\n    *,\n    float_type: Any | None = None,\n    decimals: int | None = None,\n    atol: float | None = None,\n    rtol: float | None = None,\n    alias: str | None = None,\n    logger: Logger | None = None,\n    factory_manager: FactoryManager | None = None\n) -&gt; Generator[None, None, None]\n</code></pre> <p>Create a context with specific settings.</p> <p>Parameters:</p> Name Type Description Default <code>float_type</code> <code>Any | None</code> <p>floating point type</p> <code>None</code> <code>decimals</code> <code>int | None</code> <p>number of decimals.</p> <code>None</code> <code>atol</code> <code>float | None</code> <p>absolute tolerance.</p> <code>None</code> <code>rtol</code> <code>float | None</code> <p>relative tolerance.</p> <code>None</code> <code>alias</code> <code>str | None</code> <p>alias for the library.</p> <code>None</code> <code>logger</code> <code>Logger | None</code> <p>logger.</p> <code>None</code> <code>factory_manager</code> <code>FactoryManager | None</code> <p>factory manager.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>context with specific settings.</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.array","title":"array  <code>module-attribute</code>","text":"<pre><code>array: Final = array\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.inf","title":"inf  <code>module-attribute</code>","text":"<pre><code>inf: Final = inf\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.information","title":"information  <code>module-attribute</code>","text":"<pre><code>information: Final = Information()\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.nan","title":"nan  <code>module-attribute</code>","text":"<pre><code>nan: Final = nan\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.repr","title":"repr  <code>module-attribute</code>","text":"<pre><code>repr: Final = repr\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.representation","title":"representation  <code>module-attribute</code>","text":"<pre><code>representation: Final = Representation()\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.scalar","title":"scalar","text":"<pre><code>scalar(x: Sequence[Any] | Array[Any]) -&gt; ScalarArray\n</code></pre><pre><code>scalar(x: Any) -&gt; Scalar\n</code></pre> <pre><code>scalar(x: Sequence[Any] | Array[Any] | Any, /, **kwargs: Any) -&gt; ScalarArray | Scalar\n</code></pre> <p>Convert the values into a floating point value defined by the library.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Sequence[Any] | Array[Any] | Any</code> <p>value to convert.</p> required <code>**kwargs</code> <code>Any</code> <p>keyword arguments to pass to numpy.asarray</p> <code>{}</code> <p>Returns:</p> Type Description <code>ScalarArray | Scalar</code> <p>array of converted values</p>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.settings","title":"settings  <code>module-attribute</code>","text":"<pre><code>settings: Final = Settings()\n</code></pre>"},{"location":"fuzzylite/__all__/library/#fuzzylite.library.to_float","title":"to_float","text":"<pre><code>to_float(x: Any) -&gt; float\n</code></pre> <p>Convert the value into a floating point defined by the library.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Any</code> <p>value to convert.</p> required <p>Returns:</p> Type Description <code>float</code> <p>converted value</p>"},{"location":"fuzzylite/__all__/norm/","title":"Norm","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.AlgebraicProduct","title":"AlgebraicProduct","text":"<p>               Bases: <code>TNorm</code></p> <p>TNorm to compute the algebraic product of any two values.</p> <p></p> Equation <p>\\(a \\otimes b=a\\times b\\)</p> related <ul> <li>fuzzylite.norm.AlgebraicSum</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.AlgebraicProduct-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.AlgebraicProduct.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the algebraic product of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b=a\\times b\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.AlgebraicSum","title":"AlgebraicSum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the algebraic sum of values any two values.</p> <p></p> Equation <p>\\(a \\oplus b=a+b-(a \\times b)\\)</p> related <ul> <li>fuzzylite.norm.AlgebraicProduct</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.AlgebraicSum-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.AlgebraicSum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the algebraic sum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=a+b-(a \\times b)\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.BoundedDifference","title":"BoundedDifference","text":"<p>               Bases: <code>TNorm</code></p> <p>TNorm to compute the bounded difference between any two values.</p> <p></p> Equation <p>\\(a \\otimes b=\\max(0, a + b - 1)\\)</p> related <ul> <li>fuzzylite.norm.BoundedSum</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.BoundedDifference-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.BoundedDifference.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the bounded difference between two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b=\\max(0, a + b - 1)\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.BoundedSum","title":"BoundedSum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the bounded sum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=\\min(1, a+b)\\)</p> related <ul> <li>fuzzylite.norm.BoundedDifference</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.BoundedSum-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.BoundedSum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the bounded sum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=\\min(1, a+b)\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.DrasticProduct","title":"DrasticProduct","text":"<p>               Bases: <code>TNorm</code></p> <p>TNorm to compute the drastic product of any two values.</p> <p></p> Equation <p>\\(a \\otimes b = \\begin{cases}     \\min(a,b) &amp; \\mbox{if } \\max(a,b)=1 \\cr     0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> related <ul> <li>fuzzylite.norm.DrasticSum</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.DrasticProduct-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.DrasticProduct.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the drastic product of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value.</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b = \\begin{cases} \\min(a,b) &amp; \\mbox{if } \\max(a,b)=1 \\cr 0 &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.DrasticSum","title":"DrasticSum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the drastic sum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=\\begin{cases}     \\max(a,b) &amp; \\mbox{if } \\min(a,b)=0 \\cr      1 &amp; \\mbox{otherwise} \\end{cases}\\)</p> related <ul> <li>fuzzylite.norm.DrasticProduct</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.DrasticSum-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.DrasticSum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the drastic sum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=\\begin{cases}  \\max(a,b) &amp; \\mbox{if } \\min(a,b)=0 \\cr  1 &amp; \\mbox{otherwise}  \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.EinsteinProduct","title":"EinsteinProduct","text":"<p>               Bases: <code>TNorm</code></p> <p>TNorm to compute the Einstein product of any two values.</p> <p></p> Equation <p>\\(a \\otimes b=\\dfrac{a\\times b}{2-(a+b-a\\times b)}\\)</p> related <ul> <li>fuzzylite.norm.EinsteinSum</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.EinsteinProduct-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.EinsteinProduct.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the Einstein product of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b=\\dfrac{a\\times b}{2-(a+b-a\\times b)}\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.EinsteinSum","title":"EinsteinSum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the einstein sum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=\\dfrac{a+b}{1+a \\times b}\\)</p> related <ul> <li>fuzzylite.norm.EinsteinProduct</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.EinsteinSum-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.EinsteinSum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the Einstein sum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=\\dfrac{a+b}{1+a \\times b}\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.HamacherProduct","title":"HamacherProduct","text":"<p>               Bases: <code>TNorm</code></p> <p>TNorm to compute the Hamacher product of any two values.</p> <p></p> Equation <p>\\(a \\otimes b=\\dfrac{a \\times b}{a+b- a \\times b}\\)</p> related <ul> <li>fuzzylite.norm.HamacherSum</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.HamacherProduct-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.HamacherProduct.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the Hamacher product of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b=\\dfrac{a \\times b}{a+b- a \\times b}\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.HamacherSum","title":"HamacherSum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the Hamacher sum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=\\dfrac{a+b-2(\\times a \\times b)}{1-a\\times b}\\)</p> related <ul> <li>fuzzylite.norm.HamacherProduct</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.HamacherSum-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.HamacherSum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the Hamacher sum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=\\dfrac{a+b-2(\\times a \\times b)}{1-a\\times b}\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.Maximum","title":"Maximum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the maximum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=\\max(a,b)\\)</p> related <ul> <li>fuzzylite.norm.Minimum</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.Maximum-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.Maximum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the maximum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=\\max(a,b)\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.Minimum","title":"Minimum","text":"<p>               Bases: <code>TNorm</code></p> <p>TNorm that computes the minimum of any two values.</p> <p></p> Equation <p>\\(a \\otimes b=\\min(a,b)\\)</p> related <ul> <li>fuzzylite.norm.Maximum</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.Minimum-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.Minimum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the minimum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b=\\min(a,b)\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NilpotentMaximum","title":"NilpotentMaximum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the nilpotent maximum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=\\begin{cases} \\max(a,b) &amp; \\mbox{if } a+b&lt;0 \\cr 1 &amp; \\mbox{otherwise} \\end{cases}\\)</p> related <ul> <li>fuzzylite.norm.NilpotentMinimum</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NilpotentMaximum-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NilpotentMaximum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the nilpotent maximum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=\\begin{cases} \\max(a,b) &amp; \\mbox{if } a+b&lt;0 \\cr 1 &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NilpotentMinimum","title":"NilpotentMinimum","text":"<p>               Bases: <code>TNorm</code></p> <p>TNorm to compute the nilpotent minimum of any two values.</p> <p></p> Equation <p>\\(a \\otimes b=\\begin{cases}     \\min(a,b) &amp; \\mbox{if }a+b&gt;1 \\cr     0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> related <ul> <li>fuzzylite.norm.NilpotentMaximum</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NilpotentMinimum-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NilpotentMinimum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the nilpotent minimum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b=\\begin{cases}  \\min(a,b) &amp; \\mbox{if }a+b&gt;1 \\cr  0 &amp; \\mbox{otherwise}  \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.Norm","title":"Norm","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for norms.</p> fuzzylite.norm.TNorm fuzzylite.norm.SNorm fuzzylite.norm.AlgebraicProduct fuzzylite.norm.AlgebraicSum fuzzylite.norm.BoundedDifference fuzzylite.norm.BoundedSum fuzzylite.norm.DrasticProduct fuzzylite.norm.DrasticSum fuzzylite.norm.EinsteinProduct fuzzylite.norm.EinsteinSum fuzzylite.norm.HamacherProduct fuzzylite.norm.HamacherSum fuzzylite.norm.Minimum fuzzylite.norm.Maximum fuzzylite.norm.NilpotentMinimum fuzzylite.norm.NilpotentMaximum fuzzylite.norm.NormalizedSum fuzzylite.norm.UnboundedSum related <ul> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.factory.SNormFactory</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.Norm-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.Norm.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the norm in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the norm in Python.</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.Norm.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the norm in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the norm in the FuzzyLite Language.</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.Norm.compute","title":"compute  <code>abstractmethod</code>","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Implement the norm.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>norm between \\(a\\) and \\(b\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormFunction","title":"NormFunction","text":"<p>               Bases: <code>TNorm</code>, <code>SNorm</code></p> <p>TNorm or SNorm based on a term function on any two values.</p> Equation <p>\\(a \\oplus b = a \\otimes b = f(a,b)\\)</p> <p>This Norm is not registered in the SNormFactory or TNormFactory.</p> related <ul> <li>fuzzylite.norm.NormLambda</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormFunction-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormFunction.function","title":"function  <code>instance-attribute</code>","text":"<pre><code>function = function\n</code></pre>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormFunction-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormFunction.__init__","title":"__init__","text":"<pre><code>__init__(function: Function) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Function</code> <p>function \\(f(a,b)\\).</p> required"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormFunction.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the norm in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the norm in Python.</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormFunction.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the Norm using \\(f(a,b)\\).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=f(a,b)\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormLambda","title":"NormLambda","text":"<p>               Bases: <code>TNorm</code>, <code>SNorm</code></p> <p>TNorm or SNorm based on a \\(\\lambda\\) function on any two values.</p> Equation <p>\\(a \\oplus b = a \\otimes b = \\lambda(a,b)\\)</p> <p>This Norm is not registered in the SNormFactory or TNormFactory.</p> related <ul> <li>fuzzylite.norm.NormFunction</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormLambda-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormLambda.function","title":"function  <code>instance-attribute</code>","text":"<pre><code>function = function\n</code></pre>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormLambda-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormLambda.__init__","title":"__init__","text":"<pre><code>__init__(function: Callable[[Scalar, Scalar], Scalar]) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Callable[[Scalar, Scalar], Scalar]</code> <p>function \\(\\lambda(a,b)\\).</p> required"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormLambda.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the norm in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the norm in Python.</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormLambda.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the norm using \\(\\lambda(a,b)\\).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b = a \\otimes b = \\lambda(a,b)\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormalizedSum","title":"NormalizedSum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the normalized sum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=\\dfrac{a+b}{\\max(1, a + b)}\\)</p> related <ul> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormalizedSum-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.NormalizedSum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the normalized sum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=\\dfrac{a+b}{\\max(1, a + b)}\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.SNorm","title":"SNorm","text":"<p>               Bases: <code>Norm</code></p> <p>Base class for S-Norms, used as fuzzy logic operator for disjunction and aggregation in rule blocks.</p> fuzzylite.norm.SNorm fuzzylite.norm.AlgebraicSum fuzzylite.norm.BoundedSum fuzzylite.norm.DrasticSum fuzzylite.norm.EinsteinSum fuzzylite.norm.HamacherSum fuzzylite.norm.Maximum fuzzylite.norm.NilpotentMaximum fuzzylite.norm.NormalizedSum fuzzylite.norm.UnboundedSum related <ul> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.term.Aggregated</li> <li>fuzzylite.rule.RuleBlock</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.SNorm-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.SNorm.compute","title":"compute  <code>abstractmethod</code>","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Implement the S-Norm \\(a \\oplus b\\).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.TNorm","title":"TNorm","text":"<p>               Bases: <code>Norm</code></p> <p>Base class for T-Norms, used as fuzzy logic operator for conjunction and implication in rule blocks.</p> fuzzylite.norm.TNorm fuzzylite.norm.AlgebraicProduct fuzzylite.norm.BoundedDifference fuzzylite.norm.DrasticProduct fuzzylite.norm.EinsteinProduct fuzzylite.norm.HamacherProduct fuzzylite.norm.Minimum fuzzylite.norm.NilpotentMinimum related <ul> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.term.Activated</li> <li>fuzzylite.rule.RuleBlock</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.TNorm-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.TNorm.compute","title":"compute  <code>abstractmethod</code>","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Implement the T-Norm \\(a \\otimes b\\).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b\\)</p>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.UnboundedSum","title":"UnboundedSum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the sum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=a+b\\)</p> related <ul> <li>fuzzylite.norm.BoundedSum</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.UnboundedSum-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/norm/#fuzzylite.norm.UnboundedSum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the sum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=a+b\\)</p>"},{"location":"fuzzylite/__all__/operation/","title":"Operation","text":""},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Op","title":"Op  <code>module-attribute</code>","text":"<pre><code>Op = Operation\n</code></pre>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation","title":"Operation","text":"<p>Methods for numeric operations, string manipulation, and other functions.</p> <p><code>fl.Op</code> is a shortcut to this class.</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.isinf","title":"isinf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>isinf = isinf\n</code></pre>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.isnan","title":"isnan  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>isnan = isnan\n</code></pre>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.arity_of","title":"arity_of  <code>staticmethod</code>","text":"<pre><code>arity_of(method: Callable) -&gt; int\n</code></pre> <p>Gets the arity of the method.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>Callable</code> <p>method to get the arity from</p> required <p>Returns:</p> Type Description <code>int</code> <p>arity of the method.</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.as_identifier","title":"as_identifier  <code>staticmethod</code>","text":"<pre><code>as_identifier(name: str) -&gt; str\n</code></pre> <p>Convert the name into a valid FuzzyLite and Python identifier by removing non-alphanumeric characters and prepending <code>_</code> to names starting with a number.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name to convert</p> required <p>Returns:</p> Type Description <code>str</code> <p>name as a valid identifier.</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.bound","title":"bound  <code>staticmethod</code>","text":"<pre><code>bound(x: Scalar, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Return \\(x\\) clipped between <code>[minimum, maximum]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>value to be clipped</p> required <code>minimum</code> <code>float</code> <p>minimum value of the range</p> required <code>maximum</code> <code>float</code> <p>maximum value of the range</p> required <p>Returns:</p> Type Description <code>Scalar</code> \\[\\begin{cases} \\min &amp; \\mbox{if $x &lt; \\min$} \\cr \\max &amp; \\mbox{if $x &gt; \\max$} \\cr x &amp; \\mbox{otherwise} \\end{cases}\\]"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.class_name","title":"class_name  <code>staticmethod</code>","text":"<pre><code>class_name(x: Any, /, qualname: bool = False) -&gt; str\n</code></pre> <p>Return the class name of the object.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Any</code> <p>object to get the class name</p> required <code>qualname</code> <code>bool</code> <p>use fully qualified classes</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>class name of the given object.</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.describe","title":"describe  <code>staticmethod</code>","text":"<pre><code>describe(instance: object, variables: bool = True, class_hierarchy: bool = False) -&gt; str\n</code></pre> <p>Describe the instance based on its variables and class hierarchy.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>object</code> <p>instance to describe</p> required <code>variables</code> <code>bool</code> <p>include variables in the description</p> <code>True</code> <code>class_hierarchy</code> <code>bool</code> <p>include class hierarchy in the description.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>description of the instance</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.eq","title":"eq  <code>staticmethod</code>","text":"<pre><code>eq(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Return \\(a = b\\) (with NaN's as equal).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>scalar</p> required <code>b</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a=b\\)</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.ge","title":"ge  <code>staticmethod</code>","text":"<pre><code>ge(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Return \\(a \\ge b\\) (with NaN's as equal).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>scalar</p> required <code>b</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\ge b\\)</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.glob_examples","title":"glob_examples  <code>staticmethod</code>","text":"<pre><code>glob_examples(\n    return_type: Literal[\"module\"], module: ModuleType | None = None, recursive: bool = True\n) -&gt; Iterable[ModuleType]\n</code></pre><pre><code>glob_examples(\n    return_type: Literal[\"engine\"], module: ModuleType | None = None, recursive: bool = True\n) -&gt; Iterable[Engine]\n</code></pre><pre><code>glob_examples(\n    return_type: Literal[\"dataset\"] | Literal[\"fld\"], module: ModuleType | None = None, recursive: bool = True\n) -&gt; Iterable[ScalarArray]\n</code></pre><pre><code>glob_examples(\n    return_type: Literal[\"language\"] | Literal[\"fll\"], module: ModuleType | None = None, recursive: bool = True\n) -&gt; Iterable[str]\n</code></pre><pre><code>glob_examples(\n    return_type: Literal[\"files\"], module: ModuleType | None = None, recursive: bool = True\n) -&gt; Iterable[Path]\n</code></pre> <pre><code>glob_examples(\n    return_type: (\n        Literal[\"module\"]\n        | Literal[\"engine\"]\n        | Literal[\"dataset\"]\n        | Literal[\"fld\"]\n        | Literal[\"language\"]\n        | Literal[\"fll\"]\n        | Literal[\"files\"]\n    ) = \"engine\",\n    module: ModuleType | None = None,\n    recursive: bool = True,\n) -&gt; Iterable[ModuleType | Engine | ScalarArray | str | Path]\n</code></pre> <p>Glob the examples (alphabetically and in ascending order) returning the specified type.</p> <p>Parameters:</p> Name Type Description Default <code>return_type</code> <code>Literal['module'] | Literal['engine'] | Literal['dataset'] | Literal['fld'] | Literal['language'] | Literal['fll'] | Literal['files']</code> <p>type of objects to return</p> <code>'engine'</code> <code>module</code> <code>ModuleType | None</code> <p>package (eg, <code>fuzzylite.examples</code>) or module (eg, <code>fuzzylite.examples.terms.arc</code>) to glob</p> <code>None</code> <code>recursive</code> <code>bool</code> <p>recursively glob into subdirectories</p> <code>True</code> <p>Yields:</p> Type Description <code>Iterable[ModuleType | Engine | ScalarArray | str | Path]</code> <p>Iterable of the specified type.</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.gt","title":"gt  <code>staticmethod</code>","text":"<pre><code>gt(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Return \\(a &gt; b\\).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>scalar</p> required <code>b</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a&gt;b\\)</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.increment","title":"increment  <code>staticmethod</code>","text":"<pre><code>increment(x: list[int], minimum: list[int], maximum: list[int], position: int | None = None) -&gt; bool\n</code></pre> <p>Increment the list by the unit.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>list[int]</code> <p>list to increment</p> required <code>minimum</code> <code>list[int]</code> <p>list of minimum values for each element in the list</p> required <code>maximum</code> <code>list[int]</code> <p>list of maximum values for each element in the list</p> required <code>position</code> <code>int | None</code> <p>position in the list to increment</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>whether the list was incremented.</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.is_close","title":"is_close  <code>staticmethod</code>","text":"<pre><code>is_close(a: Scalar, b: Scalar) -&gt; bool | Array[bool_]\n</code></pre> <p>Return \\(a \\approx b\\) (with NaN's as equal) using the absolute and relative tolerances of the library.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>scalar</p> required <code>b</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>bool | Array[bool_]</code> <p>\\(a \\approx b\\)</p> related <ul> <li>fuzzylite.library.Settings</li> </ul>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.le","title":"le  <code>staticmethod</code>","text":"<pre><code>le(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Return \\(a \\le b\\) (with NaN's as equal).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>scalar</p> required <code>b</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\le b\\)</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.lt","title":"lt  <code>staticmethod</code>","text":"<pre><code>lt(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Return \\(a &lt; b\\).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>scalar</p> required <code>b</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a &lt; b\\)</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.midpoints","title":"midpoints  <code>staticmethod</code>","text":"<pre><code>midpoints(start: float, end: float, resolution: int = 1000) -&gt; ScalarArray\n</code></pre> <p>Return the list of values in the range at the given resolution using the midpoint rule.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>start of range</p> required <code>end</code> <code>float</code> <p>end of range</p> required <code>resolution</code> <code>int</code> <p>number of divisions to discretize the range</p> <code>1000</code> <p>Returns:</p> Type Description <code>ScalarArray</code> <p>list of values in the range at the given resolution using the midpoint rule</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.neq","title":"neq  <code>staticmethod</code>","text":"<pre><code>neq(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Return \\(a \\not= b\\) (with NaN's as equal).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>scalar</p> required <code>b</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a\\not=b\\)</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.pascal_case","title":"pascal_case  <code>staticmethod</code>","text":"<pre><code>pascal_case(text: str) -&gt; str\n</code></pre> <p>Converts the string to PascalCase.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>any string</p> required <p>Returns:</p> Type Description <code>str</code> <p>text in <code>PascalCase</code></p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.scale","title":"scale  <code>staticmethod</code>","text":"<pre><code>scale(x: Scalar, x_min: float, x_max: float, y_min: float, y_max: float) -&gt; Scalar\n</code></pre> <p>Linearly interpolates \\(x\\) from the source range <code>[from_minimum, from_maximum]</code> to its new value in the target range <code>[to_minimum, to_maximum]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>value to interpolate</p> required <code>x_min</code> <code>float</code> <p>minimum value of the source range</p> required <code>x_max</code> <code>float</code> <p>maximum value of the source range</p> required <code>y_min</code> <code>float</code> <p>minimum value of the target range</p> required <code>y_max</code> <code>float</code> <p>maximum value of the target range</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x\\) linearly interpolated to the target range as: \\(y = \\dfrac{y_\\max - y_\\min}{x_\\max-x_\\min} (x-x_\\min) + y_\\min\\)</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.snake_case","title":"snake_case  <code>staticmethod</code>","text":"<pre><code>snake_case(text: str) -&gt; str\n</code></pre> <p>Converts the string to snake_case.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>any string</p> required <p>Returns:</p> Type Description <code>str</code> <p>text in <code>snake_case</code></p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.str","title":"str  <code>staticmethod</code>","text":"<pre><code>str(x: Any, /, delimiter: str = ' ') -&gt; str\n</code></pre> <p>Returns a string representation of the value.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Any</code> <p>value</p> required <code>delimiter</code> <code>str</code> <p>delimiter to use when <code>x</code> is a <code>Sequence</code> or <code>ScalarArray</code></p> <code>' '</code> <p>Returns:</p> Type Description <code>str</code> <p>string representation of the value.</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.strip_comments","title":"strip_comments  <code>staticmethod</code>","text":"<pre><code>strip_comments(fll: str, /, delimiter: str = '#') -&gt; str\n</code></pre> <p>Remove the comments from the text.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>text to strip comments from</p> required <code>delimiter</code> <code>str</code> <p>delimiter that indicates the start of a comment.</p> <code>'#'</code> <p>Returns:</p> Type Description <code>str</code> <p>text with comments stripped out.</p>"},{"location":"fuzzylite/__all__/operation/#fuzzylite.operation.Operation.to_fll","title":"to_fll  <code>staticmethod</code>","text":"<pre><code>to_fll(x: Any) -&gt; str\n</code></pre> <p>Return the string representation of the object in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Any</code> <p>object</p> required <p>Returns:</p> Type Description <code>str</code> <p>string representation of the object in the FuzzyLite Language.</p>"},{"location":"fuzzylite/__all__/rule/","title":"Rule","text":""},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Antecedent","title":"Antecedent","text":"<p>Expression tree that represents and evaluates the antecedent of a rule.</p> structure <p>The structure of a rule is:  <code>if (antecedent) then (consequent)</code></p> <p>The structure of the antecedent of a rule is:  <code>if variable is [hedge]* term [(and|or) variable is [hedge]* term]*</code></p> <p><code>*</code>-marked elements may appear zero or more times,  elements in brackets are optional, and  elements in parentheses are compulsory.</p> related <ul> <li>fuzzylite.rule.Consequent</li> <li>fuzzylite.rule.Rule</li> </ul>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Antecedent-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Antecedent.expression","title":"expression  <code>instance-attribute</code>","text":"<pre><code>expression: Expression | None = None\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Antecedent.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text = text\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Antecedent-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Antecedent.__init__","title":"__init__","text":"<pre><code>__init__(text: str = '') -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>antecedent as text.</p> <code>''</code>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Antecedent.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the antecedent in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the antecedent in Python.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Antecedent.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the antecedent as text.</p> <p>Returns:</p> Type Description <code>str</code> <p>antecedent as text</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Antecedent.activation_degree","title":"activation_degree","text":"<pre><code>activation_degree(\n    conjunction: TNorm | None = None, disjunction: SNorm | None = None, node: Expression | None = None\n) -&gt; Scalar\n</code></pre> <p>Compute the activation degree of the antecedent on the expression tree from the given node.</p> <p>Parameters:</p> Name Type Description Default <code>conjunction</code> <code>TNorm | None</code> <p>conjunction operator from the rule block</p> <code>None</code> <code>disjunction</code> <code>SNorm | None</code> <p>disjunction operator from the rule block</p> <code>None</code> <code>node</code> <code>Expression | None</code> <p>node in the expression tree of the antecedent</p> <code>None</code> <p>Returns:</p> Type Description <code>Scalar</code> <p>activation degree of the antecedent.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Antecedent.infix","title":"infix","text":"<pre><code>infix(node: Expression | None = None) -&gt; str\n</code></pre> <p>Return the infix notation of the node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Expression | None</code> <p>node in the expression tree of the antecedent</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>infix notation of the node.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Antecedent.is_loaded","title":"is_loaded","text":"<pre><code>is_loaded() -&gt; bool\n</code></pre> <p>Return whether the antecedent is loaded.</p> <p>Returns:</p> Type Description <code>bool</code> <p>antecedent is loaded.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Antecedent.load","title":"load","text":"<pre><code>load(engine: Engine) -&gt; None\n</code></pre> <p>Load the antecedent using the engine to identify and get references to the input and output variables.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to get references in the antecedent.</p> required"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Antecedent.postfix","title":"postfix","text":"<pre><code>postfix(node: Expression | None = None) -&gt; str\n</code></pre> <p>Return the postfix notation of the node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Expression | None</code> <p>node in the expression tree of the antecedent</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>postfix notation of the node.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Antecedent.prefix","title":"prefix","text":"<pre><code>prefix(node: Expression | None = None) -&gt; str\n</code></pre> <p>Return the prefix notation of the node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Expression | None</code> <p>node in the expression tree of the antecedent</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>prefix notation of the node.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Antecedent.unload","title":"unload","text":"<pre><code>unload() -&gt; None\n</code></pre> <p>Unload the antecedent.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Consequent","title":"Consequent","text":"<p>Proposition set that represents and evaluates the consequent of a rule.</p> structure <p>The structure of a rule is:  <code>if (antecedent) then (consequent)</code></p> <p>The structure of the consequent of a rule is:  <code>then variable is [hedge]* term [and variable is [hedge]* term]* [with w]?</code></p> <p><code>*</code>-marked elements may appear zero or more times,  elements in brackets are optional,  elements in parentheses are compulsory, and  <code>?</code>-marked elements may appear once or not at all.</p> related <ul> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Rule</li> </ul>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Consequent-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Consequent.conclusions","title":"conclusions  <code>instance-attribute</code>","text":"<pre><code>conclusions: list[Proposition] = []\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Consequent.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str = text\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Consequent-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Consequent.__init__","title":"__init__","text":"<pre><code>__init__(text: str = '') -&gt; None\n</code></pre> <p>Constructor.</p> <p>text: consequent as text.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Consequent.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the consequent in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the consequent in Python.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Consequent.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the consequent as text.</p> <p>Returns:</p> Type Description <code>str</code> <p>consequent as text</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Consequent.is_loaded","title":"is_loaded","text":"<pre><code>is_loaded() -&gt; bool\n</code></pre> <p>Return whether the consequent is loaded.</p> <p>Returns:</p> Type Description <code>bool</code> <p>consequent is loaded.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Consequent.load","title":"load","text":"<pre><code>load(engine: Engine) -&gt; None\n</code></pre> <p>Load the consequent using the engine to identify and get references to the input and output variables.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to get references in the consequent.</p> required"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Consequent.modify","title":"modify","text":"<pre><code>modify(activation_degree: Scalar, implication: TNorm | None) -&gt; None\n</code></pre> <p>Modify the consequent with the activation degree and the implication operator.</p> <p>Parameters:</p> Name Type Description Default <code>activation_degree</code> <code>Scalar</code> <p>activation degree computed in the antecedent of the rule</p> required <code>implication</code> <code>TNorm | None</code> <p>implication operator configured in the rule block.</p> required"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Consequent.unload","title":"unload","text":"<pre><code>unload() -&gt; None\n</code></pre> <p>Unload the consequent.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Expression","title":"Expression","text":"<p>               Bases: <code>ABC</code></p> <p>Base class to build an expression tree.</p> related <ul> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Consequent</li> <li>fuzzylite.rule.Rule</li> </ul>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Expression-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Expression.__init__","title":"__init__  <code>abstractmethod</code>","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Operator","title":"Operator","text":"<p>               Bases: <code>Expression</code></p> <p>Expression that represents a non-terminal node in the expression tree as a binary operator (i.e., <code>and</code> or <code>or</code>) on two Expression nodes.</p> related <ul> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Consequent</li> <li>fuzzylite.rule.Rule</li> </ul>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Operator-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Operator.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left = left\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Operator.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Operator.right","title":"right  <code>instance-attribute</code>","text":"<pre><code>right = right\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Operator-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Operator.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', right: Expression | None = None, left: Expression | None = None) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the operator</p> <code>''</code> <code>left</code> <code>Expression | None</code> <p>left expression in the binary tree</p> <code>None</code> <code>right</code> <code>Expression | None</code> <p>right expression in the binary tree.</p> <code>None</code>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Operator.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the name of the operator.</p> <p>Returns:</p> Type Description <code>str</code> <p>name of the operator.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Proposition","title":"Proposition","text":"<p>               Bases: <code>Expression</code></p> <p>Expression that represents a terminal node in the expression tree as <code>variable is [hedge]* term</code>.</p> related <ul> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Consequent</li> <li>fuzzylite.rule.Rule</li> </ul>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Proposition-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Proposition.hedges","title":"hedges  <code>instance-attribute</code>","text":"<pre><code>hedges: list[Hedge] = []\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Proposition.term","title":"term  <code>instance-attribute</code>","text":"<pre><code>term = term\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Proposition.variable","title":"variable  <code>instance-attribute</code>","text":"<pre><code>variable = variable\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Proposition-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Proposition.__init__","title":"__init__","text":"<pre><code>__init__(variable: Variable | None = None, hedges: Iterable[Hedge] | None = None, term: Term | None = None) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>variable</code> <code>Variable | None</code> <p>variable in the proposition</p> <code>None</code> <code>hedges</code> <code>Iterable[Hedge] | None</code> <p>list of hedges that apply to the term of the variable</p> <code>None</code> <code>term</code> <code>Term | None</code> <p>term in the proposition.</p> <code>None</code>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Proposition.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return proposition as text.</p> <p>Returns:</p> Type Description <code>str</code> <p>proposition as text.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule","title":"Rule","text":"<p>Conditional statement that contributes to the control of an Engine.</p> <p>A rule consists of an Antecedent and a Consequent, each with propositions in the form <code>variable is term</code>.</p> <p>The propositions in the Antecedent are connected by the conjunctive <code>and</code> or the disjunctive <code>or</code>, which are fuzzy logic operators represented as TNorm and SNorm (respectively).</p> <p>The propositions in the Consequent are independent and separated by a symbolic <code>and</code>.</p> <p>The term in any proposition can be preceded by a hedge that modifies its membership function value of the term.</p> <p>The contribution of a rule to the control of the engine can be determined by its weight \\(w \\in [0.0, 1.0]\\), which is equal to 1.0 if omitted.</p> structure <p>The structure of a rule is:  <code>if (antecedent) then (consequent) [with weight]</code></p> <p>The structure of the antecedent is:  <code>if variable is [hedge]* term [(and|or) variable is [hedge]* term]*</code></p> <p>The structure of the consequent is:  <code>then variable is [hedge]* term [and variable is [hedge]* term]* [with w]?</code></p> <p>where elements in brackets are optional, elements in parentheses are compulsory, <code>*</code>-marked elements may appear zero or more times, and <code>?</code>-marked elements may appear once or not at all.</p> related <ul> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Consequent</li> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.AND","title":"AND  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AND = 'and'\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.IF","title":"IF  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>IF = 'if'\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.IS","title":"IS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>IS = 'is'\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.OR","title":"OR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OR = 'or'\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.THEN","title":"THEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>THEN = 'then'\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.WITH","title":"WITH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WITH = 'with'\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.activation_degree","title":"activation_degree  <code>instance-attribute</code>","text":"<pre><code>activation_degree = scalar(0.0)\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.antecedent","title":"antecedent  <code>instance-attribute</code>","text":"<pre><code>antecedent = antecedent or Antecedent()\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.consequent","title":"consequent  <code>instance-attribute</code>","text":"<pre><code>consequent = consequent or Consequent()\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.enabled","title":"enabled  <code>instance-attribute</code>","text":"<pre><code>enabled = enabled\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.text","title":"text  <code>property</code> <code>writable</code>","text":"<pre><code>text: str\n</code></pre> <p>Get/Set the rule as text.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.text--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>str</code> <p>rule as text</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.text--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>rule as text</p> required"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.triggered","title":"triggered  <code>instance-attribute</code>","text":"<pre><code>triggered = array(False)\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.weight","title":"weight  <code>instance-attribute</code>","text":"<pre><code>weight = weight\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.__init__","title":"__init__","text":"<pre><code>__init__(\n    enabled: bool = True,\n    weight: float = 1.0,\n    antecedent: Antecedent | None = None,\n    consequent: Consequent | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>enable the rule</p> <code>True</code> <code>weight</code> <code>float</code> <p>weight of the rule</p> <code>1.0</code> <code>antecedent</code> <code>Antecedent | None</code> <p>antecedent of the rule</p> <code>None</code> <code>consequent</code> <code>Consequent | None</code> <p>consequent of the rule</p> <code>None</code>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the rule in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the rule in Python.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the rule in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the rule in the FuzzyLite Language.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.activate_with","title":"activate_with","text":"<pre><code>activate_with(conjunction: TNorm | None, disjunction: SNorm | None) -&gt; Scalar\n</code></pre> <p>Compute and set activation degree of the rule with the conjunction and disjunction operators.</p> <p>Parameters:</p> Name Type Description Default <code>conjunction</code> <code>TNorm | None</code> <p>conjunction operator</p> required <code>disjunction</code> <code>SNorm | None</code> <p>disjunction operator</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>activation degree of the rule.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(text: str, engine: Engine | None = None) -&gt; Rule\n</code></pre> <p>Create rule from the text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>rule as text</p> required <code>engine</code> <code>Engine | None</code> <p>engine that the rule (partially) controls</p> <code>None</code>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.deactivate","title":"deactivate","text":"<pre><code>deactivate() -&gt; None\n</code></pre> <p>Deactivate the rule.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.is_loaded","title":"is_loaded","text":"<pre><code>is_loaded() -&gt; bool\n</code></pre> <p>Return whether the rule is loaded.</p> <p>Returns:</p> Type Description <code>bool</code> <p>rule is loaded.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.load","title":"load","text":"<pre><code>load(engine: Engine) -&gt; None\n</code></pre> <p>Load the rule using the engine to identify and get references to the input and output variables.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine that the rule (partially) controls</p> required"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.parse","title":"parse","text":"<pre><code>parse(text: str) -&gt; None\n</code></pre> <p>Parse and load the rule based on the text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>rule as text.</p> required"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.trigger","title":"trigger","text":"<pre><code>trigger(implication: TNorm | None) -&gt; None\n</code></pre> <p>Trigger the rule using the implication operator and the previously computed activation degree.</p> <p>Parameters:</p> Name Type Description Default <code>implication</code> <code>TNorm | None</code> <p>implication operator.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>when the rule is not loaded</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.Rule.unload","title":"unload","text":"<pre><code>unload() -&gt; None\n</code></pre> <p>Unload the rule.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock","title":"RuleBlock","text":"<p>Block of rules and fuzzy logic operators required to control an engine.</p> related <ul> <li>fuzzylite.engine.Engine</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.activation.Activation</li> </ul>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.activation","title":"activation  <code>instance-attribute</code>","text":"<pre><code>activation = activation\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.conjunction","title":"conjunction  <code>instance-attribute</code>","text":"<pre><code>conjunction = conjunction\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description = description\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.disjunction","title":"disjunction  <code>instance-attribute</code>","text":"<pre><code>disjunction = disjunction\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.enabled","title":"enabled  <code>instance-attribute</code>","text":"<pre><code>enabled = enabled\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.implication","title":"implication  <code>instance-attribute</code>","text":"<pre><code>implication = implication\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.rules","title":"rules  <code>instance-attribute</code>","text":"<pre><code>rules = list(rules or [])\n</code></pre>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(item: int) -&gt; Rule\n</code></pre><pre><code>__getitem__(item: slice) -&gt; list[Rule]\n</code></pre> <pre><code>__getitem__(item: int | slice) -&gt; Rule | list[Rule]\n</code></pre> <p>Allow indexing rules in rule block (eg, <code>rule_block[0]</code>).</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>int | slice</code> <p>rule index or slice</p> required <p>Returns:</p> Type Description <code>Rule | list[Rule]</code> <p>rule at index or slice of rules</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    description: str = \"\",\n    enabled: bool = True,\n    conjunction: TNorm | None = None,\n    disjunction: SNorm | None = None,\n    implication: TNorm | None = None,\n    activation: Activation | None = None,\n    rules: Iterable[Rule] | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the rule block</p> <code>''</code> <code>description</code> <code>str</code> <p>description of the rule block</p> <code>''</code> <code>enabled</code> <code>bool</code> <p>enable the rule block</p> <code>True</code> <code>conjunction</code> <code>TNorm | None</code> <p>conjunction operator</p> <code>None</code> <code>disjunction</code> <code>SNorm | None</code> <p>disjunction operator</p> <code>None</code> <code>implication</code> <code>TNorm | None</code> <p>implication operator</p> <code>None</code> <code>activation</code> <code>Activation | None</code> <p>activation method</p> <code>None</code> <code>rules</code> <code>Iterable[Rule] | None</code> <p>list of rules.</p> <code>None</code>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[Rule]\n</code></pre> <p>Return the iterator of the rules.</p> <p>Returns:</p> Type Description <code>Iterator[Rule]</code> <p>iterator of the rules</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Return the number of rules.</p> <p>Returns:</p> Type Description <code>int</code> <p>number of rules</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the rule block in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the rule block in Python.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the rule block in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the rule block in the FuzzyLite Language.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.activate","title":"activate","text":"<pre><code>activate() -&gt; None\n</code></pre> <p>Activate the rule block.</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.load_rules","title":"load_rules","text":"<pre><code>load_rules(engine: Engine) -&gt; None\n</code></pre> <p>Load all the rules in the rule block.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine where this rule block is registered.</p> required"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.reload_rules","title":"reload_rules","text":"<pre><code>reload_rules(engine: Engine) -&gt; None\n</code></pre> <p>Reload all the rules in the rule block.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine where this rule block is registered.</p> required"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.rule","title":"rule","text":"<pre><code>rule(index: int) -&gt; Rule\n</code></pre> <p>Get the rule at the index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>index of the rule.</p> required <p>Returns:</p> Type Description <code>Rule</code> <p>rule at the index</p>"},{"location":"fuzzylite/__all__/rule/#fuzzylite.rule.RuleBlock.unload_rules","title":"unload_rules","text":"<pre><code>unload_rules() -&gt; None\n</code></pre> <p>Unload all the rules in the rule block.</p>"},{"location":"fuzzylite/__all__/term/","title":"Term","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Activated","title":"Activated","text":"<p>               Bases: <code>Term</code></p> <p>Special term that represents the activation of terms when processing the antecedent of a rule.</p> Equation <p>\\(\\mu(x) = \\alpha_a \\otimes \\mu_a(x)\\)</p> <p>where</p> <ul> <li>\\(\\alpha_a\\): activation degree of term \\(a\\)</li> <li>\\(\\otimes\\): implication operator</li> <li>\\(\\mu_a\\): activated term \\(a\\)</li> </ul> related <ul> <li>fuzzylite.term.Term</li> <li>fuzzylite.term.Aggregated</li> <li>fuzzylite.variable.OutputVariable</li> <li>fuzzylite.defuzzifier.WeightedDefuzzifier</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Activated-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Activated.degree","title":"degree  <code>property</code> <code>writable</code>","text":"<pre><code>degree: Scalar\n</code></pre> <p>Get/Set the activation degree of the term.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Activated.degree--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>Scalar</code> <p>activation degree of the term.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Activated.degree--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>Scalar</code> <p>activation degree of the term, with replacements of <code>{nan: 0.0, -inf: 0.0, inf: 1.0}</code></p> required Note <p>replacements of <code>{nan: 0.0, -inf: 0.0, inf: 1.0}</code> are made to sensibly deal with non-finite activations (eg, <code>NaN</code> input values)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Activated.implication","title":"implication  <code>instance-attribute</code>","text":"<pre><code>implication = implication\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Activated.term","title":"term  <code>instance-attribute</code>","text":"<pre><code>term = term\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Activated-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Activated.__init__","title":"__init__","text":"<pre><code>__init__(term: Term, degree: Scalar = 1.0, implication: TNorm | None = None) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>activated term</p> required <code>degree</code> <code>Scalar</code> <p>activation degree of the term</p> <code>1.0</code> <code>implication</code> <code>TNorm | None</code> <p>implication operator</p> <code>None</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Activated.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the term in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in Python.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Activated.fuzzy_value","title":"fuzzy_value","text":"<pre><code>fuzzy_value(padding: bool = False) -&gt; Array[str_]\n</code></pre> <p>Return fuzzy value in the form <code>{degree}/{name}</code>.</p> <p>Parameters:</p> Name Type Description Default <code>padding</code> <code>bool</code> <p>whether to pad the degree sign (eg, <code>\" - \"</code> when <code>True</code> and <code>\"-\"</code> otherwise)</p> <code>False</code> <p>Returns:</p> Type Description <code>Array[str_]</code> <p>fuzzy value in the form <code>{degree}/{name}</code></p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Activated.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the implication of the activation degree and the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\alpha_a \\otimes \\mu_a(x)\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Activated.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>degree * term</code> if not implication else <code>implication(degree, term)</code></p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated","title":"Aggregated","text":"<p>               Bases: <code>Term</code></p> <p>Special term that represents a fuzzy set of activated terms to mainly serve as the fuzzy output value of output variables.</p> Equation <p>\\(\\mu(x)=\\bigoplus_i^n\\alpha_i\\otimes\\mu_i(x) = \\alpha_1\\otimes\\mu_1(x) \\oplus \\ldots \\oplus \\alpha_n\\otimes\\mu_n(x)\\)</p> <p>where</p> <ul> <li>\\(\\alpha_i\\): activation degree of term \\(i\\)</li> <li>\\(\\mu_i\\): membership function of term \\(i\\)</li> <li>\\(\\otimes\\): implication operator</li> <li>\\(\\oplus\\): aggregation operator</li> </ul> related <ul> <li>fuzzylite.term.Activated</li> <li>fuzzylite.variable.OutputVariable</li> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.term.Term</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated.aggregation","title":"aggregation  <code>instance-attribute</code>","text":"<pre><code>aggregation = aggregation\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated.maximum","title":"maximum  <code>instance-attribute</code>","text":"<pre><code>maximum = maximum\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated.minimum","title":"minimum  <code>instance-attribute</code>","text":"<pre><code>minimum = minimum\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated.terms","title":"terms  <code>instance-attribute</code>","text":"<pre><code>terms = list(terms or [])\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    minimum: float = nan,\n    maximum: float = nan,\n    aggregation: SNorm | None = None,\n    terms: Iterable[Activated] | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the aggregated term</p> <code>''</code> <code>minimum</code> <code>float</code> <p>minimum value of the range of the fuzzy set</p> <code>nan</code> <code>maximum</code> <code>float</code> <p>maximum value of the range of the fuzzy set</p> <code>nan</code> <code>aggregation</code> <code>SNorm | None</code> <p>aggregation operator</p> <code>None</code> <code>terms</code> <code>Iterable[Activated] | None</code> <p>list of activated terms</p> <code>None</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the term in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in Python.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated.activation_degree","title":"activation_degree","text":"<pre><code>activation_degree(term: Term) -&gt; Scalar\n</code></pre> <p>Compute the aggregated activation degree of the term.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to compute the aggregated activation degree</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>aggregated activation degree for the term.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated.clear","title":"clear","text":"<pre><code>clear() -&gt; None\n</code></pre> <p>Clear the list of activated terms.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated.grouped_terms","title":"grouped_terms","text":"<pre><code>grouped_terms() -&gt; dict[str, Activated]\n</code></pre> <p>Group the activated terms and aggregate their activation degrees.</p> <p>Returns:</p> Type Description <code>dict[str, Activated]</code> <p>grouped activated terms by name with aggregated activation degrees.</p> related <ul> <li>fuzzylite.defuzzifier.WeightedSum</li> <li>fuzzylite.defuzzifier.WeightedAverage</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated.highest_activated_term","title":"highest_activated_term","text":"<pre><code>highest_activated_term() -&gt; Activated | None\n</code></pre> <p>Find the term with the maximum aggregated activation degree.</p> <p>Returns:</p> Type Description <code>Activated | None</code> <p>term with the maximum aggregated activation degree.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when working with vectorization (eg, size(activation_degree) &gt; 1)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Aggregate the activated terms' membership function values of \\(x\\) using the aggregation operator.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x)=\\bigoplus_i^n\\alpha_i\\otimes\\mu_i(x) = \\alpha_1\\otimes\\mu_1(x) \\oplus \\ldots \\oplus \\alpha_n\\otimes\\mu_n(x)\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>aggregation minimum maximum terms</code></p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Aggregated.range","title":"range","text":"<pre><code>range() -&gt; float\n</code></pre> <p>Return the magnitude of the range of the fuzzy set.</p> <p>Returns:</p> Type Description <code>float</code> <p><code>maximum - minimum</code></p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Arc","title":"Arc","text":"<p>               Bases: <code>Term</code></p> <p>Edge term that represents the arc-shaped membership function.</p> <p></p> Equation <p>\\(\\mu(x)=\\dfrac{h\\sqrt{r^2 - (x-c)^2}}{|r|}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(r\\): radius of the Arc</li> <li>\\(c\\): center of the Arc</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Arc-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Arc.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end = end\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Arc.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start = start\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Arc-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Arc.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', start: float = nan, end: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>start</code> <code>float</code> <p>start of the Arc</p> <code>nan</code> <code>end</code> <code>float</code> <p>end of the Arc</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Arc.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>start end [height]</code></p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Arc.is_monotonic","title":"is_monotonic","text":"<pre><code>is_monotonic() -&gt; bool\n</code></pre> <p>Return <code>True</code> because the term is monotonic.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code></p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Arc.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x)=\\dfrac{h\\sqrt{r^2 - (x-c)^2}}{|r|}\\), clipped accordingly</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Arc.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>start end</code></p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Arc.tsukamoto","title":"tsukamoto","text":"<pre><code>tsukamoto(y: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the tsukamoto value of the monotonic term for activation degree \\(y\\).</p> Equation <p>\\(y=\\dfrac{h\\sqrt{r^2 - (x-c)^2}}{|r|}\\)</p> <p>\\(x=c\\pm \\sqrt{r^2-\\dfrac{yr}{h}}\\)</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>Scalar</code> <p>activation degree</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x=c\\pm \\sqrt{r^2-\\dfrac{yr}{h}}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Bell","title":"Bell","text":"<p>               Bases: <code>Term</code></p> <p>Extended term that represents the generalized bell curve membership function.</p> <p></p> Equation <p>\\(\\mu(x)=\\dfrac{h}{1 + \\left(\\dfrac{|x-c|}{w}\\right)^{2s}}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(c\\): center of the Bell</li> <li>\\(w\\): width of the Bell</li> <li>\\(s\\): slope of the Bell</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Bell-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Bell.center","title":"center  <code>instance-attribute</code>","text":"<pre><code>center = center\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Bell.slope","title":"slope  <code>instance-attribute</code>","text":"<pre><code>slope = slope\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Bell.width","title":"width  <code>instance-attribute</code>","text":"<pre><code>width = width\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Bell-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Bell.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', center: float = nan, width: float = nan, slope: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>center</code> <code>float</code> <p>center of the Bell</p> <code>nan</code> <code>width</code> <code>float</code> <p>width of the Bell</p> <code>nan</code> <code>slope</code> <code>float</code> <p>slope of the Bell</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Bell.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>center width slope [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Bell.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x)=\\dfrac{h}{1 + \\left(\\dfrac{|x-c|}{w}\\right)^{2s}}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Bell.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>center width slope [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Binary","title":"Binary","text":"<p>               Bases: <code>Term</code></p> <p>Edge Term that represents the binary membership function.</p> <p></p> Equation <p>\\(\\mu(x) = \\begin{cases}     h &amp; \\mbox{if } (d=\\infty \\wedge x \\ge s) \\vee (d=-\\infty \\wedge x \\le s) \\cr     0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(s\\): start of the Binary</li> <li>\\(d\\): direction of the Binary</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Binary-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Binary.direction","title":"direction  <code>instance-attribute</code>","text":"<pre><code>direction = direction\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Binary.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start = start\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Binary-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Binary.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', start: float = nan, direction: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>start</code> <code>float</code> <p>start of the Binary</p> <code>nan</code> <code>direction</code> <code>float</code> <p>direction of the Binary (-inf, inf)</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Binary.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>start direction [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Binary.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\begin{cases} h &amp; \\mbox{if } (d=\\infty \\wedge x \\ge s) \\vee (d=-\\infty \\wedge x \\le s) \\cr 0 &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Binary.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>start direction [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Concave","title":"Concave","text":"<p>               Bases: <code>Term</code></p> <p>Edge Term that represents the concave membership function.</p> <p></p> Equation <p>\\(\\mu(x) = \\begin{cases}     h  \\dfrac{e - i} {2e - i - x} &amp; \\mbox{if } i \\leq e \\wedge x &lt; e \\mbox{ (increasing concave)} \\cr     h  \\dfrac{i - e} {-2e + i + x} &amp; \\mbox{if } i &gt; e \\wedge x &gt; e \\mbox{ (decreasing concave)} \\cr     h &amp; \\mbox{otherwise} \\cr \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(i\\): inflection of the Concave</li> <li>\\(e\\): end of the Concave</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Concave-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Concave.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end = end\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Concave.inflection","title":"inflection  <code>instance-attribute</code>","text":"<pre><code>inflection = inflection\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Concave-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Concave.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', inflection: float = nan, end: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>inflection</code> <code>float</code> <p>inflection of the Concave</p> <code>nan</code> <code>end</code> <code>float</code> <p>end of the Concave</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Concave.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>inflection end [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Concave.is_monotonic","title":"is_monotonic","text":"<pre><code>is_monotonic() -&gt; bool\n</code></pre> <p>Return <code>True</code> because the term is monotonic.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code></p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Concave.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\begin{cases} h  \\dfrac{e - i} {2e - i - x} &amp; \\mbox{if } i \\leq e \\wedge x &lt; e \\mbox{ (increasing concave)} \\cr h  \\dfrac{i - e} {-2e + i + x} &amp; \\mbox{if } i &gt; e \\wedge x &gt; e \\mbox{ (decreasing concave)} \\cr h &amp; \\mbox{otherwise} \\cr \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Concave.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>inflection end [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Concave.tsukamoto","title":"tsukamoto","text":"<pre><code>tsukamoto(y: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the tsukamoto value of the monotonic term for activation degree \\(y\\).</p> Equation <p>\\(y = h \\dfrac{e - i} {2e - i - x}\\)</p> <p>\\(x = h \\dfrac{e-i}{y} + 2e -i\\)</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>Scalar</code> <p>activation degree</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x = h \\dfrac{e-i}{y} + 2e -i\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Constant","title":"Constant","text":"<p>               Bases: <code>Term</code></p> <p>Zero polynomial term \\(k\\) that represents a constant value.</p> <p></p> Equation <p>\\(\\mu(x) = k\\)</p> <p>where</p> <ul> <li>\\(k\\): value of the Constant</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Constant-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Constant.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value = value\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Constant-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Constant.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', value: float = nan) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>value</code> <code>float</code> <p>value of the Constant</p> <code>nan</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Constant.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the term in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in Python.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Constant.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>k</code></p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Constant.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>irrelevant</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = k\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Constant.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>k</code></p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Cosine","title":"Cosine","text":"<p>               Bases: <code>Term</code></p> <p>Extended term that represents the cosine membership function.</p> <p></p> Equation <p>\\(\\mu(x) = \\begin{cases}     \\dfrac{h}{2} \\left(1 + \\cos\\left(\\dfrac{2.0}{w}\\pi(x-c)\\right)\\right) &amp; \\mbox{if } c - \\dfrac{w}{2} \\le x \\le c + \\dfrac{w}{2} \\cr     0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(c\\): center of the Cosine</li> <li>\\(w\\): width of the Cosine</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Cosine-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Cosine.center","title":"center  <code>instance-attribute</code>","text":"<pre><code>center = center\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Cosine.width","title":"width  <code>instance-attribute</code>","text":"<pre><code>width = width\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Cosine-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Cosine.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', center: float = nan, width: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>center</code> <code>float</code> <p>center of the Cosine</p> <code>nan</code> <code>width</code> <code>float</code> <p>width of the Cosine</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Cosine.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>center width [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Cosine.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\begin{cases} \\dfrac{h}{2} \\left(1 + \\cos\\left(\\dfrac{2.0}{w}\\pi(x-c)\\right)\\right) &amp; \\mbox{if } c - \\dfrac{w}{2} \\le x \\le c + \\dfrac{w}{2} \\cr 0 &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Cosine.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>center width [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete","title":"Discrete","text":"<p>               Bases: <code>Term</code></p> <p>Basic term that represents a discrete membership function.</p> <p></p> Equation <p>\\(\\mu(x) = h\\dfrac{(y_\\max - y_\\min)}{(x_\\max - x_\\min)}  (x - x_\\min) + y_\\min\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(x_{\\min}, x_{\\max}\\): lower and upper bounds of \\(x\\), respectively</li> <li>\\(y_{\\min}, y_{\\max}\\): membership function values \\(\\mu(x_{\\min})\\) and \\(\\mu(x_{\\max})\\), respectively</li> </ul> related <ul> <li>numpy.interp</li> </ul> Warning <p>The pairs of values in any Discrete term must be sorted in ascending order by the \\(x\\) coordinate because the membership function is computed using binary search to find the lower and upper bounds of \\(x\\).</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete.Floatable","title":"Floatable  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Floatable = Union[SupportsFloat, str]\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete.values","title":"values  <code>instance-attribute</code>","text":"<pre><code>values = values\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', values: ScalarArray | Sequence[Floatable] | None = None, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the term</p> <code>''</code> <code>values</code> <code>ScalarArray | Sequence[Floatable] | None</code> <p>2D array of \\((x,y)\\) pairs</p> <code>None</code> <code>height</code> <code>float</code> <p>height of the term.</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>x1 y1 ... xn yn [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    name: str,\n    xy: str | Sequence[Floatable] | tuple[Sequence[Floatable], Sequence[Floatable]] | dict[Floatable, Floatable],\n    height: float = 1.0,\n) -&gt; Discrete\n</code></pre> <p>Create a discrete term from the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the term</p> required <code>xy</code> <code>str | Sequence[Floatable] | tuple[Sequence[Floatable], Sequence[Floatable]] | dict[Floatable, Floatable]</code> <p>coordinates</p> required <code>height</code> <code>float</code> <p>height of the term</p> <code>1.0</code> <p>Returns:</p> Type Description <code>Discrete</code> <p>Discrete term.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>The function uses binary search to find the lower and upper bounds of \\(x\\) and then linearly interpolates the membership function value between the bounds.</p> Warning <p>The pairs of values in any Discrete term must be sorted in ascending order by the \\(x\\) coordinate because the membership function is computed using binary search to find the lower and upper bounds of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = h\\dfrac{(y_\\max - y_\\min)}{(x_\\max - x_\\min)}  (x - x_\\min) + y_\\min\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>x1 y1 ... xn yn [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete.sort","title":"sort","text":"<pre><code>sort() -&gt; None\n</code></pre> <p>Sort in ascending order the pairs of values by the \\(x\\)-coordinate.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict[float, float]\n</code></pre> <p>Return a dictionary of values in the form <code>{x: y}</code>.</p> <p>Returns:</p> Type Description <code>dict[float, float]</code> <p>dictionary of values in the form <code>{x: y}</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete.to_list","title":"to_list","text":"<pre><code>to_list() -&gt; list[float]\n</code></pre> <p>Return a list of values in the form <code>[x1,y1, ..., xn, yn]</code>.</p> <p>Returns:</p> Type Description <code>list[float]</code> <p>list of values in the form <code>[x1,y1, ..., xn, yn]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete.to_xy","title":"to_xy  <code>staticmethod</code>","text":"<pre><code>to_xy(x: Any, y: Any) -&gt; ScalarArray\n</code></pre> <p>Create list of values from the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Any</code> <p>\\(x\\)-coordinate(s) that can be converted into scalar(s)</p> required <code>y</code> <code>Any</code> <p>\\(y\\)-coordinate(s) that can be converted into scalar(s)</p> required <p>Returns:</p> Type Description <code>ScalarArray</code> <p>array of \\(n\\)-rows and \\(2\\)-columns \\((n,2)\\).</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when the shapes of \\(x\\) and \\(y\\) are different.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete.x","title":"x","text":"<pre><code>x() -&gt; ScalarArray\n</code></pre> <p>Return \\(x\\) coordinates.</p> <p>Returns:</p> Type Description <code>ScalarArray</code> <p>\\(x\\) coordinates.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Discrete.y","title":"y","text":"<pre><code>y() -&gt; ScalarArray\n</code></pre> <p>Return \\(y\\) coordinates.</p> <p>Returns:</p> Type Description <code>ScalarArray</code> <p>\\(y\\) coordinates.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function","title":"Function","text":"<p>               Bases: <code>Term</code></p> <p>Polynomial term that represents a generic function.</p> <p></p> Equation <p>\\(f : x \\mapsto f(x)\\)</p> <p>The function term is also used to convert the text of the antecedent of a rule from infix to postfix notation.</p> related <ul> <li>fuzzylite.rule.Antecedent</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.engine","title":"engine  <code>instance-attribute</code>","text":"<pre><code>engine = engine\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.formula","title":"formula  <code>instance-attribute</code>","text":"<pre><code>formula = formula\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.root","title":"root  <code>instance-attribute</code>","text":"<pre><code>root: Node | None = None\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: dict[str, Scalar] = copy() if variables else {}\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function-classes","title":"Classes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element","title":"Element","text":"<p>Representation of a single element in a formula: either a function or an operator.</p> <p>If the Element represents a function, its parameter is the arity of the function (only unary or binary supported) If the Element represents an operator, its parameters are: <code>arity</code>, <code>precedence</code>, and <code>associativity</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element.arity","title":"arity  <code>instance-attribute</code>","text":"<pre><code>arity = arity\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element.associativity","title":"associativity  <code>instance-attribute</code>","text":"<pre><code>associativity = associativity\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description = description\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element.method","title":"method  <code>instance-attribute</code>","text":"<pre><code>method = method\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element.precedence","title":"precedence  <code>instance-attribute</code>","text":"<pre><code>precedence = precedence\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type = type if isinstance(type, Type) else Type[type]\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element-classes","title":"Classes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element.Type","title":"Type","text":"<p>               Bases: <code>Enum</code></p> <p>Type of function element.</p> Attributes\u00b6 <code></code> Function <code>class-attribute</code> <code>instance-attribute</code> \u00b6 <pre><code>Function = auto()\n</code></pre> <code></code> Operator <code>class-attribute</code> <code>instance-attribute</code> \u00b6 <pre><code>Operator = auto()\n</code></pre> Functions\u00b6 <code></code> __repr__ \u00b6 <pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the name of the element in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the name of the element in Python.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str,\n    description: str,\n    type: Type | str,\n    method: Callable[..., Scalar],\n    arity: int = 0,\n    precedence: int = 0,\n    associativity: int = -1,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the element</p> required <code>description</code> <code>str</code> <p>description of the element</p> required <code>type</code> <code>Type | str</code> <p>type of the element</p> required <code>method</code> <code>Callable[..., Scalar]</code> <p>reference to the function (only supports unary or binary)</p> required <code>arity</code> <code>int</code> <p>number of operands required</p> <code>0</code> <code>precedence</code> <code>int</code> <p>precedence of operators, where higher precedence comes first (see Order of operations)</p> <code>0</code> <code>associativity</code> <code>int</code> <p>precedence of grouping operators in the absence of parentheses (see Operator associativity)</p> <code>-1</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the element in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the element in Python.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element.is_function","title":"is_function","text":"<pre><code>is_function() -&gt; bool\n</code></pre> <p>Return whether the element is a fuzzylite.term.Function.Element.Type.Function.</p> <p>Returns:</p> Type Description <code>bool</code> <p>element is fuzzylite.term.Function.Element.Type.Function</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Element.is_operator","title":"is_operator","text":"<pre><code>is_operator() -&gt; bool\n</code></pre> <p>Return whether the element is a fuzzylite.term.Function.Element.Type.Operator.</p> <p>Returns:</p> Type Description <code>bool</code> <p>element is fuzzylite.term.Function.Element.Type.Operator</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Node","title":"Node","text":"<p>Basic binary tree structure.</p> <p>A node can point to left and right nodes to build a binary tree.</p> <p>A node can represent:</p> <ul> <li>an element (Function or Operator),</li> <li>an input or output variable by name,</li> <li>a constant floating-point value</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Node-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Node.constant","title":"constant  <code>instance-attribute</code>","text":"<pre><code>constant = constant\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Node.element","title":"element  <code>instance-attribute</code>","text":"<pre><code>element = element\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Node.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left = left\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Node.right","title":"right  <code>instance-attribute</code>","text":"<pre><code>right = right\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Node.variable","title":"variable  <code>instance-attribute</code>","text":"<pre><code>variable = variable\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Node-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Node.__init__","title":"__init__","text":"<pre><code>__init__(\n    element: Element | None = None,\n    variable: str = \"\",\n    constant: float = nan,\n    left: Node | None = None,\n    right: Node | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element | None</code> <p>node refers to a function or an operator</p> <code>None</code> <code>variable</code> <code>str</code> <p>node refers to a variable by name</p> <code>''</code> <code>constant</code> <code>float</code> <p>node refers to an arbitrary floating-point value</p> <code>nan</code> <code>right</code> <code>Node | None</code> <p>node has an expression tree on the right</p> <code>None</code> <code>left</code> <code>Node | None</code> <p>node has an expression tree on the left.</p> <code>None</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Node.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the node in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the node in Python.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Node.evaluate","title":"evaluate","text":"<pre><code>evaluate(local_variables: dict[str, Scalar] | None = None) -&gt; Scalar\n</code></pre> <p>Recursively evaluate the node and substitute the variables with the given values (if any).</p> <p>Parameters:</p> Name Type Description Default <code>local_variables</code> <code>dict[str, Scalar] | None</code> <p>map of substitutions of variable names for scalars</p> <code>None</code> <p>Returns:</p> Type Description <code>Scalar</code> <p>scalar as the result of the evaluation.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when function arity is not met with left and right nodes</p> <code>ValueError</code> <p>when the node represents a variable but the map does not contain its substitution value</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Node.infix","title":"infix","text":"<pre><code>infix(node: Node | None = None) -&gt; str\n</code></pre> <p>Return the infix notation of the node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node | None</code> <p>node in the expression tree (defaults to <code>self</code> if <code>None</code>)</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>infix notation of the node.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Node.postfix","title":"postfix","text":"<pre><code>postfix(node: Node | None = None) -&gt; str\n</code></pre> <p>Return the postfix notation of the node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node | None</code> <p>node in the expression tree (defaults to <code>self</code> if <code>None</code>)</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>postfix notation of the node.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Node.prefix","title":"prefix","text":"<pre><code>prefix(node: Node | None = None) -&gt; str\n</code></pre> <p>Return the prefix notation of the node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node | None</code> <p>node in the expression tree (defaults to <code>self</code> if <code>None</code>)</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>prefix notation of the node.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.Node.value","title":"value","text":"<pre><code>value() -&gt; str\n</code></pre> <p>Return the value of the node based on its contents.</p> <p>The value of the node is the first of:</p> <ol> <li>operation or function name if there is an element</li> <li>variable name if it is not empty</li> <li>constant value.</li> </ol> <p>Returns:</p> Type Description <code>str</code> <p>value of the node based on its contents.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    formula: str = \"\",\n    engine: Engine | None = None,\n    variables: dict[str, Scalar] | None = None,\n    load: bool = False,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the term</p> <code>''</code> <code>formula</code> <code>str</code> <p>formula defining the membership function</p> <code>''</code> <code>engine</code> <code>Engine | None</code> <p>engine to which the Function can have access</p> <code>None</code> <code>variables</code> <code>dict[str, Scalar] | None</code> <p>map of substitution variables</p> <code>None</code> <code>load</code> <code>bool</code> <p>load the function on creation.</p> <code>False</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the term in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in Python.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>formula</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(name: str, formula: str, engine: Engine | None = None) -&gt; Function\n</code></pre> <p>Create and configure a function term.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the term</p> required <code>formula</code> <code>str</code> <p>formula defining the membership function</p> required <code>engine</code> <code>Engine | None</code> <p>engine to which the Function can have access</p> <code>None</code> <p>Returns:</p> Type Description <code>Function</code> <p>configured function term</p> <p>Raises:</p> Type Description <code>SyntaxError</code> <p>when the formula has a syntax error</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.evaluate","title":"evaluate","text":"<pre><code>evaluate(variables: dict[str, Scalar] | None = None) -&gt; Scalar\n</code></pre> <p>Evaluate the function value using the map of variable substitutions (if any).</p> <p>Parameters:</p> Name Type Description Default <code>variables</code> <code>dict[str, Scalar] | None</code> <p>map containing substitutions of variable names for values</p> <code>None</code> <p>Returns:</p> Type Description <code>Scalar</code> <p>function value using the map of variable substitutions (if any).</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>when the function is not loaded</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.format_infix","title":"format_infix  <code>classmethod</code>","text":"<pre><code>format_infix(formula: str) -&gt; str\n</code></pre> <p>Format the formula expressed in infix notation.</p> <p>Parameters:</p> Name Type Description Default <code>formula</code> <code>str</code> <p>formula expressed in infix notation.</p> required <p>Returns:</p> Type Description <code>str</code> <p>formatted formula expressed in infix notation.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.infix_to_postfix","title":"infix_to_postfix  <code>classmethod</code>","text":"<pre><code>infix_to_postfix(formula: str) -&gt; str\n</code></pre> <p>Convert the formula to postfix notation.</p> <p>Parameters:</p> Name Type Description Default <code>formula</code> <code>str</code> <p>right-hand side of an equation expressed in infix notation</p> required <p>Returns:</p> Type Description <code>str</code> <p>formula in postfix notation</p> <p>Raises:</p> Type Description <code>SyntaxError</code> <p>when the formula has syntax errors.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.is_loaded","title":"is_loaded","text":"<pre><code>is_loaded() -&gt; bool\n</code></pre> <p>Return whether the function is loaded.</p> <p>Returns:</p> Type Description <code>bool</code> <p>function is loaded.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.load","title":"load","text":"<pre><code>load() -&gt; None\n</code></pre> <p>Load the function using the formula expressed in infix notation.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>The value of variable <code>x</code> will be added to the <code>variables</code> map, and so will the current values of the input variables and output variables if the engine has been set.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(f(x)\\)</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when an input or output variable is named <code>x</code></p> <code>ValueError</code> <p>when the map of variables contain names of input or output variables</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>formula</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(formula: str) -&gt; Node\n</code></pre> <p>Create a node as a binary expression tree of the formula.</p> <p>Parameters:</p> Name Type Description Default <code>formula</code> <code>str</code> <p>right-hand side of an equation expressed in infix notation</p> required <p>Returns:</p> Type Description <code>Node</code> <p>node as a binary expression tree of the formula</p> <p>Raises:</p> Type Description <code>SyntaxError</code> <p>when the formula has syntax errors.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.unload","title":"unload","text":"<pre><code>unload() -&gt; None\n</code></pre> <p>Unload the function and reset the map of substitution variables.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Function.update_reference","title":"update_reference","text":"<pre><code>update_reference(engine: Engine | None) -&gt; None\n</code></pre> <p>Update the reference to the engine (if any) and load the function if it is not loaded.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine | None</code> <p>engine to which the term belongs to.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Gaussian","title":"Gaussian","text":"<p>               Bases: <code>Term</code></p> <p>Extended term that represents the gaussian curve membership function.</p> <p></p> Equation <p>\\(\\mu(x) = h \\exp\\left(-\\dfrac{(x-\\mu)^2}{2\\sigma^2}\\right)\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(\\mu\\): mean of the Gaussian</li> <li>\\(\\sigma\\): standard deviation of the Gaussian</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Gaussian-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Gaussian.mean","title":"mean  <code>instance-attribute</code>","text":"<pre><code>mean = mean\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Gaussian.standard_deviation","title":"standard_deviation  <code>instance-attribute</code>","text":"<pre><code>standard_deviation = standard_deviation\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Gaussian-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Gaussian.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', mean: float = nan, standard_deviation: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>mean</code> <code>float</code> <p>mean of the Gaussian</p> <code>nan</code> <code>standard_deviation</code> <code>float</code> <p>standard deviation of the Gaussian</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term.</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Gaussian.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>mean standard_deviation [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Gaussian.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = h \\exp\\left(-\\dfrac{(x-\\mu)^2}{2\\sigma^2}\\right)\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Gaussian.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>mean standard_deviation [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.GaussianProduct","title":"GaussianProduct","text":"<p>               Bases: <code>Term</code></p> <p>Extended term that represents the two-sided gaussian membership function.</p> <p></p> Equation <p>\\(a = \\begin{cases} \\mbox{Gaussian}^{\\mu_a}_{\\sigma_a}(x) &amp; \\mbox{if } x &lt; \\mu_a \\cr 1.0 &amp; \\mbox{otherwise} \\cr \\end{cases}\\)</p> <p>\\(b = \\begin{cases} \\mbox{Gaussian}^{\\mu_b}_{\\sigma_b}(x) &amp; \\mbox{if } x &gt; \\mu_b \\cr 1.0 &amp; \\mbox{otherwise} \\cr \\end{cases}\\)</p> <p>\\(\\mu(x) = h (a \\times b)\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(\\mu_a, \\sigma_a\\): mean and standard deviation of the first Gaussian</li> <li>\\(\\mu_b, \\sigma_b\\): mean and standard deviation of the second Gaussian</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.GaussianProduct-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.GaussianProduct.mean_a","title":"mean_a  <code>instance-attribute</code>","text":"<pre><code>mean_a = mean_a\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.GaussianProduct.mean_b","title":"mean_b  <code>instance-attribute</code>","text":"<pre><code>mean_b = mean_b\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.GaussianProduct.standard_deviation_a","title":"standard_deviation_a  <code>instance-attribute</code>","text":"<pre><code>standard_deviation_a = standard_deviation_a\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.GaussianProduct.standard_deviation_b","title":"standard_deviation_b  <code>instance-attribute</code>","text":"<pre><code>standard_deviation_b = standard_deviation_b\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.GaussianProduct-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.GaussianProduct.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    mean_a: float = nan,\n    standard_deviation_a: float = nan,\n    mean_b: float = nan,\n    standard_deviation_b: float = nan,\n    height: float = 1.0,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>mean_a</code> <code>float</code> <p>mean of the first Gaussian</p> <code>nan</code> <code>standard_deviation_a</code> <code>float</code> <p>standard deviation of the first Gaussian</p> <code>nan</code> <code>mean_b</code> <code>float</code> <p>mean of the second Gaussian</p> <code>nan</code> <code>standard_deviation_b</code> <code>float</code> <p>standard deviation of the second Gaussian</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.GaussianProduct.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>mean_a standard_deviation_a mean_b standard_deviation_b [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.GaussianProduct.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = h (a \\times b)\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.GaussianProduct.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>mean_a standard_deviation_a mean_b standard_deviation_b [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Linear","title":"Linear","text":"<p>               Bases: <code>Term</code></p> <p>Linear polynomial term.</p> <p></p> Equation <p>\\(\\mu(x)= \\mathbf{c}\\mathbf{v}+k = \\sum_i c_iv_i + k\\)</p> <p>where</p> <ul> <li>\\(x\\): irrelevant</li> <li>\\(\\mathbf{v}\\): vector of values from the input variables</li> <li>\\(\\mathbf{c}\\) vector of coefficients for the input variables</li> <li>\\(k\\) is a constant</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Linear-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Linear.coefficients","title":"coefficients  <code>instance-attribute</code>","text":"<pre><code>coefficients = list(coefficients or [])\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Linear.engine","title":"engine  <code>instance-attribute</code>","text":"<pre><code>engine = engine\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Linear-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Linear.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', coefficients: Sequence[float] | None = None, engine: Engine | None = None) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the term</p> <code>''</code> <code>coefficients</code> <code>Sequence[float] | None</code> <p>coefficients for the input variables (plus constant \\(k\\), optionally)</p> <code>None</code> <code>engine</code> <code>Engine | None</code> <p>engine with the input variables</p> <code>None</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Linear.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the term in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in Python.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Linear.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>coefficients <code>c1 ... cn k</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Linear.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x)=\\sum_i c_iv_i + k\\)</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when the number of coefficients (+1) is different from the number of input variables</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Linear.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>c1 ... cn k</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Linear.update_reference","title":"update_reference","text":"<pre><code>update_reference(engine: Engine | None) -&gt; None\n</code></pre> <p>Set the reference to the engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine | None</code> <p>engine with the input variables</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.PiShape","title":"PiShape","text":"<p>               Bases: <code>Term</code></p> <p>Extended term that represents the Pi-shaped membership function.</p> <p></p> Equation <p>\\(\\mu(x) = h \\left(\\mbox{SShape}_{a}^{b}(x) \\times \\mbox{ZShape}_{c}^{d}(x)\\right)\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(a, b\\): bottom left and top left parameters of the PiShape</li> <li>\\(c, d\\): top right and bottom right parameters of the PiShape</li> </ul> related <ul> <li>fuzzylite.term.SShape</li> <li>fuzzylite.term.ZShape</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.PiShape-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.PiShape.bottom_left","title":"bottom_left  <code>instance-attribute</code>","text":"<pre><code>bottom_left = bottom_left\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.PiShape.bottom_right","title":"bottom_right  <code>instance-attribute</code>","text":"<pre><code>bottom_right = bottom_right\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.PiShape.top_left","title":"top_left  <code>instance-attribute</code>","text":"<pre><code>top_left = top_left\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.PiShape.top_right","title":"top_right  <code>instance-attribute</code>","text":"<pre><code>top_right = top_right\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.PiShape-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.PiShape.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    bottom_left: float = nan,\n    top_left: float = nan,\n    top_right: float = nan,\n    bottom_right: float = nan,\n    height: float = 1.0,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>bottom_left</code> <code>float</code> <p>bottom-left value of the PiShape</p> <code>nan</code> <code>top_left</code> <code>float</code> <p>top-left value of the PiShape</p> <code>nan</code> <code>top_right</code> <code>float</code> <p>top-right value of the PiShape</p> <code>nan</code> <code>bottom_right</code> <code>float</code> <p>bottom-right value of the PiShape</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term.</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.PiShape.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>bottom_left top_left top_right bottom_right [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.PiShape.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = h \\left(\\mbox{SShape}_{a}^{b}(x) \\times \\mbox{ZShape}_{c}^{d}(x)\\right)\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.PiShape.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>bottom_left top_left top_right bottom_right [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Ramp","title":"Ramp","text":"<p>               Bases: <code>Term</code></p> <p>Edge term that represents the ramp membership function.</p> <p></p> Equation <p>\\(\\mu(x) =  \\begin{cases}     h \\dfrac{x - s} {e - s} &amp; \\mbox{if } s &lt; x &lt; e \\cr     h \\dfrac{s - x} {s - e} &amp; \\mbox{if } e &lt; x &lt; s \\cr     h &amp; \\mbox{if } s &lt; e \\wedge x \\ge e \\cr     h &amp; \\mbox{if } s &gt; e \\wedge x \\le e \\cr     0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(s\\): start of the Ramp</li> <li>\\(e\\): end of the Ramp</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Ramp-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Ramp.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end = end\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Ramp.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start = start\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Ramp-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Ramp.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', start: float = nan, end: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>start</code> <code>float</code> <p>start of the Ramp</p> <code>nan</code> <code>end</code> <code>float</code> <p>end of the Ramp</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Ramp.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>start end [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Ramp.is_monotonic","title":"is_monotonic","text":"<pre><code>is_monotonic() -&gt; bool\n</code></pre> <p>Return <code>True</code> because the term is monotonic.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code></p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Ramp.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) =  \\begin{cases} h \\dfrac{x - s} {e - s} &amp; \\mbox{if } s &lt; x &lt; e \\cr h \\dfrac{s - x} {s - e} &amp; \\mbox{if } e &lt; x &lt; s \\cr h &amp; \\mbox{if } s &lt; e \\wedge x \\ge e \\cr h &amp; \\mbox{if } s &gt; e \\wedge x \\le e \\cr 0 &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Ramp.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>start end [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Ramp.tsukamoto","title":"tsukamoto","text":"<pre><code>tsukamoto(y: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the tsukamoto value of the monotonic term for activation degree \\(y\\).</p> Equation <p>\\(y = h \\dfrac{x - s} {e - s}\\)</p> <p>\\(x = s + (e-s) \\dfrac{y}{h}\\)</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>Scalar</code> <p>activation degree</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x = s + (e-s) \\dfrac{y}{h}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Rectangle","title":"Rectangle","text":"<p>               Bases: <code>Term</code></p> <p>Basic term that represents the rectangle membership function.</p> <p></p> Equation <p>\\(\\mu(x) = \\begin{cases}     h &amp; \\mbox{if } s \\le x \\le e \\cr     0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(s\\): start of the Rectangle</li> <li>\\(e\\): end of the Rectangle</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Rectangle-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Rectangle.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end = end\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Rectangle.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start = start\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Rectangle-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Rectangle.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', start: float = nan, end: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>start</code> <code>float</code> <p>start of the Rectangle</p> <code>nan</code> <code>end</code> <code>float</code> <p>end of the Rectangle</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Rectangle.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>start end [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Rectangle.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\begin{cases} h &amp; \\mbox{if } s \\le x \\le e \\cr 0 &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Rectangle.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>start end [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SShape","title":"SShape","text":"<p>               Bases: <code>Term</code></p> <p>Edge Term that represents the S-shaped membership function.</p> <p></p> Equation: <p>\\(\\mu(x) = \\begin{cases}     0 &amp; \\mbox{if } x \\leq s \\cr     2h \\left(\\dfrac{x - s}{e-s}\\right)^2 &amp; \\mbox{if } s &lt; x \\leq \\dfrac{s+e}{2}\\cr     h - 2h\\left(\\dfrac{x - e}{e-s}\\right)^2 &amp; \\mbox{if } \\dfrac{s+e}{2} &lt; x &lt; e\\cr     h &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(s\\): start of the SShape</li> <li>\\(e\\): end of the SShape</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SShape-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SShape.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end = end\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SShape.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start = start\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SShape-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SShape.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', start: float = nan, end: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>start</code> <code>float</code> <p>start of the SShape</p> <code>nan</code> <code>end</code> <code>float</code> <p>end of the SShape</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SShape.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>start end [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SShape.is_monotonic","title":"is_monotonic","text":"<pre><code>is_monotonic() -&gt; bool\n</code></pre> <p>Return <code>True</code> because the term is monotonic.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code></p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SShape.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\begin{cases} 0 &amp; \\mbox{if } x \\leq s \\cr 2h \\left(\\dfrac{x - s}{e-s}\\right)^2 &amp; \\mbox{if } s &lt; x \\leq \\dfrac{s+e}{2}\\cr h - 2h\\left(\\dfrac{x - e}{e-s}\\right)^2 &amp; \\mbox{if } \\dfrac{s+e}{2} &lt; x &lt; e\\cr h &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SShape.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>start end [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SShape.tsukamoto","title":"tsukamoto","text":"<pre><code>tsukamoto(y: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the tsukamoto value of the monotonic term for activation degree \\(y\\).</p> Equation <p>\\(y = \\begin{cases} 0 &amp; \\mbox{if } x \\leq s \\cr 2h \\left(\\dfrac{x - s}{e-s}\\right)^2 &amp; \\mbox{if } s &lt; x \\leq \\dfrac{s+e}{2}\\cr h - 2h\\left(\\dfrac{x - e}{e-s}\\right)^2 &amp; \\mbox{if } \\dfrac{s+e}{2} &lt; x &lt; e\\cr h &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>\\(x = \\begin{cases}     s + (e-s) \\sqrt{\\dfrac{y}{2h}} &amp; \\mbox{if } y \\le \\dfrac{h}{2} \\cr     e - (e-s) \\sqrt{\\dfrac{h-y}{2h}} &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>Scalar</code> <p>activation degree</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x = \\begin{cases} s + (e-s) \\sqrt{\\dfrac{y}{2h}} &amp; \\mbox{if } y \\le \\dfrac{h}{2} \\cr e - (e-s) \\sqrt{\\dfrac{h-y}{2h}} &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SemiEllipse","title":"SemiEllipse","text":"<p>               Bases: <code>Term</code></p> <p>Basic term that represents the semi-ellipse membership function.</p> <p></p> Equation <p>\\(\\mu(x) = h \\dfrac{\\sqrt{r^2- (x-c)^2}}{r}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(r\\): radius of the SemiEllipse</li> <li>\\(c\\): center of the SemiEllipse</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SemiEllipse-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SemiEllipse.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end = end\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SemiEllipse.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start = start\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SemiEllipse-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SemiEllipse.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', start: float = nan, end: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>start</code> <code>float</code> <p>start of the SemiEllipse</p> <code>nan</code> <code>end</code> <code>float</code> <p>end of the SemiEllipse</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term.</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SemiEllipse.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>start end [height]</code></p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SemiEllipse.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = h \\dfrac{\\sqrt{r^2- (x-c)^2}}{r}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SemiEllipse.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>start end [height]</code></p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Sigmoid","title":"Sigmoid","text":"<p>               Bases: <code>Term</code></p> <p>Edge Term that represents the sigmoid membership function.</p> <p></p> Equation <p>\\(\\mu(x) = \\dfrac{h}{1 + \\exp(-s(x-i))}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(s\\): slope of the Sigmoid</li> <li>\\(i\\): inflection of the Sigmoid</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Sigmoid-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Sigmoid.inflection","title":"inflection  <code>instance-attribute</code>","text":"<pre><code>inflection = inflection\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Sigmoid.slope","title":"slope  <code>instance-attribute</code>","text":"<pre><code>slope = slope\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Sigmoid-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Sigmoid.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', inflection: float = nan, slope: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>inflection</code> <code>float</code> <p>inflection of the Sigmoid</p> <code>nan</code> <code>slope</code> <code>float</code> <p>slope of the Sigmoid</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Sigmoid.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>inflection slope [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Sigmoid.is_monotonic","title":"is_monotonic","text":"<pre><code>is_monotonic() -&gt; bool\n</code></pre> <p>Return <code>True</code> because the term is monotonic.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code></p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Sigmoid.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\dfrac{h}{1 + \\exp(-s(x-i))}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Sigmoid.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>inflection slope [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Sigmoid.tsukamoto","title":"tsukamoto","text":"<pre><code>tsukamoto(y: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the tsukamoto value of the monotonic term for activation degree \\(y\\).</p> Equation <p>\\(y=\\dfrac{h}{1 + \\exp(-s(x-i))}\\)</p> <p>\\(x=i\\dfrac{\\log{\\left(\\dfrac{h}{y}-1\\right)}}{-s}\\)</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>Scalar</code> <p>activation degree</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x=i\\dfrac{\\log{\\left(\\dfrac{h}{y}-1\\right)}}{-s}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidDifference","title":"SigmoidDifference","text":"<p>               Bases: <code>Term</code></p> <p>Extended Term that represents the difference between two sigmoid membership functions.</p> <p></p> Equation <p>\\(a = \\mbox{Sigmoid}_\\mbox{left}^\\mbox{rise}(x)\\)</p> <p>\\(b = \\mbox{Sigmoid}_\\mbox{right}^\\mbox{fall}(x)\\)</p> <p>\\(\\mu(x) = h (a-b)\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(\\mbox{left}, \\mbox{rise}\\): inflection and slope of left Sigmoid</li> <li>\\(\\mbox{right}, \\mbox{fall}\\): inflection and slope of right Sigmoid</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidDifference-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidDifference.falling","title":"falling  <code>instance-attribute</code>","text":"<pre><code>falling = falling\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidDifference.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left = left\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidDifference.right","title":"right  <code>instance-attribute</code>","text":"<pre><code>right = right\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidDifference.rising","title":"rising  <code>instance-attribute</code>","text":"<pre><code>rising = rising\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidDifference-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidDifference.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    left: float = nan,\n    rising: float = nan,\n    falling: float = nan,\n    right: float = nan,\n    height: float = 1.0,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>left</code> <code>float</code> <p>inflection of the left Sigmoid</p> <code>nan</code> <code>rising</code> <code>float</code> <p>slope of the left Sigmoid</p> <code>nan</code> <code>falling</code> <code>float</code> <p>slope of the right Sigmoid</p> <code>nan</code> <code>right</code> <code>float</code> <p>inflection of the right Sigmoid</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term.</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidDifference.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>left rising falling right [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidDifference.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = h (a-b)\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidDifference.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>left rising falling right [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidProduct","title":"SigmoidProduct","text":"<p>               Bases: <code>Term</code></p> <p>Extended Term that represents the product of two sigmoid membership functions.</p> <p></p> Equation <p>\\(a = \\mbox{Sigmoid}_\\mbox{left}^\\mbox{rise}(x)\\)</p> <p>\\(b = \\mbox{Sigmoid}_\\mbox{right}^\\mbox{fall}(x)\\)</p> <p>\\(\\mu(x) = h (a \\times b)\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(\\mbox{left}, \\mbox{rise}\\): inflection and slope of left Sigmoid</li> <li>\\(\\mbox{right}, \\mbox{fall}\\): inflection and slope of right Sigmoid</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidProduct-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidProduct.falling","title":"falling  <code>instance-attribute</code>","text":"<pre><code>falling = falling\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidProduct.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left = left\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidProduct.right","title":"right  <code>instance-attribute</code>","text":"<pre><code>right = right\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidProduct.rising","title":"rising  <code>instance-attribute</code>","text":"<pre><code>rising = rising\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidProduct-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidProduct.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    left: float = nan,\n    rising: float = nan,\n    falling: float = nan,\n    right: float = nan,\n    height: float = 1.0,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>left</code> <code>float</code> <p>inflection of the left Sigmoid</p> <code>nan</code> <code>rising</code> <code>float</code> <p>slope of the left Sigmoid</p> <code>nan</code> <code>falling</code> <code>float</code> <p>slope of the right Sigmoid</p> <code>nan</code> <code>right</code> <code>float</code> <p>inflection of the right Sigmoid</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term.</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidProduct.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>left rising falling right [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidProduct.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = h (a \\times b)\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.SigmoidProduct.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>left rising falling right [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Spike","title":"Spike","text":"<p>               Bases: <code>Term</code></p> <p>Extended Term that represents the spike membership function.</p> <p></p> Equation <p>\\(\\mu(x)=h \\exp\\left(-\\left|\\dfrac{10}{w} (x - c)\\right|\\right)\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(w\\): width of the Spike</li> <li>\\(c\\): center of the Spike</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Spike-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Spike.center","title":"center  <code>instance-attribute</code>","text":"<pre><code>center = center\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Spike.width","title":"width  <code>instance-attribute</code>","text":"<pre><code>width = width\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Spike-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Spike.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', center: float = nan, width: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>center</code> <code>float</code> <p>center of the Spike</p> <code>nan</code> <code>width</code> <code>float</code> <p>width of the Spike</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Spike.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>center width [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Spike.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x)=h \\exp\\left(-\\left|\\dfrac{10}{w} (x - c)\\right|\\right)\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Spike.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>center width [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term","title":"Term","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for linguistic terms.</p> <p>The linguistic terms in this library can be divided into four groups, namely <code>basic</code>, <code>extended</code>, <code>edge</code>, and <code>function</code>.</p> <code>basic/function</code> <code>extended</code> <code>edge</code> fuzzylite.term.Discrete fuzzylite.term.Bell fuzzylite.term.Arc fuzzylite.term.Rectangle fuzzylite.term.Cosine fuzzylite.term.Binary fuzzylite.term.SemiEllipse fuzzylite.term.Gaussian fuzzylite.term.Concave fuzzylite.term.Triangle fuzzylite.term.GaussianProduct fuzzylite.term.Ramp fuzzylite.term.Trapezoid fuzzylite.term.PiShape fuzzylite.term.Sigmoid fuzzylite.term.Constant fuzzylite.term.SigmoidDifference fuzzylite.term.SShape     - fuzzylite.term.ZShape fuzzylite.term.Linear fuzzylite.term.SigmoidProduct fuzzylite.term.SShape fuzzylite.term.Function fuzzylite.term.Spike fuzzylite.term.ZShape related <ul> <li>fuzzylite.variable.Variable</li> <li>fuzzylite.variable.InputVariable</li> <li>fuzzylite.variable.OutputVariable</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term.height","title":"height  <code>instance-attribute</code>","text":"<pre><code>height = height\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the term</p> <code>''</code> <code>height</code> <code>float</code> <p>height of the term.</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the term in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in Python.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the term in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in the FuzzyLite Language.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term._parameters","title":"_parameters","text":"<pre><code>_parameters(*args: object) -&gt; str\n</code></pre> <p>Concatenate the arguments and the height.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>object</code> <p>arguments to configure the term</p> <code>()</code> <p>Returns:</p> Type Description <code>str</code> <p>parameters concatenated and an optional <code>height</code> at the end.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term._parse","title":"_parse","text":"<pre><code>_parse(required: int, parameters: str, *, height: bool = True) -&gt; list[float]\n</code></pre> <p>Parse the required values from the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>required</code> <code>int</code> <p>number of values to parse</p> required <code>parameters</code> <code>str</code> <p>text containing the values</p> required <code>height</code> <code>bool</code> <p>whether <code>parameters</code> contains an extra value for the height of the term</p> <code>True</code> <p>Returns:</p> Type Description <code>list[float]</code> <p>list of floating-point values parsed from the parameters.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>The <code>parameters</code> is a list of space-separated values, with an optional value at the end to set the <code>height</code> (defaults to <code>1.0</code> if absent)</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>space-separated parameter values to configure the term.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term.discretize","title":"discretize","text":"<pre><code>discretize(start: float, end: float, resolution: int = 10, midpoints: bool = True) -&gt; Discrete\n</code></pre> <p>Discretize the term.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>start of the range</p> required <code>end</code> <code>float</code> <p>end of the range</p> required <code>resolution</code> <code>int</code> <p>number of points to discretize</p> <code>10</code> <code>midpoints</code> <code>bool</code> <p>use midpoints method or include start and end.</p> <code>True</code> related <ul> <li>fuzzylite.operation.Operation.midpoints</li> <li>numpy.linspace</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term.is_monotonic","title":"is_monotonic","text":"<pre><code>is_monotonic() -&gt; bool\n</code></pre> <p>Return whether the term is monotonic.</p> <p>Returns:</p> Type Description <code>bool</code> <p>False.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term.membership","title":"membership  <code>abstractmethod</code>","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>membership function value \\(\\mu(x)\\).</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p>list of space-separated parameters of the term.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term.tsukamoto","title":"tsukamoto","text":"<pre><code>tsukamoto(y: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the tsukamoto value of the monotonic term for activation degree \\(y\\).</p> Equation <p>\\(g(y) = \\{ z \\in\\mathbb{R} : \\mu(z) = y \\}\\)</p> Warning <p>Raises <code>RuntimeError</code> because the term does not support Tsukamoto</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>Scalar</code> <p>activation degree</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>because the term does not support Tsukamoto</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Term.update_reference","title":"update_reference","text":"<pre><code>update_reference(engine: Engine | None) -&gt; None\n</code></pre> <p>Update the reference (if any) to the engine the term belongs to.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine | None</code> <p>engine to which the term belongs to.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Trapezoid","title":"Trapezoid","text":"<p>               Bases: <code>Term</code></p> <p>Basic Term that represents the trapezoid membership function.</p> <p></p> Equation <p>\\(\\mu(x)= \\begin{cases}     0 &amp; \\mbox{if } x &lt; a \\vee x &gt; d\\cr     h \\dfrac{x - a}{b - a}  &amp; \\mbox{if } a \\le x &lt; b\\cr     h &amp; \\mbox{if } (b \\le x \\le c) \\vee (a=-\\infty \\wedge x &lt; b) \\vee (d=\\infty \\wedge x &gt; c) \\cr     h \\dfrac{d - x}{d - c} &amp; \\mbox{if } c &lt; x \\le d\\cr     \\text{NaN} &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(a\\): bottom left vertex of the Trapezoid</li> <li>\\(b\\): top left vertex of the Trapezoid</li> <li>\\(c\\): top right vertex of the Trapezoid</li> <li>\\(d\\): bottom right vertex of the trapezoid</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Trapezoid-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Trapezoid.bottom_left","title":"bottom_left  <code>instance-attribute</code>","text":"<pre><code>bottom_left = bottom_left\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Trapezoid.bottom_right","title":"bottom_right  <code>instance-attribute</code>","text":"<pre><code>bottom_right = bottom_right\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Trapezoid.top_left","title":"top_left  <code>instance-attribute</code>","text":"<pre><code>top_left = top_left\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Trapezoid.top_right","title":"top_right  <code>instance-attribute</code>","text":"<pre><code>top_right = top_right\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Trapezoid-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Trapezoid.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    bottom_left: float = nan,\n    top_left: float = nan,\n    top_right: float = nan,\n    bottom_right: float = nan,\n    height: float = 1.0,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>bottom_left</code> <code>float</code> <p>first vertex of the Trapezoid</p> <code>nan</code> <code>top_left</code> <code>float</code> <p>second vertex of the Trapezoid</p> <code>nan</code> <code>top_right</code> <code>float</code> <p>third vertex of the Trapezoid</p> <code>nan</code> <code>bottom_right</code> <code>float</code> <p>fourth vertex of the Trapezoid</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Trapezoid.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>bottom_left top_left top_right bottom_right [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Trapezoid.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x)= \\begin{cases} 0 &amp; \\mbox{if } x &lt; a \\vee x &gt; d\\cr h \\dfrac{x - a}{b - a}  &amp; \\mbox{if } a \\le x &lt; b\\cr h &amp; \\mbox{if } (b \\le x \\le c) \\vee (a=-\\infty \\wedge x &lt; b) \\vee (d=\\infty \\wedge x &gt; c) \\cr h \\dfrac{d - x}{d - c} &amp; \\mbox{if } c &lt; x \\le d\\cr \\text{NaN} &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Trapezoid.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>bottom_left top_left top_right bottom_right [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Triangle","title":"Triangle","text":"<p>               Bases: <code>Term</code></p> <p>Basic Term that represents the triangle membership function.</p> <p></p> Equation <p>\\(\\mu(x)= \\begin{cases}     0 &amp; \\mbox{if } x &lt; a \\vee x &gt; c \\cr     h &amp; \\mbox{if } (x = b) \\vee (a=-\\infty \\wedge x &lt; b) \\vee (c=\\infty \\wedge x &gt; b) \\cr     h \\dfrac{x - a}{b - a} &amp; \\mbox{if } a \\le x &lt; b \\cr     h \\dfrac{c - x}{c - b} &amp; \\mbox{if } b &lt; x \\le c \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(a\\): left vertex of the Triangle</li> <li>\\(b\\): top vertex of the Triangle</li> <li>\\(c\\): right vertex of the Triangle</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Triangle-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Triangle.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left = left\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Triangle.right","title":"right  <code>instance-attribute</code>","text":"<pre><code>right = right\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Triangle.top","title":"top  <code>instance-attribute</code>","text":"<pre><code>top = top\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Triangle-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Triangle.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', left: float = nan, top: float = nan, right: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>left</code> <code>float</code> <p>first vertex of the Triangle</p> <code>nan</code> <code>top</code> <code>float</code> <p>second vertex of the Triangle</p> <code>nan</code> <code>right</code> <code>float</code> <p>third vertex of the Triangle</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Triangle.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>left top right [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Triangle.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x)= \\begin{cases} 0 &amp; \\mbox{if } x &lt; a \\vee x &gt; c \\cr h &amp; \\mbox{if } (x = b) \\vee (a=-\\infty \\wedge x &lt; b) \\vee (c=\\infty \\wedge x &gt; b) \\cr h \\dfrac{x - a}{b - a} &amp; \\mbox{if } a \\le x &lt; b \\cr h \\dfrac{c - x}{c - b} &amp; \\mbox{if } b &lt; x \\le c \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.Triangle.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>left top right [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.ZShape","title":"ZShape","text":"<p>               Bases: <code>Term</code></p> <p>Edge Term that represents the ZShape membership function.</p> <p></p> Equation <p>\\(\\mu(x) = \\begin{cases}     1 &amp; \\mbox{if } x \\leq s \\cr     h - 2h\\left(\\dfrac{x - s}{e-s}\\right)^2 &amp; \\mbox{if }  s &lt; x &lt; \\dfrac{s+e}{2} \\cr     2h \\left(\\dfrac{x - e}{e-s}\\right)^2 &amp; \\mbox{if } \\dfrac{s+e}{2} \\le  x &lt; e\\cr     0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(s\\): start of the ZShape</li> <li>\\(e\\): end of the ZShape</li> </ul>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.ZShape-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.ZShape.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end = end\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.ZShape.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start = start\n</code></pre>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.ZShape-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/term/#fuzzylite.term.ZShape.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', start: float = nan, end: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>start</code> <code>float</code> <p>start of the ZShape</p> <code>nan</code> <code>end</code> <code>float</code> <p>end of the ZShape</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.ZShape.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>start end [height]</code>.</p> required"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.ZShape.is_monotonic","title":"is_monotonic","text":"<pre><code>is_monotonic() -&gt; bool\n</code></pre> <p>Return <code>True</code> because the term is monotonic.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code></p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.ZShape.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\begin{cases} 1 &amp; \\mbox{if } x \\leq s \\cr h - 2h\\left(\\dfrac{x - s}{e-s}\\right)^2 &amp; \\mbox{if }  s &lt; x &lt; \\dfrac{s+e}{2} \\cr 2h \\left(\\dfrac{x - e}{e-s}\\right)^2 &amp; \\mbox{if } \\dfrac{s+e}{2} \\le  x &lt; e\\cr 0 &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.ZShape.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>start end [height]</code>.</p>"},{"location":"fuzzylite/__all__/term/#fuzzylite.term.ZShape.tsukamoto","title":"tsukamoto","text":"<pre><code>tsukamoto(y: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the tsukamoto value of the monotonic term for activation degree \\(y\\).</p> Equation <p>\\(y = \\begin{cases} 1 &amp; \\mbox{if } x \\leq s \\cr h - 2h\\left(\\dfrac{x - s}{e-s}\\right)^2 &amp; \\mbox{if }  s &lt; x &lt; \\dfrac{s+e}{2} \\cr 2h \\left(\\dfrac{x - e}{e-s}\\right)^2 &amp; \\mbox{if } \\dfrac{s+e}{2} \\le  x &lt; e\\cr 0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>\\(x = \\begin{cases}     e + (e-s) \\sqrt{\\dfrac{y}{2h}} &amp; \\mbox{if } y \\le \\dfrac{h}{2} \\cr     s + (e-s) \\sqrt{\\dfrac{h-y}{2h}} &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>Scalar</code> <p>activation degree</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x = \\begin{cases} e + (e-s) \\sqrt{\\dfrac{y}{2h}} &amp; \\mbox{if } y \\le \\dfrac{h}{2} \\cr s + (e-s) \\sqrt{\\dfrac{h-y}{2h}} &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/__all__/types/","title":"Types","text":"<p><code>Array</code> is a type alias to numpy.typing.NDArray <code>Array = numpy.typing.NDArray</code> </p>"},{"location":"fuzzylite/__all__/types/#fuzzylite.types.Scalar","title":"Scalar  <code>module-attribute</code>","text":"<pre><code>Scalar = Union[float, floating[Any], NDArray[floating[Any]]]\n</code></pre>"},{"location":"fuzzylite/__all__/types/#fuzzylite.types.ScalarArray","title":"ScalarArray  <code>module-attribute</code>","text":"<pre><code>ScalarArray = NDArray[floating[Any]]\n</code></pre>"},{"location":"fuzzylite/__all__/variable/","title":"Variable","text":""},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.InputVariable","title":"InputVariable","text":"<p>               Bases: <code>Variable</code></p> <p>Variable to represent the input of a fuzzy logic controller.</p> related <ul> <li>fuzzylite.variable.Variable</li> <li>fuzzylite.variable.OutputVariable</li> <li>fuzzylite.term.Term</li> </ul>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.InputVariable-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.InputVariable.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    description: str = \"\",\n    enabled: bool = True,\n    minimum: float = -inf,\n    maximum: float = inf,\n    lock_range: bool = False,\n    terms: Iterable[Term] | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the variable</p> <code>''</code> <code>description</code> <code>str</code> <p>description of the variable</p> <code>''</code> <code>enabled</code> <code>bool</code> <p>enable the variable</p> <code>True</code> <code>minimum</code> <code>float</code> <p>minimum value of the variable</p> <code>-inf</code> <code>maximum</code> <code>float</code> <p>maximum value of the variable</p> <code>inf</code> <code>lock_range</code> <code>bool</code> <p>lock the value to the range of the variable</p> <code>False</code> <code>terms</code> <code>Iterable[Term] | None</code> <p>list of terms.</p> <code>None</code>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.InputVariable.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the input variable in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the input variable in the FuzzyLite Language.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.InputVariable.fuzzy_value","title":"fuzzy_value","text":"<pre><code>fuzzy_value() -&gt; Array[str_]\n</code></pre> <p>Return the current fuzzy input value.</p> <p>The fuzzy value is computed by evaluating the membership function of the current input value \\(x\\) for each term \\(i\\), resulting in a fuzzy input value in the form \\(\\tilde{x}=\\sum_i{\\mu_i(x)/i}\\).</p> <p>Returns:</p> Type Description <code>Array[str_]</code> <p>current fuzzy value expressed as \\(\\sum_i{\\mu_i(x)/i}\\).</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable","title":"OutputVariable","text":"<p>               Bases: <code>Variable</code></p> <p>Variable to represents the output of a fuzzy logic controller.</p> <p>During the activation of a rule block, the activated terms of each rule are aggregated in the fuzzy output, which represents a fuzzy set hereinafter referred to as \\(\\tilde{y}\\).</p> <p>The defuzzification of \\(\\tilde{y}\\) converts the fuzzy output value \\(\\tilde{y}\\) into a crisp output value \\(y\\), which is stored as the value of this variable.</p> related <ul> <li>fuzzylite.variable.Variable</li> <li>fuzzylite.variable.InputVariable</li> <li>fuzzylite.term.Term</li> <li>fuzzylite.rule.RuleBlock</li> <li>fuzzylite.norm.SNorm</li> </ul>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.aggregation","title":"aggregation  <code>property</code> <code>writable</code>","text":"<pre><code>aggregation: SNorm | None\n</code></pre> <p>Get/Set the aggregation operator.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.aggregation--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>SNorm | None</code> <p>aggregation operator.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.aggregation--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>SNorm</code> <p>aggregation operator</p> required"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.default_value","title":"default_value  <code>instance-attribute</code>","text":"<pre><code>default_value = default_value\n</code></pre>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.defuzzifier","title":"defuzzifier  <code>instance-attribute</code>","text":"<pre><code>defuzzifier = defuzzifier\n</code></pre>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.fuzzy","title":"fuzzy  <code>instance-attribute</code>","text":"<pre><code>fuzzy = Aggregated(name=name, minimum=minimum, maximum=maximum, aggregation=aggregation)\n</code></pre>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.lock_previous","title":"lock_previous  <code>instance-attribute</code>","text":"<pre><code>lock_previous = lock_previous\n</code></pre>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.maximum","title":"maximum  <code>property</code> <code>writable</code>","text":"<pre><code>maximum: float\n</code></pre> <p>Get/Set the maximum value of the range of the output variable.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.maximum--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>float</code> <p>maximum value of the range of the output variable.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.maximum--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>maximum value of the output variable.</p> required"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.minimum","title":"minimum  <code>property</code> <code>writable</code>","text":"<pre><code>minimum: float\n</code></pre> <p>Get/Set the minimum value of the range of the output variable.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.minimum--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>float</code> <p>minimum value of the range of the output variable.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.minimum--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>minimum value of the output variable.</p> required"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.previous_value","title":"previous_value  <code>instance-attribute</code>","text":"<pre><code>previous_value = nan\n</code></pre>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    description: str = \"\",\n    enabled: bool = True,\n    minimum: float = -inf,\n    maximum: float = inf,\n    lock_range: bool = False,\n    lock_previous: bool = False,\n    default_value: float = nan,\n    aggregation: SNorm | None = None,\n    defuzzifier: Defuzzifier | None = None,\n    terms: Iterable[Term] | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the variable</p> <code>''</code> <code>description</code> <code>str</code> <p>description of the variable</p> <code>''</code> <code>enabled</code> <code>bool</code> <p>enable the variable</p> <code>True</code> <code>minimum</code> <code>float</code> <p>minimum value of the variable</p> <code>-inf</code> <code>maximum</code> <code>float</code> <p>maximum value of the variable</p> <code>inf</code> <code>lock_range</code> <code>bool</code> <p>lock the value to the range of the variable</p> <code>False</code> <code>lock_previous</code> <code>bool</code> <p>lock the previous value of the output variable</p> <code>False</code> <code>default_value</code> <code>float</code> <p>default value of the output variable</p> <code>nan</code> <code>aggregation</code> <code>SNorm | None</code> <p>aggregation operator</p> <code>None</code> <code>defuzzifier</code> <code>Defuzzifier | None</code> <p>defuzzifier of the output variable</p> <code>None</code> <code>terms</code> <code>Iterable[Term] | None</code> <p>list of terms.</p> <code>None</code>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the output variable in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the output variable in Python.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the output variable in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the output variable in the FuzzyLite Language.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.clear","title":"clear","text":"<pre><code>clear() -&gt; None\n</code></pre> <p>Clear the output variable.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify() -&gt; None\n</code></pre> <p>Defuzzify the output variable and store the output value and the previous output value.</p> <p>The final value \\(y\\) depends on the following cascade of properties in order of precedence expressed in the FuzzyLite Language:</p> <ul> <li> <p><code>lock-previous: boolean</code>: when the output value is not finite (ie, <code>nan</code> or <code>inf</code>) and <code>lock-previous: true</code>, then the output value is replaced with the value defuzzified in the previous iteration.</p> </li> <li> <p><code>default: scalar</code>: when the output value is (still) not finite and the default value is not <code>nan</code>, then the output value is replaced with the <code>default</code> value.</p> </li> <li> <p><code>lock-range: boolean</code>: when <code>lock-range: true</code>, the output value is clipped to the range of the variable.</p> </li> </ul>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.OutputVariable.fuzzy_value","title":"fuzzy_value","text":"<pre><code>fuzzy_value() -&gt; Array[str_]\n</code></pre> <p>Return the current fuzzy output value.</p> <p>Returns:</p> Type Description <code>Array[str_]</code> <p>current fuzzy output value.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable","title":"Variable","text":"<p>Base class for linguistic variables.</p> related <ul> <li>fuzzylite.variable.InputVariable</li> <li>fuzzylite.variable.OutputVariable</li> </ul>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable-attributes","title":"Attributes","text":""},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description = description\n</code></pre>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.drange","title":"drange  <code>property</code>","text":"<pre><code>drange: float\n</code></pre> <p>Return the magnitude of the range of the variable.</p> <p>Returns:</p> Type Description <code>float</code> <p><code>maximum - minimum</code></p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.enabled","title":"enabled  <code>instance-attribute</code>","text":"<pre><code>enabled = enabled\n</code></pre>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.lock_range","title":"lock_range  <code>instance-attribute</code>","text":"<pre><code>lock_range = lock_range\n</code></pre>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.maximum","title":"maximum  <code>instance-attribute</code>","text":"<pre><code>maximum = maximum\n</code></pre>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.minimum","title":"minimum  <code>instance-attribute</code>","text":"<pre><code>minimum = minimum\n</code></pre>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.range","title":"range  <code>property</code> <code>writable</code>","text":"<pre><code>range: tuple[float, float]\n</code></pre> <p>Return the range of the variable.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.range--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>tuple[float, float]</code> <p>tuple of (minimum, maximum).</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.range--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>min_max</code> <code>tuple[float, float]</code> <p>range of the variable</p> required"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.terms","title":"terms  <code>instance-attribute</code>","text":"<pre><code>terms = list(terms or [])\n</code></pre>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.value","title":"value  <code>property</code> <code>writable</code>","text":"<pre><code>value: Scalar\n</code></pre> <p>Get/Set the value of the variable.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.value--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>Scalar</code> <p>value of the variable</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.value--setter","title":"Setter","text":"<p>when <code>lock_range = true</code>, the value is clipped to the range of the variable</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Scalar</code> <p>value of the variable</p> required"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable-functions","title":"Functions","text":""},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(item: int | str) -&gt; Term\n</code></pre><pre><code>__getitem__(item: slice) -&gt; list[Term]\n</code></pre> <pre><code>__getitem__(item: int | str | slice) -&gt; Term | list[Term]\n</code></pre> <p>Allow indexing terms by index, name, or slices (eg, <code>engine[\"power\"][\"low\"]</code>).</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>int | str | slice</code> <p>index, name, or slice of terms</p> required <p>Returns:</p> Type Description <code>Term | list[Term]</code> <p>term by index or name, or slice of terms</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    description: str = \"\",\n    enabled: bool = True,\n    minimum: float = -inf,\n    maximum: float = inf,\n    lock_range: bool = False,\n    terms: Iterable[Term] | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the variable</p> <code>''</code> <code>description</code> <code>str</code> <p>description of the variable</p> <code>''</code> <code>enabled</code> <code>bool</code> <p>enable the variable</p> <code>True</code> <code>minimum</code> <code>float</code> <p>minimum value of the range</p> <code>-inf</code> <code>maximum</code> <code>float</code> <p>maximum value of the range</p> <code>inf</code> <code>lock_range</code> <code>bool</code> <p>lock the value to the range of the variable</p> <code>False</code> <code>terms</code> <code>Iterable[Term] | None</code> <p>list of terms</p> <code>None</code>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[Term]\n</code></pre> <p>Return the iterator of the terms.</p> <p>Returns:</p> Type Description <code>Iterator[Term]</code> <p>iterator of the terms</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Return the number of terms.</p> <p>Returns:</p> Type Description <code>int</code> <p>number of terms</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the variable in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the variable in Python.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the variable in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the variable in the FuzzyLite Language.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.clear","title":"clear","text":"<pre><code>clear() -&gt; None\n</code></pre> <p>Clear the variable to its initial state.</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.fuzzify","title":"fuzzify","text":"<pre><code>fuzzify(x: Scalar) -&gt; Array[str_]\n</code></pre> <p>Return the fuzzy representation of \\(x\\).</p> <p>The fuzzy representation is computed by evaluating the membership function of \\(x\\) for each term \\(i\\), resulting in a fuzzy value in the form \\(\\tilde{x}=\\sum_i{\\mu_i(x)/i}\\)</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>value to fuzzify</p> required <p>Returns:</p> Type Description <code>Array[str_]</code> <p>fuzzy value expressed as \\(\\sum_i{\\mu_i(x)/i}\\).</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.highest_membership","title":"highest_membership","text":"<pre><code>highest_membership(x: float) -&gt; Activated | None\n</code></pre> <p>Return the term that has the highest membership function value for \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>value</p> required <p>Returns:</p> Type Description <code>Activated | None</code> <p>term \\(i\\) that maximimizes \\(\\mu_i(x)\\)</p>"},{"location":"fuzzylite/__all__/variable/#fuzzylite.variable.Variable.term","title":"term","text":"<pre><code>term(name_or_index: str | int) -&gt; Term\n</code></pre> <p>Find the term by the name or index.</p> <p>The best performance is \\(O(1)\\) when using indices, and the worst performance is \\(O(n)\\) when using names, where \\(n\\) is the number terms.</p> <p>Parameters:</p> Name Type Description Default <code>name_or_index</code> <code>str | int</code> <p>name or index of the term</p> required <p>Returns:</p> Type Description <code>Term</code> <p>term by the name or index</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when there is no term by the given name.</p> <code>IndexError</code> <p>when the index is out of range</p>"},{"location":"fuzzylite/activation/Activation/","title":"Activation","text":""},{"location":"fuzzylite/activation/Activation/#fuzzylite.activation.Activation","title":"Activation","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for activation methods.</p> <p>Activation methods implement the criteria to activate the rules in a rule block. Activation methods should process every rule and determine whether the rule is to be activated or deactivated.</p> related <ul> <li>fuzzylite.activation.General</li> <li>fuzzylite.activation.First</li> <li>fuzzylite.activation.Last</li> <li>fuzzylite.activation.Highest</li> <li>fuzzylite.activation.Lowest</li> <li>fuzzylite.activation.Proportional</li> <li>fuzzylite.activation.Threshold</li> <li>fuzzylite.factory.ActivationFactory</li> </ul>"},{"location":"fuzzylite/activation/Activation/#fuzzylite.activation.Activation-functions","title":"Functions","text":""},{"location":"fuzzylite/activation/Activation/#fuzzylite.activation.Activation.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Returns the code to construct the activation method in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the activation method in Python.</p>"},{"location":"fuzzylite/activation/Activation/#fuzzylite.activation.Activation.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the activation method in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the activation method in the FuzzyLite Language.</p>"},{"location":"fuzzylite/activation/Activation/#fuzzylite.activation.Activation.activate","title":"activate  <code>abstractmethod</code>","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Implement the activation method of the rule block.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate</p> required"},{"location":"fuzzylite/activation/Activation/#fuzzylite.activation.Activation.assert_is_not_vector","title":"assert_is_not_vector","text":"<pre><code>assert_is_not_vector(activation_degree: Scalar) -&gt; None\n</code></pre> <p>Assert that the activation degree is not a vector.</p> <p>Parameters:</p> Name Type Description Default <code>activation_degree</code> <code>Scalar</code> <p>activation degree to assert</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>if the activation degree contains more than one element</p>"},{"location":"fuzzylite/activation/Activation/#fuzzylite.activation.Activation.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the activation method with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>list of space-separated parameter values</p> required"},{"location":"fuzzylite/activation/Activation/#fuzzylite.activation.Activation.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the activation method.</p> <p>Returns:</p> Type Description <code>str</code> <p>parameters of the activation method.</p>"},{"location":"fuzzylite/activation/First/","title":"First","text":""},{"location":"fuzzylite/activation/First/#fuzzylite.activation.First","title":"First","text":"<p>               Bases: <code>Activation</code></p> <p>Activate the first \\(n\\) rules (in insertion order) whose activation degrees are greater than or equal to the threshold.</p> related <ul> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.activation.Last</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/activation/First/#fuzzylite.activation.First-attributes","title":"Attributes","text":""},{"location":"fuzzylite/activation/First/#fuzzylite.activation.First.rules","title":"rules  <code>instance-attribute</code>","text":"<pre><code>rules = rules\n</code></pre>"},{"location":"fuzzylite/activation/First/#fuzzylite.activation.First.threshold","title":"threshold  <code>instance-attribute</code>","text":"<pre><code>threshold = threshold\n</code></pre>"},{"location":"fuzzylite/activation/First/#fuzzylite.activation.First-functions","title":"Functions","text":""},{"location":"fuzzylite/activation/First/#fuzzylite.activation.First.__init__","title":"__init__","text":"<pre><code>__init__(rules: int = 1, threshold: float = 0.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>rules</code> <code>int</code> <p>maximum number of rules to activate</p> <code>1</code> <code>threshold</code> <code>float</code> <p>minimum activation degree required to activate the rule.</p> <code>0.0</code>"},{"location":"fuzzylite/activation/First/#fuzzylite.activation.First.activate","title":"activate","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Activate the first \\(n\\) rules (in insertion order) whose activation degrees are greater than or equal to the threshold.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate.</p> required"},{"location":"fuzzylite/activation/First/#fuzzylite.activation.First.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the activation method with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>number of rules and threshold (eg, <code>3 0.5</code>).</p> required"},{"location":"fuzzylite/activation/First/#fuzzylite.activation.First.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the number of rules and threshold.</p> <p>Returns:</p> Type Description <code>str</code> <p>number of rules and threshold.</p>"},{"location":"fuzzylite/activation/General/","title":"General","text":""},{"location":"fuzzylite/activation/General/#fuzzylite.activation.General","title":"General","text":"<p>               Bases: <code>Activation</code></p> <p>Activation method that activates every rule of a rule block in insertion order.</p> related <ul> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/activation/General/#fuzzylite.activation.General-functions","title":"Functions","text":""},{"location":"fuzzylite/activation/General/#fuzzylite.activation.General.activate","title":"activate","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Activate every rule in the rule block in the order they were added.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate.</p> required"},{"location":"fuzzylite/activation/Highest/","title":"Highest","text":""},{"location":"fuzzylite/activation/Highest/#fuzzylite.activation.Highest","title":"Highest","text":"<p>               Bases: <code>Activation</code></p> <p>Activation method that activates only the rules with the highest activation degrees in descending order.</p> related <ul> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.activation.Lowest</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/activation/Highest/#fuzzylite.activation.Highest-attributes","title":"Attributes","text":""},{"location":"fuzzylite/activation/Highest/#fuzzylite.activation.Highest.rules","title":"rules  <code>instance-attribute</code>","text":"<pre><code>rules = rules\n</code></pre>"},{"location":"fuzzylite/activation/Highest/#fuzzylite.activation.Highest-functions","title":"Functions","text":""},{"location":"fuzzylite/activation/Highest/#fuzzylite.activation.Highest.__init__","title":"__init__","text":"<pre><code>__init__(rules: int = 1) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>rules</code> <code>int</code> <p>number of rules to activate.</p> <code>1</code>"},{"location":"fuzzylite/activation/Highest/#fuzzylite.activation.Highest.activate","title":"activate","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Activate the rules with the highest activation degrees.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate.</p> required"},{"location":"fuzzylite/activation/Highest/#fuzzylite.activation.Highest.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the activation method with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>number of rules (eg, <code>3</code>).</p> required"},{"location":"fuzzylite/activation/Highest/#fuzzylite.activation.Highest.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the number of rules.</p> <p>Returns:</p> Type Description <code>str</code> <p>number of rules.</p>"},{"location":"fuzzylite/activation/Last/","title":"Last","text":""},{"location":"fuzzylite/activation/Last/#fuzzylite.activation.Last","title":"Last","text":"<p>               Bases: <code>Activation</code></p> <p>Activation method that activates the first \\(n\\) rules (in reverse insertion order) whose activation degrees are greater than or equal to the threshold.</p> related <ul> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.activation.First</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/activation/Last/#fuzzylite.activation.Last-attributes","title":"Attributes","text":""},{"location":"fuzzylite/activation/Last/#fuzzylite.activation.Last.rules","title":"rules  <code>instance-attribute</code>","text":"<pre><code>rules = rules\n</code></pre>"},{"location":"fuzzylite/activation/Last/#fuzzylite.activation.Last.threshold","title":"threshold  <code>instance-attribute</code>","text":"<pre><code>threshold = threshold\n</code></pre>"},{"location":"fuzzylite/activation/Last/#fuzzylite.activation.Last-functions","title":"Functions","text":""},{"location":"fuzzylite/activation/Last/#fuzzylite.activation.Last.__init__","title":"__init__","text":"<pre><code>__init__(rules: int = 1, threshold: float = 0.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>rules</code> <code>int</code> <p>maximum number of rules to activate</p> <code>1</code> <code>threshold</code> <code>float</code> <p>minimum activation degree required to activate the rule.</p> <code>0.0</code>"},{"location":"fuzzylite/activation/Last/#fuzzylite.activation.Last.activate","title":"activate","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Activate the last \\(n\\) rules (in reverse insertion order) whose activation degrees are greater than or equal to the threshold.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate.</p> required"},{"location":"fuzzylite/activation/Last/#fuzzylite.activation.Last.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the activation method with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>number of rules and threshold (eg, <code>3 0.5</code>).</p> required"},{"location":"fuzzylite/activation/Last/#fuzzylite.activation.Last.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the number of rules and threshold.</p> <p>Returns:</p> Type Description <code>str</code> <p>number of rules and threshold.</p>"},{"location":"fuzzylite/activation/Lowest/","title":"Lowest","text":""},{"location":"fuzzylite/activation/Lowest/#fuzzylite.activation.Lowest","title":"Lowest","text":"<p>               Bases: <code>Activation</code></p> <p>Activation method that activates only the rules with the lowest activation degrees in ascending order.</p> related <ul> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.activation.Highest</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/activation/Lowest/#fuzzylite.activation.Lowest-attributes","title":"Attributes","text":""},{"location":"fuzzylite/activation/Lowest/#fuzzylite.activation.Lowest.rules","title":"rules  <code>instance-attribute</code>","text":"<pre><code>rules = rules\n</code></pre>"},{"location":"fuzzylite/activation/Lowest/#fuzzylite.activation.Lowest-functions","title":"Functions","text":""},{"location":"fuzzylite/activation/Lowest/#fuzzylite.activation.Lowest.__init__","title":"__init__","text":"<pre><code>__init__(rules: int = 1) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>rules</code> <code>int</code> <p>number of rules to activate.</p> <code>1</code>"},{"location":"fuzzylite/activation/Lowest/#fuzzylite.activation.Lowest.activate","title":"activate","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Activate the rules with the lowest activation degrees.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate.</p> required"},{"location":"fuzzylite/activation/Lowest/#fuzzylite.activation.Lowest.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the activation method with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>number of rules (eg, <code>3</code>).</p> required"},{"location":"fuzzylite/activation/Lowest/#fuzzylite.activation.Lowest.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the number of rules.</p> <p>Returns:</p> Type Description <code>str</code> <p>number of rules.</p>"},{"location":"fuzzylite/activation/Proportional/","title":"Proportional","text":""},{"location":"fuzzylite/activation/Proportional/#fuzzylite.activation.Proportional","title":"Proportional","text":"<p>               Bases: <code>Activation</code></p> <p>Activation method that activates the rules utilizing normalized activation degrees, thus the sum of the activation degrees is equal to one.</p> related <ul> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.activation.General</li> <li>fuzzylite.activation.Threshold</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/activation/Proportional/#fuzzylite.activation.Proportional-functions","title":"Functions","text":""},{"location":"fuzzylite/activation/Proportional/#fuzzylite.activation.Proportional.activate","title":"activate","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Activate the rules using normalized activation degrees.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate.</p> required"},{"location":"fuzzylite/activation/Threshold/","title":"Threshold","text":""},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold","title":"Threshold","text":"<p>               Bases: <code>Activation</code></p> <p>Activation method that activates the rules whose activation degrees satisfy the comparison operator and the threshold, and deactivates the rest.</p> related <ul> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.activation.General</li> <li>fuzzylite.activation.Proportional</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold-attributes","title":"Attributes","text":""},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.comparator","title":"comparator  <code>instance-attribute</code>","text":"<pre><code>comparator = comparator\n</code></pre>"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.threshold","title":"threshold  <code>instance-attribute</code>","text":"<pre><code>threshold = threshold\n</code></pre>"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold-classes","title":"Classes","text":""},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.Comparator","title":"Comparator","text":"<p>               Bases: <code>Enum</code></p> <p>Six comparison operators between the activation degree \\(a\\) and the threshold \\(\\theta\\).</p>"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.Comparator-attributes","title":"Attributes","text":""},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.Comparator.EqualTo","title":"EqualTo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EqualTo = '=='\n</code></pre>"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.Comparator.GreaterThan","title":"GreaterThan  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GreaterThan = '&gt;'\n</code></pre>"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.Comparator.GreaterThanOrEqualTo","title":"GreaterThanOrEqualTo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GreaterThanOrEqualTo = '&gt;='\n</code></pre>"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.Comparator.LessThan","title":"LessThan  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LessThan = '&lt;'\n</code></pre>"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.Comparator.LessThanOrEqualTo","title":"LessThanOrEqualTo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LessThanOrEqualTo = '&lt;='\n</code></pre>"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.Comparator.NotEqualTo","title":"NotEqualTo  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>NotEqualTo = '!='\n</code></pre>"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.Comparator.__operator__","title":"__operator__  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>__operator__: dict[str, Callable[[Scalar, Scalar], bool | Array[bool_]]] = {\n    LessThan: lt,\n    LessThanOrEqualTo: le,\n    EqualTo: eq,\n    NotEqualTo: ne,\n    GreaterThanOrEqualTo: ge,\n    GreaterThan: gt,\n}\n</code></pre>"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.Comparator.operator","title":"operator  <code>property</code>","text":"<pre><code>operator: Callable[[Scalar, Scalar], bool | Array[bool_]]\n</code></pre> <p>Return the function reference for the operator.</p> <p>Returns:</p> Type Description <code>Callable[[Scalar, Scalar], bool | Array[bool_]]</code> <p>function reference for the operator.</p>"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.Comparator-functions","title":"Functions","text":""},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.Comparator.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the comparator in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the comparator in Python.</p>"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold-functions","title":"Functions","text":""},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.__init__","title":"__init__","text":"<pre><code>__init__(comparator: Comparator | str = GreaterThan, threshold: float = 0.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>comparator</code> <code>Comparator | str</code> <p>comparison operator</p> <code>GreaterThan</code> <code>threshold</code> <code>float</code> <p>value for activation degrees.</p> <code>0.0</code>"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.activate","title":"activate","text":"<pre><code>activate(rule_block: RuleBlock) -&gt; None\n</code></pre> <p>Activates the rules whose activation degrees satisfy the comparator and threshold, and deactivate the rest.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to activate.</p> required"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the activation method with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>comparator and threshold (eg, <code>&gt; 0.5</code>).</p> required"},{"location":"fuzzylite/activation/Threshold/#fuzzylite.activation.Threshold.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the comparator and threshold.</p> <p>Returns:</p> Type Description <code>str</code> <p>comparator and threshold.</p>"},{"location":"fuzzylite/benchmark/Benchmark/","title":"Benchmark","text":""},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark","title":"Benchmark","text":"<p>Evaluate the performance of an engine on a dataset.</p> <p>The performance time is measured in seconds and the error is measured as the mean squared error over the differences between the expected dataset output values and the obtained output values.</p> related <ul> <li>fuzzylite.engine.Engine</li> <li>fuzzylite.library.Settings</li> </ul>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark-attributes","title":"Attributes","text":""},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data = data\n</code></pre>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.engine","title":"engine  <code>instance-attribute</code>","text":"<pre><code>engine = engine\n</code></pre>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.error","title":"error  <code>instance-attribute</code>","text":"<pre><code>error: list[float] = []\n</code></pre>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.random","title":"random  <code>instance-attribute</code>","text":"<pre><code>random = RandomState(seed=seed)\n</code></pre>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.rows","title":"rows  <code>instance-attribute</code>","text":"<pre><code>rows = rows\n</code></pre>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.seed","title":"seed  <code>instance-attribute</code>","text":"<pre><code>seed = seed\n</code></pre>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.shuffle","title":"shuffle  <code>instance-attribute</code>","text":"<pre><code>shuffle = shuffle\n</code></pre>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.test_data","title":"test_data  <code>instance-attribute</code>","text":"<pre><code>test_data = view()\n</code></pre>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.time","title":"time  <code>instance-attribute</code>","text":"<pre><code>time: list[float] = []\n</code></pre>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark-functions","title":"Functions","text":""},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str,\n    engine: Engine,\n    data: ScalarArray,\n    *,\n    rows: int | float = 1.0,\n    shuffle: bool = True,\n    seed: int | None = None\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the benchmark</p> required <code>engine</code> <code>Engine</code> <p>engine to benchmark</p> required <code>data</code> <code>ScalarArray</code> <p>data to benchmark the engine on</p> required <code>rows</code> <code>int | float</code> <p>number (int) or ratio (float) of rows to use from the data</p> <code>1.0</code> <code>shuffle</code> <code>bool</code> <p>shuffles the data</p> <code>True</code> <code>seed</code> <code>int | None</code> <p>seed to shuffle the data.</p> <code>None</code>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the benchmark in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the benchmark in Python.</p>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.engine_and_data","title":"engine_and_data  <code>classmethod</code>","text":"<pre><code>engine_and_data(example: ModuleType) -&gt; tuple[Engine, ScalarArray]\n</code></pre> <p>Create the engine and load the dataset for the example.</p> <p>Parameters:</p> Name Type Description Default <code>example</code> <code>ModuleType</code> <p>is the module to benchmark (eg, fuzzylite.examples.terms.arc)</p> required <p>Returns:</p> Type Description <code>tuple[Engine, ScalarArray]</code> <p>tuple of engine and dataset</p>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.for_example","title":"for_example  <code>classmethod</code>","text":"<pre><code>for_example(example: ModuleType, rows: int | float = 1.0, shuffle: bool = True, seed: int | None = None) -&gt; Benchmark\n</code></pre> <p>Create benchmark for the example.</p> <p>Parameters:</p> Name Type Description Default <code>example</code> <code>ModuleType</code> <p>example to benchmark (eg, <code>fuzzylite.examples.terms.arc</code>)</p> required <code>rows</code> <code>int | float</code> <p>number (int) or ratio (float) of rows to use from the data</p> <code>1.0</code> <code>shuffle</code> <code>bool</code> <p>whether to shuffle the data</p> <code>True</code> <code>seed</code> <code>int | None</code> <p>seed to shuffle the data</p> <code>None</code> <p>Returns:</p> Type Description <code>Benchmark</code> <p>a benchmark ready for the example</p>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.measure","title":"measure","text":"<pre><code>measure(*, runs: int = 1) -&gt; None\n</code></pre> <p>Measure the performance of the engine on the dataset for a number of runs.</p> <p>Parameters:</p> Name Type Description Default <code>runs</code> <code>int</code> <p>number of runs to evaluate the engine on the test data</p> <code>1</code>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.prepare","title":"prepare","text":"<pre><code>prepare() -&gt; None\n</code></pre> <p>Prepare the engine and dataset to benchmark.</p>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.prepare_data","title":"prepare_data","text":"<pre><code>prepare_data() -&gt; None\n</code></pre> <p>Prepare the dataset to benchmark on.</p>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.prepare_engine","title":"prepare_engine","text":"<pre><code>prepare_engine() -&gt; None\n</code></pre> <p>Prepare the engine to benchmark.</p>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.reset","title":"reset","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset the benchmark.</p>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.run","title":"run","text":"<pre><code>run() -&gt; None\n</code></pre> <p>Run the benchmark once (without computing statistics).</p>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.summary","title":"summary","text":"<pre><code>summary() -&gt; dict[str, Any]\n</code></pre> <p>Summarize the benchmark results.</p> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dictionary of statistics containing the performance time in seconds and the mean squared error</p>"},{"location":"fuzzylite/benchmark/Benchmark/#fuzzylite.benchmark.Benchmark.summary_markdown","title":"summary_markdown","text":"<pre><code>summary_markdown(*, header: bool = False) -&gt; str\n</code></pre> <p>Summarize the benchmark results and format them using markdown.</p> <p>Parameters:</p> Name Type Description Default <code>header</code> <code>bool</code> <p>whether to include table header in summary</p> <code>False</code>"},{"location":"fuzzylite/defuzzifier/Bisector/","title":"Bisector","text":""},{"location":"fuzzylite/defuzzifier/Bisector/#fuzzylite.defuzzifier.Bisector","title":"Bisector","text":"<p>               Bases: <code>IntegralDefuzzifier</code></p> <p>Integral defuzzifier that computes the bisector of a fuzzy set.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.IntegralDefuzzifier</li> <li>fuzzylite.defuzzifier.Centroid</li> </ul>"},{"location":"fuzzylite/defuzzifier/Bisector/#fuzzylite.defuzzifier.Bisector-functions","title":"Functions","text":""},{"location":"fuzzylite/defuzzifier/Bisector/#fuzzylite.defuzzifier.Bisector.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify(term: Term, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Compute the bisector of a fuzzy set, that is, the x-coordinate such that the area to its left is approximately equal to the area to its right.</p> <p>The defuzzification process integrates over the fuzzy set using the given range. The integration algorithm is the midpoint rectangle method (https://en.wikipedia.org/wiki/Rectangle_method).</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>fuzzy set to defuzzify</p> required <code>minimum</code> <code>float</code> <p>value to start defuzzification</p> required <code>maximum</code> <code>float</code> <p>value to end defuzzification</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x\\)-coordinate of the bisector of the fuzzy set</p>"},{"location":"fuzzylite/defuzzifier/Centroid/","title":"Centroid","text":""},{"location":"fuzzylite/defuzzifier/Centroid/#fuzzylite.defuzzifier.Centroid","title":"Centroid","text":"<p>               Bases: <code>IntegralDefuzzifier</code></p> <p>Integral defuzzifier that computes the centroid of a fuzzy set.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.IntegralDefuzzifier</li> <li>fuzzylite.defuzzifier.Bisector</li> </ul>"},{"location":"fuzzylite/defuzzifier/Centroid/#fuzzylite.defuzzifier.Centroid-functions","title":"Functions","text":""},{"location":"fuzzylite/defuzzifier/Centroid/#fuzzylite.defuzzifier.Centroid.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify(term: Term, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Compute the centroid of a fuzzy set.</p> <p>The defuzzification process integrates over the fuzzy set using the given range. The integration algorithm is the midpoint rectangle method (https://en.wikipedia.org/wiki/Rectangle_method).</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>fuzzy set to defuzzify</p> required <code>minimum</code> <code>float</code> <p>value to start defuzzification</p> required <code>maximum</code> <code>float</code> <p>value to end defuzzification</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x\\)-coordinate of the centroid of the fuzzy set</p>"},{"location":"fuzzylite/defuzzifier/Defuzzifier/","title":"Defuzzifier","text":""},{"location":"fuzzylite/defuzzifier/Defuzzifier/#fuzzylite.defuzzifier.Defuzzifier","title":"Defuzzifier","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for defuzzifiers.</p> related <ul> <li>fuzzylite.defuzzifier.IntegralDefuzzifier<ul> <li>fuzzylite.defuzzifier.Bisector</li> <li>fuzzylite.defuzzifier.Centroid</li> <li>fuzzylite.defuzzifier.LargestOfMaximum</li> <li>fuzzylite.defuzzifier.MeanOfMaximum</li> <li>fuzzylite.defuzzifier.SmallestOfMaximum</li> </ul> </li> <li>fuzzylite.defuzzifier.WeightedDefuzzifier<ul> <li>fuzzylite.defuzzifier.WeightedAverage</li> <li>fuzzylite.defuzzifier.WeightedSum</li> </ul> </li> <li>fuzzylite.variable.OutputVariable</li> <li>fuzzylite.term.Aggregated</li> <li>fuzzylite.term.Activated</li> </ul>"},{"location":"fuzzylite/defuzzifier/Defuzzifier/#fuzzylite.defuzzifier.Defuzzifier-functions","title":"Functions","text":""},{"location":"fuzzylite/defuzzifier/Defuzzifier/#fuzzylite.defuzzifier.Defuzzifier.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the defuzzifier in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the defuzzifier in Python.</p>"},{"location":"fuzzylite/defuzzifier/Defuzzifier/#fuzzylite.defuzzifier.Defuzzifier.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the defuzzifier in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the defuzzifier in the FuzzyLite Language.</p>"},{"location":"fuzzylite/defuzzifier/Defuzzifier/#fuzzylite.defuzzifier.Defuzzifier.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the defuzzifier with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>space-separated parameter values</p> required"},{"location":"fuzzylite/defuzzifier/Defuzzifier/#fuzzylite.defuzzifier.Defuzzifier.defuzzify","title":"defuzzify  <code>abstractmethod</code>","text":"<pre><code>defuzzify(term: Term, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Defuzzify the term using the range <code>[minimum,maximum]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to defuzzify, typically an Aggregated term</p> required <code>minimum</code> <code>float</code> <p>minimum value of the range</p> required <code>maximum</code> <code>float</code> <p>maximum value of the range</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>defuzzified value of the term.</p>"},{"location":"fuzzylite/defuzzifier/Defuzzifier/#fuzzylite.defuzzifier.Defuzzifier.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the defuzzifier.</p> <p>Returns:</p> Type Description <code>str</code> <p>space-separated parameters of the defuzzifier.</p>"},{"location":"fuzzylite/defuzzifier/IntegralDefuzzifier/","title":"IntegralDefuzzifier","text":""},{"location":"fuzzylite/defuzzifier/IntegralDefuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier","title":"IntegralDefuzzifier","text":"<p>               Bases: <code>Defuzzifier</code></p> <p>Abstract class for defuzzifiers that integrate over the fuzzy set.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.Bisector</li> <li>fuzzylite.defuzzifier.Centroid</li> <li>fuzzylite.defuzzifier.LargestOfMaximum</li> <li>fuzzylite.defuzzifier.MeanOfMaximum</li> <li>fuzzylite.defuzzifier.SmallestOfMaximum</li> </ul>"},{"location":"fuzzylite/defuzzifier/IntegralDefuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier-attributes","title":"Attributes","text":""},{"location":"fuzzylite/defuzzifier/IntegralDefuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier.default_resolution","title":"default_resolution  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>default_resolution: Final[int] = 1000\n</code></pre>"},{"location":"fuzzylite/defuzzifier/IntegralDefuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier.resolution","title":"resolution  <code>instance-attribute</code>","text":"<pre><code>resolution = resolution or default_resolution\n</code></pre>"},{"location":"fuzzylite/defuzzifier/IntegralDefuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier-functions","title":"Functions","text":""},{"location":"fuzzylite/defuzzifier/IntegralDefuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier.__init__","title":"__init__","text":"<pre><code>__init__(resolution: int | None = None) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>resolution</code> <code>int | None</code> <p>number of divisions to discretize the range and compute the area under the curve.</p> <code>None</code>"},{"location":"fuzzylite/defuzzifier/IntegralDefuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the defuzzifier in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the defuzzifier in Python.</p>"},{"location":"fuzzylite/defuzzifier/IntegralDefuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the defuzzifier with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>list of space-separated parameter values</p> required"},{"location":"fuzzylite/defuzzifier/IntegralDefuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier.defuzzify","title":"defuzzify  <code>abstractmethod</code>","text":"<pre><code>defuzzify(term: Term, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Implement the defuzzification of the term using the given range.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to defuzzify</p> required <code>minimum</code> <code>float</code> <p>value to start defuzzification</p> required <code>maximum</code> <code>float</code> <p>value to end defuzzification</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>defuzzified value.</p>"},{"location":"fuzzylite/defuzzifier/IntegralDefuzzifier/#fuzzylite.defuzzifier.IntegralDefuzzifier.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters to configure the defuzzifier.</p> <p>Returns:</p> Type Description <code>str</code> <p>parameters to configure the defuzzifier.</p>"},{"location":"fuzzylite/defuzzifier/LargestOfMaximum/","title":"LargestOfMaximum","text":""},{"location":"fuzzylite/defuzzifier/LargestOfMaximum/#fuzzylite.defuzzifier.LargestOfMaximum","title":"LargestOfMaximum","text":"<p>               Bases: <code>IntegralDefuzzifier</code></p> <p>Integral defuzzifier that computes the largest value of the maximum membership function of a fuzzy set.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.IntegralDefuzzifier</li> <li>fuzzylite.defuzzifier.MeanOfMaximum</li> <li>fuzzylite.defuzzifier.SmallestOfMaximum</li> </ul>"},{"location":"fuzzylite/defuzzifier/LargestOfMaximum/#fuzzylite.defuzzifier.LargestOfMaximum-functions","title":"Functions","text":""},{"location":"fuzzylite/defuzzifier/LargestOfMaximum/#fuzzylite.defuzzifier.LargestOfMaximum.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify(term: Term, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Compute the largest value of the maximum membership function of a fuzzy set.</p> <p>The defuzzification process integrates over the fuzzy set using the given range. The integration algorithm is the midpoint rectangle method (https://en.wikipedia.org/wiki/Rectangle_method).</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>fuzzy set to defuzzify</p> required <code>minimum</code> <code>float</code> <p>value to start defuzzification</p> required <code>maximum</code> <code>float</code> <p>value to end defuzzification</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>largest \\(x\\)-coordinate of the maximum membership function value in the fuzzy set</p>"},{"location":"fuzzylite/defuzzifier/MeanOfMaximum/","title":"MeanOfMaximum","text":""},{"location":"fuzzylite/defuzzifier/MeanOfMaximum/#fuzzylite.defuzzifier.MeanOfMaximum","title":"MeanOfMaximum","text":"<p>               Bases: <code>IntegralDefuzzifier</code></p> <p>Integral defuzzifier that computes the mean value of the maximum membership function of a fuzzy set.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.IntegralDefuzzifier</li> <li>fuzzylite.defuzzifier.SmallestOfMaximum</li> <li>fuzzylite.defuzzifier.LargestOfMaximum</li> </ul>"},{"location":"fuzzylite/defuzzifier/MeanOfMaximum/#fuzzylite.defuzzifier.MeanOfMaximum-functions","title":"Functions","text":""},{"location":"fuzzylite/defuzzifier/MeanOfMaximum/#fuzzylite.defuzzifier.MeanOfMaximum.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify(term: Term, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Compute the mean value of the maximum membership function of a fuzzy set.</p> <p>The defuzzification process integrates over the fuzzy set using the given range. The integration algorithm is the midpoint rectangle method (https://en.wikipedia.org/wiki/Rectangle_method).</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>fuzzy set to defuzzify</p> required <code>minimum</code> <code>float</code> <p>value to start defuzzification</p> required <code>maximum</code> <code>float</code> <p>value to end defuzzification</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>mean \\(x\\)-coordinate of the maximum membership function value in the fuzzy set</p>"},{"location":"fuzzylite/defuzzifier/SmallestOfMaximum/","title":"SmallestOfMaximum","text":""},{"location":"fuzzylite/defuzzifier/SmallestOfMaximum/#fuzzylite.defuzzifier.SmallestOfMaximum","title":"SmallestOfMaximum","text":"<p>               Bases: <code>IntegralDefuzzifier</code></p> <p>Integral defuzzifier that computes the smallest value of the maximum membership function of a fuzzy set.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.IntegralDefuzzifier</li> <li>fuzzylite.defuzzifier.MeanOfMaximum</li> <li>fuzzylite.defuzzifier.LargestOfMaximum</li> </ul>"},{"location":"fuzzylite/defuzzifier/SmallestOfMaximum/#fuzzylite.defuzzifier.SmallestOfMaximum-functions","title":"Functions","text":""},{"location":"fuzzylite/defuzzifier/SmallestOfMaximum/#fuzzylite.defuzzifier.SmallestOfMaximum.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify(term: Term, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Compute the smallest value of the maximum membership function in the fuzzy set.</p> <p>The defuzzification process integrates over the fuzzy set using the given range. The integration algorithm is the midpoint rectangle method (https://en.wikipedia.org/wiki/Rectangle_method).</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>fuzzy set to defuzzify</p> required <code>minimum</code> <code>float</code> <p>value to start defuzzification</p> required <code>maximum</code> <code>float</code> <p>value to end defuzzification</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>smallest \\(x\\)-coordinate of the maximum membership function value in the fuzzy set</p>"},{"location":"fuzzylite/defuzzifier/WeightedAverage/","title":"WeightedAverage","text":""},{"location":"fuzzylite/defuzzifier/WeightedAverage/#fuzzylite.defuzzifier.WeightedAverage","title":"WeightedAverage","text":"<p>               Bases: <code>WeightedDefuzzifier</code></p> <p>Weighted defuzzifier that computes the weighted average of a fuzzy set represented by an Aggregated term.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.WeightedDefuzzifier</li> <li>fuzzylite.defuzzifier.WeightedSum</li> <li>fuzzylite.term.Aggregated</li> </ul>"},{"location":"fuzzylite/defuzzifier/WeightedAverage/#fuzzylite.defuzzifier.WeightedAverage-functions","title":"Functions","text":""},{"location":"fuzzylite/defuzzifier/WeightedAverage/#fuzzylite.defuzzifier.WeightedAverage.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify(term: Term, minimum: float = nan, maximum: float = nan) -&gt; Scalar\n</code></pre> <p>Computes the weighted average of the fuzzy set.</p> <p>The fuzzy set is represented by an Aggregated Term as \\(y = \\sum_i{w_iz_i}\\), where \\(w_i\\) is the activation degree of term \\(i\\), and \\(z_i = \\mu_i(w_i)\\).</p> <p>In Takagi-Sugeno controllers, the membership function \\(\\mu_i(w_i)\\) is generally a Constant, Linear, or Function term, which typically disregards the \\(w_i\\) value.</p> Warning <p>From version 8, the aggregation operator is used to aggregate multiple activations of the same term.</p> <p>In previous versions, the implication and aggregation operators are not used for weighted defuzzification.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to defuzzify</p> required <code>minimum</code> <code>float</code> <p>irrelevant</p> <code>nan</code> <code>maximum</code> <code>float</code> <p>irrelevant</p> <code>nan</code> <p>Returns:</p> Type Description <code>Scalar</code> <p>weighted average of the fuzzy set</p>"},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/","title":"WeightedDefuzzifier","text":""},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier","title":"WeightedDefuzzifier","text":"<p>               Bases: <code>Defuzzifier</code></p> <p>Abstract class for defuzzifiers that compute a weighted function on the fuzzy set.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.WeightedAverage</li> <li>fuzzylite.defuzzifier.WeightedSum</li> </ul>"},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier-attributes","title":"Attributes","text":""},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type = Type[type]\n</code></pre>"},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier-classes","title":"Classes","text":""},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.Type","title":"Type","text":"<p>               Bases: <code>Enum</code></p> <p>Type of the weighted defuzzifier based on the terms in the fuzzy set.</p> <ul> <li><code>Automatic</code>: Automatically inferred from the terms</li> <li><code>TakagiSugeno</code>: Manually set to TakagiSugeno (or Inverse Tsukamoto)</li> <li><code>Tsukamoto</code>: Manually set to Tsukamoto</li> </ul>"},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.Type-attributes","title":"Attributes","text":""},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.Type.Automatic","title":"Automatic  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Automatic = auto()\n</code></pre>"},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.Type.TakagiSugeno","title":"TakagiSugeno  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TakagiSugeno = auto()\n</code></pre>"},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.Type.Tsukamoto","title":"Tsukamoto  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Tsukamoto = auto()\n</code></pre>"},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.Type-functions","title":"Functions","text":""},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.Type.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to identify the type of defuzzifier in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to identify the type of defuzzifier in Python.</p>"},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier-functions","title":"Functions","text":""},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.__init__","title":"__init__","text":"<pre><code>__init__(type: str | Type = Automatic) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str | Type</code> <p>name or type of the weighted defuzzifier.</p> <code>Automatic</code>"},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the defuzzifier in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the defuzzifier in Python.</p>"},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the defuzzifier with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>list of space-separated parameter values</p> required"},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.defuzzify","title":"defuzzify  <code>abstractmethod</code>","text":"<pre><code>defuzzify(term: Term, minimum: float = nan, maximum: float = nan) -&gt; Scalar\n</code></pre> <p>Implement the defuzzification of the term.</p> Warning <p>From version 8, the aggregation operator is used to aggregate multiple activations of the same term.</p> <p>In previous versions, the implication and aggregation operators are not used for weighted defuzzification.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to defuzzify</p> required <code>minimum</code> <code>float</code> <p>irrelevant</p> <code>nan</code> <code>maximum</code> <code>float</code> <p>irrelevant</p> <code>nan</code> <p>Returns:</p> Type Description <code>Scalar</code> <p>defuzzified value</p>"},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.infer_type","title":"infer_type  <code>classmethod</code>","text":"<pre><code>infer_type(component: Term | Variable) -&gt; Type\n</code></pre> <p>Infer the type of the defuzzifier based on the component.</p> <p>Parameters:</p> Name Type Description Default <code>component</code> <code>Term | Variable</code> <p>term or variable to infer the type for</p> required <p>Returns:</p> Type Description <code>Type</code> <p>inferred type of the defuzzifier based on the component.</p>"},{"location":"fuzzylite/defuzzifier/WeightedDefuzzifier/#fuzzylite.defuzzifier.WeightedDefuzzifier.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters to configure the defuzzifier.</p> <p>Returns:</p> Type Description <code>str</code> <p>parameters to configure the defuzzifier.</p>"},{"location":"fuzzylite/defuzzifier/WeightedSum/","title":"WeightedSum","text":""},{"location":"fuzzylite/defuzzifier/WeightedSum/#fuzzylite.defuzzifier.WeightedSum","title":"WeightedSum","text":"<p>               Bases: <code>WeightedDefuzzifier</code></p> <p>Weighted defuzzifier that computes the weighted sum of a fuzzy set represented by an Aggregated term.</p> related <ul> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.defuzzifier.WeightedDefuzzifier</li> <li>fuzzylite.defuzzifier.WeightedAverage</li> <li>fuzzylite.term.Aggregated</li> </ul>"},{"location":"fuzzylite/defuzzifier/WeightedSum/#fuzzylite.defuzzifier.WeightedSum-functions","title":"Functions","text":""},{"location":"fuzzylite/defuzzifier/WeightedSum/#fuzzylite.defuzzifier.WeightedSum.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify(term: Term, minimum: float = nan, maximum: float = nan) -&gt; Scalar\n</code></pre> <p>Computes the weighted sum of the fuzzy set.</p> <p>The fuzzy set is represented by Aggregated term as \\(y = \\sum_i{w_iz_i}\\), where \\(w_i\\) is the activation degree of term \\(i\\), and \\(z_i = \\mu_i(w_i)\\).</p> <p>In Takagi-Sugeno controllers, the membership function \\(\\mu_i(w_i)\\) is generally a Constant, Linear, or Function term, which typically disregards the \\(w_i\\) value.</p> Warning <p>From version 8, the aggregation operator is used to aggregate multiple activations of the same term.</p> <p>In previous versions, the implication and aggregation operators are not used for weighted defuzzification.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to defuzzify</p> required <code>minimum</code> <code>float</code> <p>irrelevant</p> <code>nan</code> <code>maximum</code> <code>float</code> <p>irrelevant</p> <code>nan</code> <p>Returns:</p> Type Description <code>Scalar</code> <p>weighted sum of the fuzzy set</p>"},{"location":"fuzzylite/engine/Engine/","title":"Engine","text":""},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine","title":"Engine","text":"<p>Core class of the library that groups the necessary components of a fuzzy logic controller.</p> related <ul> <li>fuzzylite.variable.InputVariable</li> <li>fuzzylite.variable.OutputVariable</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine-attributes","title":"Attributes","text":""},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description = description\n</code></pre>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.input_values","title":"input_values  <code>property</code> <code>writable</code>","text":"<pre><code>input_values: ScalarArray\n</code></pre> <p>Get/Set 2D array where columns represent input variables and rows their input values.</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.input_values--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>ScalarArray</code> <p>2D array of input values (rows) for each input variable (columns)</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.input_values--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>values</code> <code>ScalarArray</code> <p>input values of the engine.</p> required Tip when <code>values</code> is a: the result: single scalar value sets the values of all input variables 1D array on an engine with a single variable sets the values for the input variable 1D array on an engine with multiple variables sets each value to each input variable 2D array sets each column of values to each input variable <p>Raises:</p> Type Description <code>RuntimeError</code> <p>when there are no input variables</p> <code>ValueError</code> <p>when the dimensionality of values is greater than 2</p> <code>ValueError</code> <p>when the number of columns in the values is different from the number of input variables</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.input_variables","title":"input_variables  <code>instance-attribute</code>","text":"<pre><code>input_variables = list(input_variables or [])\n</code></pre>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.output_values","title":"output_values  <code>property</code>","text":"<pre><code>output_values: ScalarArray\n</code></pre> <p>Return a 2D array of output values (rows) for each output variable (columns).</p> <p>Returns:</p> Type Description <code>ScalarArray</code> <p>2D array of output values (rows) for each output variable (columns).</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.output_variables","title":"output_variables  <code>instance-attribute</code>","text":"<pre><code>output_variables = list(output_variables or [])\n</code></pre>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.rule_blocks","title":"rule_blocks  <code>instance-attribute</code>","text":"<pre><code>rule_blocks = list(rule_blocks or [])\n</code></pre>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.values","title":"values  <code>property</code>","text":"<pre><code>values: ScalarArray\n</code></pre> <p>Return a 2D array of current input and output values.</p> <p>Returns:</p> Type Description <code>ScalarArray</code> <p>2D array of current input and output values.</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.variables","title":"variables  <code>property</code>","text":"<pre><code>variables: list[InputVariable | OutputVariable]\n</code></pre> <p>Return the list of input and output variables.</p> <p>Returns:</p> Type Description <code>list[InputVariable | OutputVariable]</code> <p>list of input and output variables.</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine-classes","title":"Classes","text":""},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.Type","title":"Type","text":"<p>               Bases: <code>Enum</code></p> <p>Determine type of engine.</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.Type-attributes","title":"Attributes","text":""},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.Type.Hybrid","title":"Hybrid  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Hybrid = auto()\n</code></pre>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.Type.InverseTsukamoto","title":"InverseTsukamoto  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>InverseTsukamoto = auto()\n</code></pre>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.Type.Larsen","title":"Larsen  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Larsen = auto()\n</code></pre>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.Type.Mamdani","title":"Mamdani  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Mamdani = auto()\n</code></pre>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.Type.TakagiSugeno","title":"TakagiSugeno  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TakagiSugeno = auto()\n</code></pre>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.Type.Tsukamoto","title":"Tsukamoto  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Tsukamoto = auto()\n</code></pre>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.Type.Unknown","title":"Unknown  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Unknown = auto()\n</code></pre>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine-functions","title":"Functions","text":""},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(item: str) -&gt; InputVariable | OutputVariable | RuleBlock\n</code></pre> <p>Allow operation of engines as <code>engine[\"power\"].value</code>.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>str</code> <p>name of the component to find in input variables, output variables, or rule blocks</p> required <p>Returns:</p> Type Description <code>InputVariable | OutputVariable | RuleBlock</code> <p>first component found with the name</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    description: str = \"\",\n    input_variables: Iterable[InputVariable] | None = None,\n    output_variables: Iterable[OutputVariable] | None = None,\n    rule_blocks: Iterable[RuleBlock] | None = None,\n    load: bool = True,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the engine</p> <code>''</code> <code>description</code> <code>str</code> <p>description of the engine</p> <code>''</code> <code>input_variables</code> <code>Iterable[InputVariable] | None</code> <p>list of input variables</p> <code>None</code> <code>output_variables</code> <code>Iterable[OutputVariable] | None</code> <p>list of output variables</p> <code>None</code> <code>rule_blocks</code> <code>Iterable[RuleBlock] | None</code> <p>list of rule blocks</p> <code>None</code> <code>load</code> <code>bool</code> <p>whether to automatically update references to this engine and load the rules in the rule blocks.</p> <code>True</code>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the engine in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the engine in Python.</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the engine in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the engine in the FuzzyLite Language.</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.configure","title":"configure","text":"<pre><code>configure(\n    conjunction: TNorm | str | None = None,\n    disjunction: SNorm | str | None = None,\n    implication: TNorm | str | None = None,\n    aggregation: SNorm | str | None = None,\n    defuzzifier: Defuzzifier | str | None = None,\n    activation: Activation | str | None = None,\n) -&gt; None\n</code></pre> <p>Configure the engine with the given operators.</p> <p>Parameters:</p> Name Type Description Default <code>conjunction</code> <code>TNorm | str | None</code> <p>object or name of TNorm registered in the TNormFactory</p> <code>None</code> <code>disjunction</code> <code>SNorm | str | None</code> <p>object or name of SNorm registered in the SNormFactory</p> <code>None</code> <code>implication</code> <code>TNorm | str | None</code> <p>object or name of TNorm registered in the TNormFactory</p> <code>None</code> <code>aggregation</code> <code>SNorm | str | None</code> <p>object or name of SNorm registered in the SNormFactory</p> <code>None</code> <code>defuzzifier</code> <code>Defuzzifier | str | None</code> <p>object or name of defuzzifier registered in the DefuzzifierFactory</p> <code>None</code> <code>activation</code> <code>Activation | str | None</code> <p>object or name of activation method registered in the ActivationFactory</p> <code>None</code>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.copy","title":"copy","text":"<pre><code>copy() -&gt; Engine\n</code></pre> <p>Create a deep copy of the engine.</p> <p>Returns:</p> Type Description <code>Engine</code> <p>deep copy of the engine</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.infer_type","title":"infer_type","text":"<pre><code>infer_type(reasons: list[str] | None = None) -&gt; Type\n</code></pre> <p>Infer the type of the engine based on its configuration.</p> <p>Parameters:</p> Name Type Description Default <code>reasons</code> <code>list[str] | None</code> <p>optional output list explaining the reasons for the inferred type</p> <code>None</code> <p>Returns:</p> Type Description <code>Type</code> <p>type of engine inferred from its configuration.</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.input_variable","title":"input_variable","text":"<pre><code>input_variable(name_or_index: str | int) -&gt; InputVariable\n</code></pre> <p>Find the input variable by the name or index.</p> <p>The best performance is \\(O(1)\\) when using indices, and the worst performance is \\(O(n)\\) when using names, where \\(n\\) is the number of input variables.</p> <p>Parameters:</p> Name Type Description Default <code>name_or_index</code> <code>str | int</code> <p>name or index of the input variable</p> required <p>Returns:</p> Type Description <code>InputVariable</code> <p>input variable by the name or index</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when there is no variable by the given name.</p> <code>IndexError</code> <p>when the index is out of range</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.is_ready","title":"is_ready","text":"<pre><code>is_ready(errors: list[str] | None = None) -&gt; bool\n</code></pre> <p>Determine whether the engine is configured correctly and ready for operation.</p> Note <p>In advanced engines, the result of this method should be taken as a suggestion and not as a prerequisite to operate the engine.</p> <p>Parameters:</p> Name Type Description Default <code>errors</code> <code>list[str] | None</code> <p>optional output list that stores the errors found if the engine is not ready</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>whether the engine is ready.</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.output_variable","title":"output_variable","text":"<pre><code>output_variable(name_or_index: str | int) -&gt; OutputVariable\n</code></pre> <p>Find the output variable of the given name or at the given index.</p> <p>The best performance is \\(O(1)\\) when using indices, and the worst performance is \\(O(n)\\) when using names, where \\(n\\) is the number of output variables.</p> <p>Parameters:</p> Name Type Description Default <code>name_or_index</code> <code>str | int</code> <p>name or index of the output variable</p> required <p>Returns:</p> Type Description <code>OutputVariable</code> <p>output variable by the given name or at the given index</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when there is no variable with the given name.</p> <code>IndexError</code> <p>when the index is out of range</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.process","title":"process","text":"<pre><code>process() -&gt; None\n</code></pre> <p>Process the engine in its current state as follows.</p> <ol> <li>clear the aggregated fuzzy output variables,</li> <li>activate the rule blocks, and</li> <li>defuzzify the output variables</li> </ol> related <ul> <li>fuzzylite.term.Aggregated.clear</li> <li>fuzzylite.rule.RuleBlock.activate</li> <li>fuzzylite.variable.OutputVariable.defuzzify</li> </ul>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.restart","title":"restart","text":"<pre><code>restart() -&gt; None\n</code></pre> <p>Restart the engine as follows.</p> <ol> <li>setting the values of the input variables to nan,</li> <li>reloading the rules of the rule blocks, and</li> <li>clearing the output variables</li> </ol> related <ul> <li>fuzzylite.variable.Variable.value</li> <li>fuzzylite.variable.OutputVariable.clear</li> </ul>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.rule_block","title":"rule_block","text":"<pre><code>rule_block(name_or_index: str | int) -&gt; RuleBlock\n</code></pre> <p>Find the rule block of the given name or at the given index.</p> <p>The best performance is \\(O(1)\\) when using indices, and the worst performance is \\(O(n)\\) when using names, where \\(n\\) is the number of rule blocks.</p> <p>Parameters:</p> Name Type Description Default <code>name_or_index</code> <code>str | int</code> <p>name or index of the rule block</p> required <p>Returns:</p> Type Description <code>RuleBlock</code> <p>rule block by the given name or at the given index</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when there is no variable with the given name.</p> <code>IndexError</code> <p>when the index is out of range</p>"},{"location":"fuzzylite/engine/Engine/#fuzzylite.engine.Engine.variable","title":"variable","text":"<pre><code>variable(name: str) -&gt; Variable\n</code></pre> <p>Find the variable by the name, iterating first over the input variables and then over the output variables.</p> <p>The cost of this method is \\(O(n)\\), where \\(n\\) is the number of variables in the engine. For better performance, get the variables by index.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the input or output variable</p> required <p>Returns:</p> Type Description <code>Variable</code> <p>variable of the given name</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when there is no variable by the given name.</p>"},{"location":"fuzzylite/exporter/Exporter/","title":"Exporter","text":""},{"location":"fuzzylite/exporter/Exporter/#fuzzylite.exporter.Exporter","title":"Exporter","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class to export engines and its components to different formats.</p> related <ul> <li>fuzzylite.exporter.FldExporter</li> <li>fuzzylite.exporter.FllExporter</li> <li>fuzzylite.exporter.PythonExporter</li> <li>fuzzylite.engine.Engine</li> </ul>"},{"location":"fuzzylite/exporter/Exporter/#fuzzylite.exporter.Exporter-functions","title":"Functions","text":""},{"location":"fuzzylite/exporter/Exporter/#fuzzylite.exporter.Exporter.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return code to construct the exporter in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the exporter in Python</p>"},{"location":"fuzzylite/exporter/Exporter/#fuzzylite.exporter.Exporter.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the class name of the exporter.</p> <p>Returns:</p> Type Description <code>str</code> <p>class name of the exporter</p>"},{"location":"fuzzylite/exporter/Exporter/#fuzzylite.exporter.Exporter.to_file","title":"to_file","text":"<pre><code>to_file(path: str | Path, instance: Any) -&gt; None\n</code></pre> <p>Write the string representation of the instance into the file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>file path to export the instance.</p> required <code>instance</code> <code>Any</code> <p>a fuzzylite object.</p> required"},{"location":"fuzzylite/exporter/Exporter/#fuzzylite.exporter.Exporter.to_string","title":"to_string  <code>abstractmethod</code>","text":"<pre><code>to_string(instance: Any) -&gt; str\n</code></pre> <p>Return string representation of the instance.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>Any</code> <p>a fuzzylite object</p> required <p>Returns:</p> Type Description <code>str</code> <p>string representation of the object</p>"},{"location":"fuzzylite/exporter/FldExporter/","title":"FldExporter","text":""},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter","title":"FldExporter","text":"<p>               Bases: <code>Exporter</code></p> <p>Export the input values and output values of an engine to the FuzzyLite Dataset (FLD) format.</p> related <ul> <li>fuzzylite.exporter.Exporter</li> </ul> warning <p>FldExporter uses vectorization so it only works with the fuzzylite.activation.General activation method</p> todo <p>include option for non-vectorized export so other activation methods can be used</p>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter-attributes","title":"Attributes","text":""},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.headers","title":"headers  <code>instance-attribute</code>","text":"<pre><code>headers = headers\n</code></pre>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.input_values","title":"input_values  <code>instance-attribute</code>","text":"<pre><code>input_values = input_values\n</code></pre>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.output_values","title":"output_values  <code>instance-attribute</code>","text":"<pre><code>output_values = output_values\n</code></pre>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.separator","title":"separator  <code>instance-attribute</code>","text":"<pre><code>separator = separator\n</code></pre>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter-classes","title":"Classes","text":""},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.ScopeOfValues","title":"ScopeOfValues","text":"<p>               Bases: <code>Enum</code></p> <p>Scope of the equally-distributed values to generate.</p> <ul> <li><code>EachVariable</code>: Generates \\(v\\) values for each variable, resulting in a total resolution of \\(-1 + \\max(1, v^{\\frac{1}{|I|})\\) from all combinations, where \\(I\\) refers to the input variables.</li> <li><code>AllVariables</code>: Generates values for each variable such that the total resolution is \\(v\\).</li> </ul>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.ScopeOfValues-attributes","title":"Attributes","text":""},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.ScopeOfValues.AllVariables","title":"AllVariables  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AllVariables = auto()\n</code></pre>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.ScopeOfValues.EachVariable","title":"EachVariable  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>EachVariable = auto()\n</code></pre>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter-functions","title":"Functions","text":""},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.__init__","title":"__init__","text":"<pre><code>__init__(separator: str = ' ', headers: bool = True, input_values: bool = True, output_values: bool = True) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>separator</code> <code>str</code> <p>separator of the dataset columns</p> <code>' '</code> <code>headers</code> <code>bool</code> <p>whether to export the header of the dataset</p> <code>True</code> <code>input_values</code> <code>bool</code> <p>whether to export the input values</p> <code>True</code> <code>output_values</code> <code>bool</code> <p>whether to export the output values.</p> <code>True</code>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.header","title":"header","text":"<pre><code>header(engine: Engine) -&gt; str\n</code></pre> <p>Return the header of the dataset for the engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>header of the dataset for the engine.</p>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.to_file_from_reader","title":"to_file_from_reader","text":"<pre><code>to_file_from_reader(path: Path, engine: Engine, reader: IO[str], skip_lines: int = 0) -&gt; None\n</code></pre> <p>Write the FuzzyLite Dataset to the file using the input values from the engine.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>path to the output file</p> required <code>engine</code> <code>Engine</code> <p>engine to export</p> required <code>reader</code> <code>IO[str]</code> <p>reader of a set of lines containing space-separated input values</p> required <code>skip_lines</code> <code>int</code> <p>number of lines to skip from the beginning.</p> <code>0</code> <p>Returns:</p> Type Description <code>None</code> <p>FuzzyLite Dataset from the engine.</p>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.to_file_from_scope","title":"to_file_from_scope","text":"<pre><code>to_file_from_scope(\n    path: Path,\n    engine: Engine,\n    values: int = 1024,\n    scope: ScopeOfValues = AllVariables,\n    active_variables: set[InputVariable] | None = None,\n) -&gt; None\n</code></pre> <p>Write the FuzzyLite Dataset from the engine to the file using the input values and their scope.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>file path</p> required <code>engine</code> <code>Engine</code> <p>engine to export</p> required <code>values</code> <code>int</code> <p>number of values to export</p> <code>1024</code> <code>scope</code> <code>ScopeOfValues</code> <p>scope of the values</p> <code>AllVariables</code> <code>active_variables</code> <code>set[InputVariable] | None</code> <p>set of input variables to set values for</p> <code>None</code>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.to_string","title":"to_string","text":"<pre><code>to_string(instance: object) -&gt; str\n</code></pre> <p>Return a FuzzyLite Dataset from the engine using 1024 input values for all variables.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>object</code> <p>engine to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>FuzzyLite Dataset from the engine</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if the instance is not an Engine.</p>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.to_string_from_reader","title":"to_string_from_reader","text":"<pre><code>to_string_from_reader(engine: Engine, reader: IO[str], skip_lines: int = 0) -&gt; str\n</code></pre> <p>Return a FuzzyLite Dataset from the engine using the input values from the reader.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <code>reader</code> <code>IO[str]</code> <p>reader of a set of lines containing space-separated input values</p> required <code>skip_lines</code> <code>int</code> <p>number of lines to skip from the beginning</p> <code>0</code> <p>Returns:</p> Type Description <code>str</code> <p>FuzzyLite Dataset from the engine.</p>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.to_string_from_scope","title":"to_string_from_scope","text":"<pre><code>to_string_from_scope(\n    engine: Engine,\n    values: int = 1024,\n    scope: ScopeOfValues = AllVariables,\n    active_variables: set[InputVariable] | None = None,\n) -&gt; str\n</code></pre> <p>Return a FuzzyLite Dataset from the engine using the input values and their scope.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <code>values</code> <code>int</code> <p>number of values to export</p> <code>1024</code> <code>scope</code> <code>ScopeOfValues</code> <p>scope of the values</p> <code>AllVariables</code> <code>active_variables</code> <code>set[InputVariable] | None</code> <p>input variables to set values for</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>FuzzyLite Dataset from the engine.</p>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.write","title":"write","text":"<pre><code>write(engine: Engine, writer: IO[str], input_values: Scalar) -&gt; None\n</code></pre> <p>Write a FuzzyLite Dataset line from the engine to the writer using the input values.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <code>writer</code> <code>IO[str]</code> <p>output where the engine will be written to</p> required <code>input_values</code> <code>Scalar</code> <p>matrix of input values.</p> required"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.write_from_reader","title":"write_from_reader","text":"<pre><code>write_from_reader(engine: Engine, writer: IO[str], reader: IO[str], skip_lines: int = 0) -&gt; None\n</code></pre> <p>Write the FuzzyLite Dataset from the engine to the writer using the input values from the reader.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <code>writer</code> <code>IO[str]</code> <p>output to write the engine</p> required <code>reader</code> <code>IO[str]</code> <p>reader of a set of lines containing space-separated input values</p> required <code>skip_lines</code> <code>int</code> <p>number of lines to skip from the beginning.</p> <code>0</code>"},{"location":"fuzzylite/exporter/FldExporter/#fuzzylite.exporter.FldExporter.write_from_scope","title":"write_from_scope","text":"<pre><code>write_from_scope(\n    engine: Engine,\n    writer: IO[str],\n    values: int,\n    scope: ScopeOfValues,\n    active_variables: set[InputVariable] | None = None,\n) -&gt; None\n</code></pre> <p>Write a FuzzyLite dataset from the engine to the writer.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <code>writer</code> <code>IO[str]</code> <p>output to write the engine</p> required <code>values</code> <code>int</code> <p>number of values to export</p> required <code>scope</code> <code>ScopeOfValues</code> <p>scope of the values</p> required <code>active_variables</code> <code>set[InputVariable] | None</code> <p>input variables to generate values for.</p> <code>None</code>"},{"location":"fuzzylite/exporter/FllExporter/","title":"FllExporter","text":""},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter","title":"FllExporter","text":"<p>               Bases: <code>Exporter</code></p> <p>Export an engine and its components to the FuzzyLite Language.</p> related <ul> <li>fuzzylite.exporter.Exporter</li> <li>fuzzylite.importer.FllImporter</li> <li>FuzzyLite Language (FLL)</li> </ul>"},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter-attributes","title":"Attributes","text":""},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter.indent","title":"indent  <code>instance-attribute</code>","text":"<pre><code>indent = indent\n</code></pre>"},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter.separator","title":"separator  <code>instance-attribute</code>","text":"<pre><code>separator = separator\n</code></pre>"},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter-functions","title":"Functions","text":""},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter.__init__","title":"__init__","text":"<pre><code>__init__(indent: str = '  ', separator: str = '\\n') -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>indent</code> <code>str</code> <p>indentation of the FuzzyLite Language.</p> <code>'  '</code> <code>separator</code> <code>str</code> <p>separation between components of the FuzzyLite Language.</p> <code>'\\n'</code>"},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter.activation","title":"activation","text":"<pre><code>activation(activation: Activation | None) -&gt; str\n</code></pre> <p>Return the activation method in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>activation</code> <code>Activation | None</code> <p>activation method to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>activation method in the FuzzyLite Language</p>"},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter.defuzzifier","title":"defuzzifier","text":"<pre><code>defuzzifier(defuzzifier: Defuzzifier | None) -&gt; str\n</code></pre> <p>Return the defuzzifier in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>defuzzifier</code> <code>Defuzzifier | None</code> <p>defuzzifier to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>defuzzifier in the FuzzyLite Language</p>"},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter.engine","title":"engine","text":"<pre><code>engine(engine: Engine) -&gt; str\n</code></pre> <p>Return the engine in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>engine in the FuzzyLite Language</p>"},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter.format","title":"format","text":"<pre><code>format(key: str | None, value: Any) -&gt; str\n</code></pre> <p>Format the arguments according to the FuzzyLite Language.</p> formatting table value formatted <code>None</code> <code>none</code> <code>bool</code> <code>true</code>, <code>false</code> <code>float</code> <code>0.999</code> using fuzzylite.library.Settings.decimals <code>list|set|tuple</code> space-separated values, each formatted with this method object anything else uses the object's <code>__str__()</code> method <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str | None</code> <p>name of the property</p> required <code>value</code> <code>Any</code> <p>value to format</p> required <p>Returns:</p> Type Description <code>str</code> <p>formatted (key and) value according to the FuzzyLite Language</p>"},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter.input_variable","title":"input_variable","text":"<pre><code>input_variable(variable: InputVariable) -&gt; str\n</code></pre> <p>Return the input variable in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>variable</code> <code>InputVariable</code> <p>input variable to export</p> required <p>Returns: input variable in the FuzzyLite Language</p>"},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter.norm","title":"norm","text":"<pre><code>norm(norm: Norm | None) -&gt; str\n</code></pre> <p>Return the norm in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>norm</code> <code>Norm | None</code> <p>norm to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>norm in the FuzzyLite Language</p>"},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter.output_variable","title":"output_variable","text":"<pre><code>output_variable(variable: OutputVariable) -&gt; str\n</code></pre> <p>Return the output variable in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>variable</code> <code>OutputVariable</code> <p>output variable to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>output variable in the FuzzyLite Language</p>"},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter.rule","title":"rule","text":"<pre><code>rule(rule: Rule) -&gt; str\n</code></pre> <p>Return the rule in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>Rule</code> <p>rule to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>rule in the FuzzyLite Language</p>"},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter.rule_block","title":"rule_block","text":"<pre><code>rule_block(rule_block: RuleBlock) -&gt; str\n</code></pre> <p>Return the rule block in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>rule block in the FuzzyLite Language</p>"},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter.term","title":"term","text":"<pre><code>term(term: Term) -&gt; str\n</code></pre> <p>Return the term in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>term in the FuzzyLite Language</p>"},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter.to_string","title":"to_string","text":"<pre><code>to_string(instance: Any) -&gt; str\n</code></pre> <p>Return the object in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>Any</code> <p>fuzzylite object.</p> required <p>Returns:</p> Type Description <code>str</code> <p>object in the FuzzyLite Language.</p>"},{"location":"fuzzylite/exporter/FllExporter/#fuzzylite.exporter.FllExporter.variable","title":"variable","text":"<pre><code>variable(variable: Variable, /, terms: bool = True) -&gt; str\n</code></pre> <p>Return the variable in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>variable</code> <code>Variable</code> <p>variable to export</p> required <code>terms</code> <code>bool</code> <p>whether to export the terms</p> <code>True</code> <p>Returns:</p> Type Description <code>str</code> <p>variable in the FuzzyLite Language</p>"},{"location":"fuzzylite/exporter/PythonExporter/","title":"PythonExporter","text":""},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter","title":"PythonExporter","text":"<p>               Bases: <code>Exporter</code></p> <p>Export an engine and its components to Python.</p> related <ul> <li>fuzzylite.exporter.Exporter</li> </ul>"},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter-attributes","title":"Attributes","text":""},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter.encapsulated","title":"encapsulated  <code>instance-attribute</code>","text":"<pre><code>encapsulated = encapsulated\n</code></pre>"},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter.formatted","title":"formatted  <code>instance-attribute</code>","text":"<pre><code>formatted = formatted\n</code></pre>"},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter-functions","title":"Functions","text":""},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter.__init__","title":"__init__","text":"<pre><code>__init__(formatted: bool = True, encapsulated: bool = False) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>formatted</code> <code>bool</code> <p>try to format the code using <code>black</code> if it is installed</p> <code>True</code> <code>encapsulated</code> <code>bool</code> <p>whether to encapsulate the code (using classes for engines and methods for other components).</p> <code>False</code>"},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter.activation","title":"activation","text":"<pre><code>activation(activation: Activation | None) -&gt; str\n</code></pre> <p>Return the code to construct the activation method in Python.</p> <p>Parameters:</p> Name Type Description Default <code>activation</code> <code>Activation | None</code> <p>activation method to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the activation method in Python</p>"},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter.defuzzifier","title":"defuzzifier","text":"<pre><code>defuzzifier(defuzzifier: Defuzzifier | None) -&gt; str\n</code></pre> <p>Return the code to construct the defuzzifier in Python.</p> <p>Parameters:</p> Name Type Description Default <code>defuzzifier</code> <code>Defuzzifier | None</code> <p>defuzzifier to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the defuzzifier in Python</p>"},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter.encapsulate","title":"encapsulate","text":"<pre><code>encapsulate(instance: Any) -&gt; str\n</code></pre> <p>Encapsulate the instance in a new class if it is an engine, or in a create method otherwise.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>Any</code> <p>object to encapsulate</p> required <p>Returns:</p> Type Description <code>str</code> <p>if the instance is an engine, then the class constructing the engine during initialization;</p> <code>str</code> <p>otherwise a method constructing the object</p>"},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter.engine","title":"engine","text":"<pre><code>engine(engine: Engine) -&gt; str\n</code></pre> <p>Return the code to construct the engine in Python.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the engine in Python</p>"},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter.format","title":"format","text":"<pre><code>format(code: str, **kwargs: Any) -&gt; str\n</code></pre> <p>Format the code using the <code>black</code> formatter if it is installed, otherwise no effects on the code.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>code to format.</p> required <code>**kwargs</code> <code>Any</code> <p>keyword arguments to pass to <code>black.Mode</code></p> <code>{}</code> <p>Returns:     code formatted if <code>black</code> is installed, otherwise the code without format</p>"},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter.input_variable","title":"input_variable","text":"<pre><code>input_variable(input_variable: InputVariable) -&gt; str\n</code></pre> <p>Return the code to construct the input variable in Python.</p> <p>Parameters:</p> Name Type Description Default <code>input_variable</code> <code>InputVariable</code> <p>input variable to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the input variable in Python</p>"},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter.norm","title":"norm","text":"<pre><code>norm(norm: Norm | None) -&gt; str\n</code></pre> <p>Return the code to construct the norm in Python.</p> <p>Parameters:</p> Name Type Description Default <code>norm</code> <code>Norm | None</code> <p>norm to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the norm in Python</p>"},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter.output_variable","title":"output_variable","text":"<pre><code>output_variable(output_variable: OutputVariable) -&gt; str\n</code></pre> <p>Return the code to construct the output variable in Python.</p> <p>Parameters:</p> Name Type Description Default <code>output_variable</code> <code>OutputVariable</code> <p>output variable to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the output variable in Python</p>"},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter.rule","title":"rule","text":"<pre><code>rule(rule: Rule) -&gt; str\n</code></pre> <p>Return the code to construct the rule in Python.</p> <p>Parameters:</p> Name Type Description Default <code>rule</code> <code>Rule</code> <p>rule to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the rule in Python</p>"},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter.rule_block","title":"rule_block","text":"<pre><code>rule_block(rule_block: RuleBlock) -&gt; str\n</code></pre> <p>Return the code to construct the rule block in Python.</p> <p>Parameters:</p> Name Type Description Default <code>rule_block</code> <code>RuleBlock</code> <p>rule block variable to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the rule block in Python</p>"},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter.term","title":"term","text":"<pre><code>term(term: Term) -&gt; str\n</code></pre> <p>Return the code to construct the term in Python.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to export</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in Python</p>"},{"location":"fuzzylite/exporter/PythonExporter/#fuzzylite.exporter.PythonExporter.to_string","title":"to_string","text":"<pre><code>to_string(instance: Any) -&gt; str\n</code></pre> <p>Return the code to construct the instance in Python.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>Any</code> <p>fuzzylite object</p> required <p>Returns:</p> Type Description <code>str</code> <p>code to construct the instance in Python</p>"},{"location":"fuzzylite/factory/ActivationFactory/","title":"ActivationFactory","text":""},{"location":"fuzzylite/factory/ActivationFactory/#fuzzylite.factory.ActivationFactory","title":"ActivationFactory","text":"<p>               Bases: <code>ConstructionFactory[Activation]</code></p> <p>Construction factory of activation methods for rule blocks.</p> related <ul> <li>fuzzylite.factory.ConstructionFactory</li> <li>fuzzylite.activation.Activation</li> <li>fuzzylite.rule.RuleBlock</li> <li>fuzzylite.factory.FactoryManager</li> </ul>"},{"location":"fuzzylite/factory/ActivationFactory/#fuzzylite.factory.ActivationFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/factory/ActivationFactory/#fuzzylite.factory.ActivationFactory.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/factory/CloningFactory/","title":"CloningFactory","text":""},{"location":"fuzzylite/factory/CloningFactory/#fuzzylite.factory.CloningFactory","title":"CloningFactory","text":"<p>               Bases: <code>Generic[T]</code></p> <p>Base class for a factory whose objects are created by a deep copy of registered instances.</p> related <ul> <li>fuzzylite.factory.FunctionFactory</li> <li>fuzzylite.factory.FactoryManager</li> <li>fuzzylite.factory.ConstructionFactory</li> </ul>"},{"location":"fuzzylite/factory/CloningFactory/#fuzzylite.factory.CloningFactory-attributes","title":"Attributes","text":""},{"location":"fuzzylite/factory/CloningFactory/#fuzzylite.factory.CloningFactory.objects","title":"objects  <code>instance-attribute</code>","text":"<pre><code>objects = objects or {}\n</code></pre>"},{"location":"fuzzylite/factory/CloningFactory/#fuzzylite.factory.CloningFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/factory/CloningFactory/#fuzzylite.factory.CloningFactory.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str) -&gt; T\n</code></pre> <p>Return the object by the key.</p> <p>Returns:</p> Type Description <code>T</code> <p>object by the key.</p> <p>Raises: KeyError: when the key is not in the factory</p>"},{"location":"fuzzylite/factory/CloningFactory/#fuzzylite.factory.CloningFactory.__init__","title":"__init__","text":"<pre><code>__init__(objects: dict[str, T] | None = None) -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/factory/CloningFactory/#fuzzylite.factory.CloningFactory.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str]\n</code></pre> <p>Return the iterator of the factory.</p> <p>Returns:</p> Type Description <code>Iterator[str]</code> <p>iterator of the factory.</p>"},{"location":"fuzzylite/factory/CloningFactory/#fuzzylite.factory.CloningFactory.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Return the number of objects in the factory.</p> <p>Returns:</p> Type Description <code>int</code> <p>number of objects in the factory.</p>"},{"location":"fuzzylite/factory/CloningFactory/#fuzzylite.factory.CloningFactory.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the Python code to construct the factory.</p> <p>Returns:</p> Type Description <code>str</code> <p>Python code to construct the factory.</p>"},{"location":"fuzzylite/factory/CloningFactory/#fuzzylite.factory.CloningFactory.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(key: str, value: T) -&gt; None\n</code></pre> <p>Set the value for the key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>name of the object</p> required <code>value</code> <code>T</code> <p>instance to be deep copied</p> required"},{"location":"fuzzylite/factory/CloningFactory/#fuzzylite.factory.CloningFactory.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the class name of the factory.</p> <p>Returns:</p> Type Description <code>str</code> <p>class name of the factory.</p>"},{"location":"fuzzylite/factory/CloningFactory/#fuzzylite.factory.CloningFactory.copy","title":"copy","text":"<pre><code>copy(key: str) -&gt; T\n</code></pre> <p>Create a deep copy of the object registered by the key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>name of the object</p> required <p>Returns:</p> Type Description <code>T</code> <p>deep copy of the object registered by the key</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when the key is not registered.</p>"},{"location":"fuzzylite/factory/ConstructionFactory/","title":"ConstructionFactory","text":""},{"location":"fuzzylite/factory/ConstructionFactory/#fuzzylite.factory.ConstructionFactory","title":"ConstructionFactory","text":"<p>               Bases: <code>Generic[T]</code></p> <p>Base class for a factory whose objects are created from a registered constructor.</p> related <ul> <li>fuzzylite.factory.ActivationFactory</li> <li>fuzzylite.factory.DefuzzifierFactory</li> <li>fuzzylite.factory.HedgeFactory</li> <li>fuzzylite.factory.SNormFactory</li> <li>fuzzylite.factory.TermFactory</li> <li>fuzzylite.factory.TNormFactory</li> <li>fuzzylite.factory.FactoryManager</li> <li>fuzzylite.factory.CloningFactory</li> </ul>"},{"location":"fuzzylite/factory/ConstructionFactory/#fuzzylite.factory.ConstructionFactory-attributes","title":"Attributes","text":""},{"location":"fuzzylite/factory/ConstructionFactory/#fuzzylite.factory.ConstructionFactory.constructors","title":"constructors  <code>instance-attribute</code>","text":"<pre><code>constructors = constructors or {}\n</code></pre>"},{"location":"fuzzylite/factory/ConstructionFactory/#fuzzylite.factory.ConstructionFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/factory/ConstructionFactory/#fuzzylite.factory.ConstructionFactory.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(key: str) -&gt; type[T]\n</code></pre> <p>Return the type by the key.</p> <p>Returns:</p> Type Description <code>type[T]</code> <p>type by the key.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>when the key is not in the constructors</p>"},{"location":"fuzzylite/factory/ConstructionFactory/#fuzzylite.factory.ConstructionFactory.__init__","title":"__init__","text":"<pre><code>__init__(constructors: dict[str, type[T]] | None = None) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>constructors</code> <code>dict[str, type[T]] | None</code> <p>dictionary of constructors</p> <code>None</code>"},{"location":"fuzzylite/factory/ConstructionFactory/#fuzzylite.factory.ConstructionFactory.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[str]\n</code></pre> <p>Return the iterator of the factory.</p> <p>Returns:</p> Type Description <code>Iterator[str]</code> <p>iterator of the factory.</p>"},{"location":"fuzzylite/factory/ConstructionFactory/#fuzzylite.factory.ConstructionFactory.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Return the number of constructors in the factory.</p> <p>Returns:</p> Type Description <code>int</code> <p>number of constructors in the factory.</p>"},{"location":"fuzzylite/factory/ConstructionFactory/#fuzzylite.factory.ConstructionFactory.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the Python code to construct the factory.</p> <p>Returns:</p> Type Description <code>str</code> <p>Python code to construct the factory.</p>"},{"location":"fuzzylite/factory/ConstructionFactory/#fuzzylite.factory.ConstructionFactory.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(key: str, value: type[T]) -&gt; None\n</code></pre> <p>Set the value for the key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>name of the constructor</p> required <code>value</code> <code>type[T]</code> <p>type of the constructor</p> required"},{"location":"fuzzylite/factory/ConstructionFactory/#fuzzylite.factory.ConstructionFactory.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the class name of the factory.</p> <p>Returns:</p> Type Description <code>str</code> <p>class name of the factory.</p>"},{"location":"fuzzylite/factory/ConstructionFactory/#fuzzylite.factory.ConstructionFactory.construct","title":"construct","text":"<pre><code>construct(key: str, **kwargs: Any) -&gt; T\n</code></pre> <p>Create an object from the constructor registered by the key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>name of the constructor</p> required <code>**kwargs</code> <code>Any</code> <p>parameters to pass to the constructor</p> <code>{}</code> <p>Returns:</p> Type Description <code>T</code> <p>object created from the constructor registered by the key</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when the key is not registered</p>"},{"location":"fuzzylite/factory/ConstructionFactory/#fuzzylite.factory.ConstructionFactory.import_from","title":"import_from","text":"<pre><code>import_from(module: ModuleType, cls: type[T]) -&gt; list[type[T]]\n</code></pre> <p>Import constructors from the module.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>ModuleType</code> <p>module to import constructors</p> required <code>cls</code> <code>type[T]</code> <p>class of constructors to import</p> required <p>Returns:</p> Type Description <code>list[type[T]]</code> <p>list of constructors imported from the module.</p>"},{"location":"fuzzylite/factory/DefuzzifierFactory/","title":"DefuzzifierFactory","text":""},{"location":"fuzzylite/factory/DefuzzifierFactory/#fuzzylite.factory.DefuzzifierFactory","title":"DefuzzifierFactory","text":"<p>               Bases: <code>ConstructionFactory[Defuzzifier]</code></p> <p>Factory of defuzzifiers.</p> related <ul> <li>fuzzylite.factory.ConstructionFactory</li> <li>fuzzylite.defuzzifier.Defuzzifier</li> <li>fuzzylite.factory.FactoryManager</li> </ul>"},{"location":"fuzzylite/factory/DefuzzifierFactory/#fuzzylite.factory.DefuzzifierFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/factory/DefuzzifierFactory/#fuzzylite.factory.DefuzzifierFactory.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/factory/FactoryManager/","title":"FactoryManager","text":""},{"location":"fuzzylite/factory/FactoryManager/#fuzzylite.factory.FactoryManager","title":"FactoryManager","text":"<p>Manager that groups different factories to facilitate access across the library.</p> related <ul> <li>fuzzylite.factory.ConstructionFactory</li> <li>fuzzylite.factory.CloningFactory</li> <li>fuzzylite.factory.TermFactory</li> <li>fuzzylite.factory.TNormFactory</li> <li>fuzzylite.factory.SNormFactory</li> <li>fuzzylite.factory.HedgeFactory</li> <li>fuzzylite.factory.ActivationFactory</li> <li>fuzzylite.factory.DefuzzifierFactory</li> <li>fuzzylite.factory.FunctionFactory</li> </ul>"},{"location":"fuzzylite/factory/FactoryManager/#fuzzylite.factory.FactoryManager-attributes","title":"Attributes","text":""},{"location":"fuzzylite/factory/FactoryManager/#fuzzylite.factory.FactoryManager.activation","title":"activation  <code>instance-attribute</code>","text":"<pre><code>activation = activation or ActivationFactory()\n</code></pre>"},{"location":"fuzzylite/factory/FactoryManager/#fuzzylite.factory.FactoryManager.defuzzifier","title":"defuzzifier  <code>instance-attribute</code>","text":"<pre><code>defuzzifier = defuzzifier or DefuzzifierFactory()\n</code></pre>"},{"location":"fuzzylite/factory/FactoryManager/#fuzzylite.factory.FactoryManager.function","title":"function  <code>instance-attribute</code>","text":"<pre><code>function = function or FunctionFactory()\n</code></pre>"},{"location":"fuzzylite/factory/FactoryManager/#fuzzylite.factory.FactoryManager.hedge","title":"hedge  <code>instance-attribute</code>","text":"<pre><code>hedge = hedge or HedgeFactory()\n</code></pre>"},{"location":"fuzzylite/factory/FactoryManager/#fuzzylite.factory.FactoryManager.snorm","title":"snorm  <code>instance-attribute</code>","text":"<pre><code>snorm = snorm or SNormFactory()\n</code></pre>"},{"location":"fuzzylite/factory/FactoryManager/#fuzzylite.factory.FactoryManager.term","title":"term  <code>instance-attribute</code>","text":"<pre><code>term = term or TermFactory()\n</code></pre>"},{"location":"fuzzylite/factory/FactoryManager/#fuzzylite.factory.FactoryManager.tnorm","title":"tnorm  <code>instance-attribute</code>","text":"<pre><code>tnorm = tnorm or TNormFactory()\n</code></pre>"},{"location":"fuzzylite/factory/FactoryManager/#fuzzylite.factory.FactoryManager-functions","title":"Functions","text":""},{"location":"fuzzylite/factory/FactoryManager/#fuzzylite.factory.FactoryManager.__init__","title":"__init__","text":"<pre><code>__init__(\n    tnorm: TNormFactory | None = None,\n    snorm: SNormFactory | None = None,\n    activation: ActivationFactory | None = None,\n    defuzzifier: DefuzzifierFactory | None = None,\n    term: TermFactory | None = None,\n    hedge: HedgeFactory | None = None,\n    function: FunctionFactory | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>tnorm</code> <code>TNormFactory | None</code> <p>factory of TNorms</p> <code>None</code> <code>snorm</code> <code>SNormFactory | None</code> <p>factory of SNorms</p> <code>None</code> <code>activation</code> <code>ActivationFactory | None</code> <p>factory of activation methods</p> <code>None</code> <code>defuzzifier</code> <code>DefuzzifierFactory | None</code> <p>factory of defuzzifiers</p> <code>None</code> <code>term</code> <code>TermFactory | None</code> <p>factory of terms</p> <code>None</code> <code>hedge</code> <code>HedgeFactory | None</code> <p>factory of hedges</p> <code>None</code> <code>function</code> <code>FunctionFactory | None</code> <p>factory of functions</p> <code>None</code>"},{"location":"fuzzylite/factory/FunctionFactory/","title":"FunctionFactory","text":""},{"location":"fuzzylite/factory/FunctionFactory/#fuzzylite.factory.FunctionFactory","title":"FunctionFactory","text":"<p>               Bases: <code>CloningFactory[Element]</code></p> <p>Factory of operators and functions used by the Function term.</p> related <ul> <li>fuzzylite.factory.CloningFactory</li> <li>fuzzylite.term.Function.Element</li> <li>fuzzylite.term.Function</li> <li>fuzzylite.factory.FactoryManager</li> </ul>"},{"location":"fuzzylite/factory/FunctionFactory/#fuzzylite.factory.FunctionFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/factory/FunctionFactory/#fuzzylite.factory.FunctionFactory.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/factory/FunctionFactory/#fuzzylite.factory.FunctionFactory._create_functions","title":"_create_functions","text":"<pre><code>_create_functions() -&gt; list[Element]\n</code></pre> <p>Return the list of functions.</p> <p>Returns:</p> Type Description <code>list[Element]</code> <p>list of functions</p>"},{"location":"fuzzylite/factory/FunctionFactory/#fuzzylite.factory.FunctionFactory._create_operators","title":"_create_operators","text":"<pre><code>_create_operators() -&gt; list[Element]\n</code></pre> <p>Return the list of function operators.</p> <p>Returns:</p> Type Description <code>list[Element]</code> <p>list of function operators</p>"},{"location":"fuzzylite/factory/FunctionFactory/#fuzzylite.factory.FunctionFactory._precedence","title":"_precedence","text":"<pre><code>_precedence(importance: int) -&gt; int\n</code></pre> <p>Inverts the priority of precedence of operations, mapping 0-10 in ascending order to 100-0 in descending order.</p> <p>Parameters:</p> Name Type Description Default <code>importance</code> <code>int</code> <p>value between 0 and 10, where 0 is the most important</p> required <p>Returns:</p> Type Description <code>int</code> <p>precedence between 100 and 0, where 100 is the most important</p>"},{"location":"fuzzylite/factory/FunctionFactory/#fuzzylite.factory.FunctionFactory.functions","title":"functions","text":"<pre><code>functions() -&gt; dict[str, Element]\n</code></pre> <p>Return a dictionary of the functions available.</p> <p>Returns:</p> Type Description <code>dict[str, Element]</code> <p>dictionary of the functions available.</p>"},{"location":"fuzzylite/factory/FunctionFactory/#fuzzylite.factory.FunctionFactory.operators","title":"operators","text":"<pre><code>operators() -&gt; dict[str, Element]\n</code></pre> <p>Return a dictionary of the operators available.</p> <p>Returns:</p> Type Description <code>dict[str, Element]</code> <p>dictionary of the operators available.</p>"},{"location":"fuzzylite/factory/HedgeFactory/","title":"HedgeFactory","text":""},{"location":"fuzzylite/factory/HedgeFactory/#fuzzylite.factory.HedgeFactory","title":"HedgeFactory","text":"<p>               Bases: <code>ConstructionFactory[Hedge]</code></p> <p>Factory of hedges.</p> related <ul> <li>fuzzylite.factory.ConstructionFactory</li> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.factory.FactoryManager</li> </ul>"},{"location":"fuzzylite/factory/HedgeFactory/#fuzzylite.factory.HedgeFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/factory/HedgeFactory/#fuzzylite.factory.HedgeFactory.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/factory/SNormFactory/","title":"SNormFactory","text":""},{"location":"fuzzylite/factory/SNormFactory/#fuzzylite.factory.SNormFactory","title":"SNormFactory","text":"<p>               Bases: <code>ConstructionFactory[SNorm]</code></p> <p>Factory of SNorms.</p> related <ul> <li>fuzzylite.factory.ConstructionFactory</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.factory.FactoryManager</li> </ul>"},{"location":"fuzzylite/factory/SNormFactory/#fuzzylite.factory.SNormFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/factory/SNormFactory/#fuzzylite.factory.SNormFactory.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/factory/TNormFactory/","title":"TNormFactory","text":""},{"location":"fuzzylite/factory/TNormFactory/#fuzzylite.factory.TNormFactory","title":"TNormFactory","text":"<p>               Bases: <code>ConstructionFactory[TNorm]</code></p> <p>Factory of TNorms.</p> related <ul> <li>fuzzylite.factory.ConstructionFactory</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.factory.FactoryManager</li> </ul>"},{"location":"fuzzylite/factory/TNormFactory/#fuzzylite.factory.TNormFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/factory/TNormFactory/#fuzzylite.factory.TNormFactory.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/factory/TermFactory/","title":"TermFactory","text":""},{"location":"fuzzylite/factory/TermFactory/#fuzzylite.factory.TermFactory","title":"TermFactory","text":"<p>               Bases: <code>ConstructionFactory[Term]</code></p> <p>Factory of terms.</p> related <ul> <li>fuzzylite.factory.ConstructionFactory</li> <li>fuzzylite.term.Term</li> <li>fuzzylite.factory.FactoryManager</li> </ul>"},{"location":"fuzzylite/factory/TermFactory/#fuzzylite.factory.TermFactory-functions","title":"Functions","text":""},{"location":"fuzzylite/factory/TermFactory/#fuzzylite.factory.TermFactory.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/hedge/Any/","title":"Any","text":""},{"location":"fuzzylite/hedge/Any/#fuzzylite.hedge.Any","title":"Any","text":"<p>               Bases: <code>Hedge</code></p> <p>Special hedge that always returns <code>1.0</code>.</p> <p>The antecedent of a rule considers <code>Any</code> to be a syntactically special hedge because it is not followed by a term (e.g., <code>if Variable is any then...</code> vs <code>if Variable is very term then...</code>)</p> <p>The hedge is useful for better documenting rules.</p> related <ul> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/hedge/Any/#fuzzylite.hedge.Any-functions","title":"Functions","text":""},{"location":"fuzzylite/hedge/Any/#fuzzylite.hedge.Any.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Return scalar of same shape of <code>x</code> filled with <code>1.0</code>.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>irrelevant except for its shape</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x)=1.0\\)</p>"},{"location":"fuzzylite/hedge/Extremely/","title":"Extremely","text":""},{"location":"fuzzylite/hedge/Extremely/#fuzzylite.hedge.Extremely","title":"Extremely","text":"<p>               Bases: <code>Hedge</code></p> <p>Hedge that modifies the membership function value of a term as follows.</p> Equation <p>\\(h(x) = \\begin{cases}     2x^2 &amp; \\mbox{if } x \\le 0.5 \\cr     1-2(1-x)^2 &amp; \\mbox{otherwise} \\cr     \\end{cases}\\)</p> related <ul> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/hedge/Extremely/#fuzzylite.hedge.Extremely-functions","title":"Functions","text":""},{"location":"fuzzylite/hedge/Extremely/#fuzzylite.hedge.Extremely.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute \\(\\text{Extremely}(x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x) = \\begin{cases} 2x^2 &amp; \\mbox{if } x \\le 0.5 \\cr 1-2(1-x)^2 &amp; \\mbox{otherwise} \\cr \\end{cases}\\)</p>"},{"location":"fuzzylite/hedge/Hedge/","title":"Hedge","text":""},{"location":"fuzzylite/hedge/Hedge/#fuzzylite.hedge.Hedge","title":"Hedge","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for hedges.</p> <p>Hedges are used in the antecedent and consequent of a rule to modify the membership function of the term it precedes.</p> <p>The hedges in the library can be ordered based on the difference between the membership function \\(\\mu(x)\\) and its hedge \\(h(\\mu(x))\\) as follows (from most similar to least): Seldom   \\(&lt;\\) Somewhat   \\(&lt;\\) Very  \\(&lt;\\) Extremely   \\(&lt;\\) Not   \\(&lt;\\) Any</p> <code>term</code> Seldom Somewhat Very Extremely Not Any fuzzylite.term.Rectangle fuzzylite.hedge.Seldom fuzzylite.term.Rectangle fuzzylite.hedge.Somewhat fuzzylite.term.Rectangle fuzzylite.hedge.Very fuzzylite.term.Rectangle fuzzylite.hedge.Extremely fuzzylite.term.Rectangle fuzzylite.hedge.Not fuzzylite.term.Rectangle fuzzylite.hedge.Any fuzzylite.term.Rectangle fuzzylite.term.SemiEllipse fuzzylite.hedge.Seldom fuzzylite.term.SemiEllipse fuzzylite.hedge.Somewhat fuzzylite.term.SemiEllipse fuzzylite.hedge.Very fuzzylite.term.SemiEllipse fuzzylite.hedge.Extremely fuzzylite.term.SemiEllipse fuzzylite.hedge.Not fuzzylite.term.SemiEllipse fuzzylite.hedge.Any fuzzylite.term.SemiEllipse fuzzylite.term.Triangle fuzzylite.hedge.Seldom fuzzylite.term.Triangle fuzzylite.hedge.Somewhat fuzzylite.term.Triangle fuzzylite.hedge.Very fuzzylite.term.Triangle fuzzylite.hedge.Extremely fuzzylite.term.Triangle fuzzylite.hedge.Not fuzzylite.term.Triangle fuzzylite.hedge.Any fuzzylite.term.Triangle fuzzylite.term.Trapezoid fuzzylite.hedge.Seldom fuzzylite.term.Trapezoid fuzzylite.hedge.Somewhat fuzzylite.term.Trapezoid fuzzylite.hedge.Very fuzzylite.term.Trapezoid fuzzylite.hedge.Extremely fuzzylite.term.Trapezoid fuzzylite.hedge.Not fuzzylite.term.Trapezoid fuzzylite.hedge.Any fuzzylite.term.Trapezoid fuzzylite.term.Discrete fuzzylite.hedge.Seldom fuzzylite.term.Discrete fuzzylite.hedge.Somewhat fuzzylite.term.Discrete fuzzylite.hedge.Very fuzzylite.term.Discrete fuzzylite.hedge.Extremely fuzzylite.term.Discrete fuzzylite.hedge.Not fuzzylite.term.Discrete fuzzylite.hedge.Any fuzzylite.term.Discrete fuzzylite.term.Bell fuzzylite.hedge.Seldom fuzzylite.term.Bell fuzzylite.hedge.Somewhat fuzzylite.term.Bell fuzzylite.hedge.Very fuzzylite.term.Bell fuzzylite.hedge.Extremely fuzzylite.term.Bell fuzzylite.hedge.Not fuzzylite.term.Bell fuzzylite.hedge.Any fuzzylite.term.Bell fuzzylite.term.Cosine fuzzylite.hedge.Seldom fuzzylite.term.Cosine fuzzylite.hedge.Somewhat fuzzylite.term.Cosine fuzzylite.hedge.Very fuzzylite.term.Cosine fuzzylite.hedge.Extremely fuzzylite.term.Cosine fuzzylite.hedge.Not fuzzylite.term.Cosine fuzzylite.hedge.Any fuzzylite.term.Cosine fuzzylite.term.Gaussian fuzzylite.hedge.Seldom fuzzylite.term.Gaussian fuzzylite.hedge.Somewhat fuzzylite.term.Gaussian fuzzylite.hedge.Very fuzzylite.term.Gaussian fuzzylite.hedge.Extremely fuzzylite.term.Gaussian fuzzylite.hedge.Not fuzzylite.term.Gaussian fuzzylite.hedge.Any fuzzylite.term.Gaussian fuzzylite.term.GaussianProduct fuzzylite.hedge.Seldom fuzzylite.term.GaussianProduct fuzzylite.hedge.Somewhat fuzzylite.term.GaussianProduct fuzzylite.hedge.Very fuzzylite.term.GaussianProduct fuzzylite.hedge.Extremely fuzzylite.term.GaussianProduct fuzzylite.hedge.Not fuzzylite.term.GaussianProduct fuzzylite.hedge.Any fuzzylite.term.GaussianProduct fuzzylite.term.PiShape fuzzylite.hedge.Seldom fuzzylite.term.PiShape fuzzylite.hedge.Somewhat fuzzylite.term.PiShape fuzzylite.hedge.Very fuzzylite.term.PiShape fuzzylite.hedge.Extremely fuzzylite.term.PiShape fuzzylite.hedge.Not fuzzylite.term.PiShape fuzzylite.hedge.Any fuzzylite.term.PiShape fuzzylite.term.SigmoidDifference fuzzylite.hedge.Seldom fuzzylite.term.SigmoidDifference fuzzylite.hedge.Somewhat fuzzylite.term.SigmoidDifference fuzzylite.hedge.Very fuzzylite.term.SigmoidDifference fuzzylite.hedge.Extremely fuzzylite.term.SigmoidDifference fuzzylite.hedge.Not fuzzylite.term.SigmoidDifference fuzzylite.hedge.Any fuzzylite.term.SigmoidDifference fuzzylite.term.SigmoidProduct fuzzylite.hedge.Seldom fuzzylite.term.SigmoidProduct fuzzylite.hedge.Somewhat fuzzylite.term.SigmoidProduct fuzzylite.hedge.Very fuzzylite.term.SigmoidProduct fuzzylite.hedge.Extremely fuzzylite.term.SigmoidProduct fuzzylite.hedge.Not fuzzylite.term.SigmoidProduct fuzzylite.hedge.Any fuzzylite.term.SigmoidProduct fuzzylite.term.Spike fuzzylite.hedge.Seldom fuzzylite.term.Spike fuzzylite.hedge.Somewhat fuzzylite.term.Spike fuzzylite.hedge.Very fuzzylite.term.Spike fuzzylite.hedge.Extremely fuzzylite.term.Spike fuzzylite.hedge.Not fuzzylite.term.Spike fuzzylite.hedge.Any fuzzylite.term.Spike fuzzylite.term.Arc fuzzylite.hedge.Seldom fuzzylite.term.Arc fuzzylite.hedge.Somewhat fuzzylite.term.Arc fuzzylite.hedge.Very fuzzylite.term.Arc fuzzylite.hedge.Extremely fuzzylite.term.Arc fuzzylite.hedge.Not fuzzylite.term.Arc fuzzylite.hedge.Any fuzzylite.term.Arc fuzzylite.term.Binary fuzzylite.hedge.Seldom fuzzylite.term.Binary fuzzylite.hedge.Somewhat fuzzylite.term.Binary fuzzylite.hedge.Very fuzzylite.term.Binary fuzzylite.hedge.Extremely fuzzylite.term.Binary fuzzylite.hedge.Not fuzzylite.term.Binary fuzzylite.hedge.Any fuzzylite.term.Binary fuzzylite.term.Concave fuzzylite.hedge.Seldom fuzzylite.term.Concave fuzzylite.hedge.Somewhat fuzzylite.term.Concave fuzzylite.hedge.Very fuzzylite.term.Concave fuzzylite.hedge.Extremely fuzzylite.term.Concave fuzzylite.hedge.Not fuzzylite.term.Concave fuzzylite.hedge.Any fuzzylite.term.Concave fuzzylite.term.Ramp fuzzylite.hedge.Seldom fuzzylite.term.Ramp fuzzylite.hedge.Somewhat fuzzylite.term.Ramp fuzzylite.hedge.Very fuzzylite.term.Ramp fuzzylite.hedge.Extremely fuzzylite.term.Ramp fuzzylite.hedge.Not fuzzylite.term.Ramp fuzzylite.hedge.Any fuzzylite.term.Ramp fuzzylite.term.Sigmoid fuzzylite.hedge.Seldom fuzzylite.term.Sigmoid fuzzylite.hedge.Somewhat fuzzylite.term.Sigmoid fuzzylite.hedge.Very fuzzylite.term.Sigmoid fuzzylite.hedge.Extremely fuzzylite.term.Sigmoid fuzzylite.hedge.Not fuzzylite.term.Sigmoid fuzzylite.hedge.Any fuzzylite.term.Sigmoid fuzzylite.term.SShape - fuzzylite.term.ZShape fuzzylite.hedge.Seldom fuzzylite.term.SShape - fuzzylite.hedge.Seldom fuzzylite.term.ZShape][] fuzzylite.hedge.Somewhat fuzzylite.term.SShape - fuzzylite.hedge.Somewhat fuzzylite.term.ZShape fuzzylite.hedge.Very fuzzylite.term.SShape - fuzzylite.hedge.Very fuzzylite.term.ZShape fuzzylite.hedge.Extremely fuzzylite.term.SShape - fuzzylite.hedge.Extremely fuzzylite.term.ZShape fuzzylite.hedge.Not fuzzylite.term.SShape - fuzzylite.hedge.Not fuzzylite.term.ZShape fuzzylite.hedge.Any fuzzylite.term.SShape - fuzzylite.hedge.Any fuzzylite.term.ZShape fuzzylite.term.SShape fuzzylite.hedge.Seldom fuzzylite.term.SShape fuzzylite.hedge.Somewhat fuzzylite.term.SShape fuzzylite.hedge.Very fuzzylite.term.SShape fuzzylite.hedge.Extremely fuzzylite.term.SShape fuzzylite.hedge.Not fuzzylite.term.SShape fuzzylite.hedge.Any fuzzylite.term.SShape fuzzylite.term.ZShape fuzzylite.hedge.Seldom fuzzylite.term.ZShape fuzzylite.hedge.Somewhat fuzzylite.term.ZShape fuzzylite.hedge.Very fuzzylite.term.ZShape fuzzylite.hedge.Extremely fuzzylite.term.ZShape fuzzylite.hedge.Not fuzzylite.term.ZShape fuzzylite.hedge.Any fuzzylite.term.ZShape related <ul> <li>fuzzylite.hedge.Not</li> <li>fuzzylite.hedge.Seldom</li> <li>fuzzylite.hedge.Somewhat</li> <li>fuzzylite.hedge.Very</li> <li>fuzzylite.hedge.Extremely</li> <li>fuzzylite.hedge.Any</li> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Consequent</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/hedge/Hedge/#fuzzylite.hedge.Hedge-attributes","title":"Attributes","text":""},{"location":"fuzzylite/hedge/Hedge/#fuzzylite.hedge.Hedge.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Return the name of the hedge.</p> <p>Returns:</p> Type Description <code>str</code> <p>name of the hedge.</p>"},{"location":"fuzzylite/hedge/Hedge/#fuzzylite.hedge.Hedge-functions","title":"Functions","text":""},{"location":"fuzzylite/hedge/Hedge/#fuzzylite.hedge.Hedge.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the Python code to construct the hedge.</p> <p>Returns:</p> Type Description <code>str</code> <p>Python code to construct the hedge.</p>"},{"location":"fuzzylite/hedge/Hedge/#fuzzylite.hedge.Hedge.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the name of the hedge.</p> <p>Returns:</p> Type Description <code>str</code> <p>name of the hedge.</p>"},{"location":"fuzzylite/hedge/Hedge/#fuzzylite.hedge.Hedge.hedge","title":"hedge  <code>abstractmethod</code>","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Implement the hedge for the membership function value \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>hedge of \\(x\\).</p>"},{"location":"fuzzylite/hedge/HedgeFunction/","title":"HedgeFunction","text":""},{"location":"fuzzylite/hedge/HedgeFunction/#fuzzylite.hedge.HedgeFunction","title":"HedgeFunction","text":"<p>               Bases: <code>Hedge</code></p> <p>Hedge that modifies the membership function value of a term according to the term Function.</p> <p>This hedge is not registered with the HedgeFactory because the Function cannot be easily configured.</p> related <ul> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.hedge.HedgeLambda</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/hedge/HedgeFunction/#fuzzylite.hedge.HedgeFunction-attributes","title":"Attributes","text":""},{"location":"fuzzylite/hedge/HedgeFunction/#fuzzylite.hedge.HedgeFunction.function","title":"function  <code>instance-attribute</code>","text":"<pre><code>function = function\n</code></pre>"},{"location":"fuzzylite/hedge/HedgeFunction/#fuzzylite.hedge.HedgeFunction.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Get the name of the hedge.</p> <p>Returns:</p> Type Description <code>str</code> <p>name of the hedge</p>"},{"location":"fuzzylite/hedge/HedgeFunction/#fuzzylite.hedge.HedgeFunction-functions","title":"Functions","text":""},{"location":"fuzzylite/hedge/HedgeFunction/#fuzzylite.hedge.HedgeFunction.__init__","title":"__init__","text":"<pre><code>__init__(function: Function) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Function</code> <p>function \\(f\\).</p> required"},{"location":"fuzzylite/hedge/HedgeFunction/#fuzzylite.hedge.HedgeFunction.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute \\(f(x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x) = f(x)\\)</p>"},{"location":"fuzzylite/hedge/HedgeLambda/","title":"HedgeLambda","text":""},{"location":"fuzzylite/hedge/HedgeLambda/#fuzzylite.hedge.HedgeLambda","title":"HedgeLambda","text":"<p>               Bases: <code>Hedge</code></p> <p>Hedge that modifies the membership function value of a term according to a \\(\\lambda\\) function.</p> <p>This hedge is not registered with the HedgeFactory because the \\(\\lambda\\) function cannot be easily configured.</p> related <ul> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.hedge.HedgeFunction</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/hedge/HedgeLambda/#fuzzylite.hedge.HedgeLambda-attributes","title":"Attributes","text":""},{"location":"fuzzylite/hedge/HedgeLambda/#fuzzylite.hedge.HedgeLambda._name","title":"_name  <code>instance-attribute</code>","text":"<pre><code>_name = name\n</code></pre>"},{"location":"fuzzylite/hedge/HedgeLambda/#fuzzylite.hedge.HedgeLambda.function","title":"function  <code>instance-attribute</code>","text":"<pre><code>function = function\n</code></pre>"},{"location":"fuzzylite/hedge/HedgeLambda/#fuzzylite.hedge.HedgeLambda.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Get the name of the hedge.</p> <p>Returns:</p> Type Description <code>str</code> <p>name of the hedge</p>"},{"location":"fuzzylite/hedge/HedgeLambda/#fuzzylite.hedge.HedgeLambda-functions","title":"Functions","text":""},{"location":"fuzzylite/hedge/HedgeLambda/#fuzzylite.hedge.HedgeLambda.__init__","title":"__init__","text":"<pre><code>__init__(name: str, function: Callable[[Scalar], Scalar]) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the hedge</p> required <code>function</code> <code>Callable[[Scalar], Scalar]</code> <p>\\(\\lambda\\) function.</p> required"},{"location":"fuzzylite/hedge/HedgeLambda/#fuzzylite.hedge.HedgeLambda.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute \\(\\lambda(x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x) = \\lambda(x)\\)</p>"},{"location":"fuzzylite/hedge/Not/","title":"Not","text":""},{"location":"fuzzylite/hedge/Not/#fuzzylite.hedge.Not","title":"Not","text":"<p>               Bases: <code>Hedge</code></p> <p>Hedge that modifies the membership function value of a term by.</p> Equation <p>\\(h(x) = 1-x\\)</p> related <ul> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/hedge/Not/#fuzzylite.hedge.Not-functions","title":"Functions","text":""},{"location":"fuzzylite/hedge/Not/#fuzzylite.hedge.Not.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute \\(\\text{Not}(x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x) = 1-x\\)</p>"},{"location":"fuzzylite/hedge/Seldom/","title":"Seldom","text":""},{"location":"fuzzylite/hedge/Seldom/#fuzzylite.hedge.Seldom","title":"Seldom","text":"<p>               Bases: <code>Hedge</code></p> <p>Hedge that modifies the membership function value of a term as follows.</p> Equation <p>\\(h(x) = \\begin{cases}     \\sqrt{\\dfrac{x}{2}} &amp; \\mbox{if } x \\le 0.5 \\cr     1-\\sqrt{\\dfrac{1-x}{2}} &amp; \\mbox{otherwise} \\end{cases}\\)</p> related <ul> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/hedge/Seldom/#fuzzylite.hedge.Seldom-functions","title":"Functions","text":""},{"location":"fuzzylite/hedge/Seldom/#fuzzylite.hedge.Seldom.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute \\(\\text{Seldom(x)}\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x) = \\begin{cases} \\sqrt{\\dfrac{x}{2}} &amp; \\mbox{if \\(x \\le 0.5\\)} \\cr 1-\\sqrt{\\dfrac{(1-x)}{2}} &amp; \\mbox{otherwise}\\cr \\end{cases}\\)</p>"},{"location":"fuzzylite/hedge/Somewhat/","title":"Somewhat","text":""},{"location":"fuzzylite/hedge/Somewhat/#fuzzylite.hedge.Somewhat","title":"Somewhat","text":"<p>               Bases: <code>Hedge</code></p> <p>Hedge that modifies the membership function value of a term by.</p> Equation <p>\\(h(x) = \\sqrt{x}\\)</p> related <ul> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/hedge/Somewhat/#fuzzylite.hedge.Somewhat-functions","title":"Functions","text":""},{"location":"fuzzylite/hedge/Somewhat/#fuzzylite.hedge.Somewhat.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute \\(\\text{Somewhat}(x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x) = \\sqrt{x}\\)</p>"},{"location":"fuzzylite/hedge/Very/","title":"Very","text":""},{"location":"fuzzylite/hedge/Very/#fuzzylite.hedge.Very","title":"Very","text":"<p>               Bases: <code>Hedge</code></p> <p>Hedge that modifies the membership function value of a term by.</p> Equation <p>\\(h(x) = x^2\\)</p> related <ul> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.factory.HedgeFactory</li> </ul>"},{"location":"fuzzylite/hedge/Very/#fuzzylite.hedge.Very-functions","title":"Functions","text":""},{"location":"fuzzylite/hedge/Very/#fuzzylite.hedge.Very.hedge","title":"hedge","text":"<pre><code>hedge(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute \\(\\text{Very}(x)\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(h(x) = x^2\\)</p>"},{"location":"fuzzylite/importer/FllImporter/","title":"FllImporter","text":""},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter","title":"FllImporter","text":"<p>               Bases: <code>Importer</code></p> <p>Import an engine and its components described using the FuzzyLite Language.</p> related <ul> <li>fuzzylite.importer.Importer</li> <li>fuzzylite.exporter.FllExporter</li> <li>FuzzyLite Language (FLL)</li> </ul>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter-attributes","title":"Attributes","text":""},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.separator","title":"separator  <code>instance-attribute</code>","text":"<pre><code>separator = separator\n</code></pre>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter-functions","title":"Functions","text":""},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.__init__","title":"__init__","text":"<pre><code>__init__(separator: str = '\\n') -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>separator</code> <code>str</code> <p>separation between components of the FuzzyLite Language.</p> <code>'\\n'</code>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter._process","title":"_process","text":"<pre><code>_process(component: str, block: list[str], engine: Engine) -&gt; None\n</code></pre> <p>Process the main components of the FuzzyLite Language, namely Engine, InputVariable, OutputVariable and RuleBlock.</p> <p>Parameters:</p> Name Type Description Default <code>component</code> <code>str</code> <p>one of <code>Engine</code>, <code>InputVariable</code>, <code>OutputVariable</code> and <code>RuleBlock</code></p> required <code>block</code> <code>list[str]</code> <p>list of lines that make up the component</p> required <code>engine</code> <code>Engine</code> <p>engine to add the component to</p> required"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.activation","title":"activation","text":"<pre><code>activation(fll: str) -&gt; Activation | None\n</code></pre> <p>Return the activation method described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>activation method described using the FuzzyLite Language</p> required <p>Returns:</p> Type Description <code>Activation | None</code> <p>activation method described using the FuzzyLite Language</p>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.boolean","title":"boolean","text":"<pre><code>boolean(fll: str) -&gt; bool\n</code></pre> <p>Returns a boolean value described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p><code>true</code> or <code>false</code></p> required <p>Returns:</p> Type Description <code>bool</code> <p>boolean value described using the FuzzyLite Language.</p>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.component","title":"component","text":"<pre><code>component(cls: type[Activation], fll: str) -&gt; Activation | None\n</code></pre><pre><code>component(cls: type[Defuzzifier], fll: str) -&gt; Defuzzifier | None\n</code></pre><pre><code>component(cls: type[SNorm], fll: str) -&gt; SNorm | None\n</code></pre><pre><code>component(cls: type[TNorm], fll: str) -&gt; TNorm | None\n</code></pre> <pre><code>component(\n    cls: type[Activation | Defuzzifier | TNorm | SNorm], fll: str\n) -&gt; Activation | Defuzzifier | TNorm | SNorm | None\n</code></pre> <p>Return the component described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>cls</code> <code>type[Activation | Defuzzifier | TNorm | SNorm]</code> <p>class of the component to import</p> required <code>fll</code> <code>str</code> <p>component described using the FuzzyLite Language</p> required <p>Returns:</p> Type Description <code>Activation | Defuzzifier | TNorm | SNorm | None</code> <p>component described using the FuzzyLite Language</p>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.defuzzifier","title":"defuzzifier","text":"<pre><code>defuzzifier(fll: str) -&gt; Defuzzifier | None\n</code></pre> <p>Return the defuzzifier described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>defuzzifier described using the FuzzyLite Language</p> required <p>Returns:</p> Type Description <code>Defuzzifier | None</code> <p>defuzzifier described using the FuzzyLite Language</p>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.engine","title":"engine","text":"<pre><code>engine(fll: str) -&gt; Engine\n</code></pre> <p>Return the engine describe using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>engine described using the FuzzyLite Language</p> required <p>Returns:</p> Type Description <code>Engine</code> <p>engine described using the FuzzyLite Language</p>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.extract_key_value","title":"extract_key_value","text":"<pre><code>extract_key_value(fll: str, component: str | None = None) -&gt; tuple[str, str]\n</code></pre> <p>Return key-value pair described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>key-value pair in the form <code>key: value</code></p> required <code>component</code> <code>str | None</code> <p>name of the key to extract</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple[str, str]</code> <p>tuple of <code>(key, value)</code></p>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.extract_value","title":"extract_value","text":"<pre><code>extract_value(fll: str, component: str | None = None) -&gt; str\n</code></pre> <p>Return value from the <code>key: value</code> pair described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>key-value pair in the form <code>key: value</code></p> required <code>component</code> <code>str | None</code> <p>name of the key to extract</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>value from the <code>key: value</code> pair described using the FuzzyLite Language</p>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.from_string","title":"from_string","text":"<pre><code>from_string(text: str) -&gt; Engine\n</code></pre> <p>Return the engine describe using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>engine described using the FuzzyLite Language</p> required <p>Returns:</p> Type Description <code>Engine</code> <p>engine described using the FuzzyLite Language</p>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.input_variable","title":"input_variable","text":"<pre><code>input_variable(fll: str, engine: Engine | None = None) -&gt; InputVariable\n</code></pre> <p>Return the input variable described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>input variable described using the FuzzyLite Language</p> required <code>engine</code> <code>Engine | None</code> <p>engine to update the reference of the terms in the variable</p> <code>None</code> <p>Returns:</p> Type Description <code>InputVariable</code> <p>input variable described using the FuzzyLite Language</p>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.output_variable","title":"output_variable","text":"<pre><code>output_variable(fll: str, engine: Engine | None = None) -&gt; OutputVariable\n</code></pre> <p>Return the output variable described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>output variable described using the FuzzyLite Language</p> required <code>engine</code> <code>Engine | None</code> <p>engine to update the reference of the terms in the variable</p> <code>None</code> <p>Returns:</p> Type Description <code>OutputVariable</code> <p>output variable described using the FuzzyLite Language</p>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.range","title":"range","text":"<pre><code>range(fll: str) -&gt; tuple[float, float]\n</code></pre> <p>Returns the values of a range described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>range of values described using the FuzzyLite Language (eg, <code>0.0 1.0</code>)</p> required <p>Returns:</p> Type Description <code>tuple[float, float]</code> <p>range of values described using the FuzzyLite Language</p>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.rule","title":"rule","text":"<pre><code>rule(fll: str, engine: Engine | None = None) -&gt; Rule | None\n</code></pre> <p>Return the rule described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>rule described using the FuzzyLite Language</p> required <code>engine</code> <code>Engine | None</code> <p>engine to load the rule</p> <code>None</code> <p>Returns:</p> Type Description <code>Rule | None</code> <p>rule described using the FuzzyLite Language</p>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.rule_block","title":"rule_block","text":"<pre><code>rule_block(fll: str, engine: Engine | None = None) -&gt; RuleBlock\n</code></pre> <p>Return the rule block described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>rule block described using the FuzzyLite Language</p> required <code>engine</code> <code>Engine | None</code> <p>engine to use for loading the rules</p> <code>None</code> <p>Returns:</p> Type Description <code>RuleBlock</code> <p>rule block described using the FuzzyLite Language</p>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.snorm","title":"snorm","text":"<pre><code>snorm(fll: str) -&gt; SNorm | None\n</code></pre> <p>Return the SNorm described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>SNorm described using the FuzzyLite Language</p> required <p>Returns:</p> Type Description <code>SNorm | None</code> <p>SNorm described using the FuzzyLite Language</p>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.term","title":"term","text":"<pre><code>term(fll: str, engine: Engine | None = None) -&gt; Term\n</code></pre> <p>Return the term described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>term described using the FuzzyLite Language</p> required <code>engine</code> <code>Engine | None</code> <p>engine to update the reference of the term</p> <code>None</code> <p>Returns:</p> Type Description <code>Term</code> <p>term described using the FuzzyLite Language</p>"},{"location":"fuzzylite/importer/FllImporter/#fuzzylite.importer.FllImporter.tnorm","title":"tnorm","text":"<pre><code>tnorm(fll: str) -&gt; TNorm | None\n</code></pre> <p>Return the TNorm described using the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>TNorm described using the FuzzyLite Language</p> required <p>Returns:</p> Type Description <code>TNorm | None</code> <p>TNorm described using the FuzzyLite Language</p>"},{"location":"fuzzylite/importer/Importer/","title":"Importer","text":""},{"location":"fuzzylite/importer/Importer/#fuzzylite.importer.Importer","title":"Importer","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for importers to configure an engine and its components from different text formats.</p> related <ul> <li>fuzzylite.exporter.Exporter</li> </ul>"},{"location":"fuzzylite/importer/Importer/#fuzzylite.importer.Importer-functions","title":"Functions","text":""},{"location":"fuzzylite/importer/Importer/#fuzzylite.importer.Importer.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the Python code to construct the importer.</p> <p>Returns:</p> Type Description <code>str</code> <p>Python code to construct the importer.</p>"},{"location":"fuzzylite/importer/Importer/#fuzzylite.importer.Importer.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the class name of the importer.</p> <p>Returns:</p> Type Description <code>str</code> <p>class name of the importer.</p>"},{"location":"fuzzylite/importer/Importer/#fuzzylite.importer.Importer.from_file","title":"from_file","text":"<pre><code>from_file(path: Path | str) -&gt; Engine\n</code></pre> <p>Read from the file the text representation of an engine.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path | str</code> <p>file path to import engine</p> required <p>Returns:</p> Type Description <code>Engine</code> <p>engine represented in the file</p>"},{"location":"fuzzylite/importer/Importer/#fuzzylite.importer.Importer.from_string","title":"from_string  <code>abstractmethod</code>","text":"<pre><code>from_string(text: str) -&gt; Engine\n</code></pre> <p>Return the engine described in the text representation.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>representation of the engine to import</p> required <p>Returns:</p> Type Description <code>Engine</code> <p>engine described in the text representation</p>"},{"location":"fuzzylite/library/Information/","title":"Information","text":""},{"location":"fuzzylite/library/Information/#fuzzylite.library.Information","title":"Information  <code>dataclass</code>","text":"<p>Information about the library.</p>"},{"location":"fuzzylite/library/Information/#fuzzylite.library.Information-attributes","title":"Attributes","text":""},{"location":"fuzzylite/library/Information/#fuzzylite.library.Information.author","title":"author  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>author: Final[str] = 'Juan Rada-Vilela, PhD'\n</code></pre>"},{"location":"fuzzylite/library/Information/#fuzzylite.library.Information.author_email","title":"author_email  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>author_email: Final[str] = 'jcrada@fuzzylite.com'\n</code></pre>"},{"location":"fuzzylite/library/Information/#fuzzylite.library.Information.company","title":"company  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>company: Final[str] = 'FuzzyLite'\n</code></pre>"},{"location":"fuzzylite/library/Information/#fuzzylite.library.Information.copyright","title":"copyright  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>copyright: Final[str] = 'Copyright (C) 2010-2024 FuzzyLite by Juan Rada-Vilela. All rights reserved.'\n</code></pre>"},{"location":"fuzzylite/library/Information/#fuzzylite.library.Information.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: Final[str] = 'a fuzzy logic control library in Python'\n</code></pre>"},{"location":"fuzzylite/library/Information/#fuzzylite.library.Information.license","title":"license  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>license: Final[str] = 'FuzzyLite License'\n</code></pre>"},{"location":"fuzzylite/library/Information/#fuzzylite.library.Information.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: Final[str] = 'fuzzylite'\n</code></pre>"},{"location":"fuzzylite/library/Information/#fuzzylite.library.Information.version","title":"version  <code>property</code>","text":"<pre><code>version: str\n</code></pre> <p>Automatic version of the library handled by poetry using <code>[tool.poetry_bumpversion.file.\"fuzzylite/library.py\"]</code>.</p> <p>Returns:</p> Type Description <code>str</code> <p>version of the library</p>"},{"location":"fuzzylite/library/Information/#fuzzylite.library.Information.website","title":"website  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>website: Final[str] = 'https://fuzzylite.com/'\n</code></pre>"},{"location":"fuzzylite/library/Information/#fuzzylite.library.Information-functions","title":"Functions","text":""},{"location":"fuzzylite/library/Information/#fuzzylite.library.Information.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: Final[str] = \"fuzzylite\",\n    description: Final[str] = \"a fuzzy logic control library in Python\",\n    license: Final[str] = \"FuzzyLite License\",\n    author: Final[str] = \"Juan Rada-Vilela, PhD\",\n    author_email: Final[str] = \"jcrada@fuzzylite.com\",\n    company: Final[str] = \"FuzzyLite\",\n    website: Final[str] = \"https://fuzzylite.com/\",\n    copyright: Final[str] = \"Copyright (C) 2010-2024 FuzzyLite by Juan Rada-Vilela. All rights reserved.\",\n) -&gt; None\n</code></pre>"},{"location":"fuzzylite/library/Information/#fuzzylite.library.Information.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return code to construct the information in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the information in Python</p>"},{"location":"fuzzylite/library/Representation/","title":"Representation","text":""},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation","title":"Representation","text":"<p>               Bases: <code>Repr</code></p> <p>Representation class for the library.</p>"},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation-attributes","title":"Attributes","text":""},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation.T","title":"T  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>T = TypeVar('T')\n</code></pre>"},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation.fll","title":"fll  <code>instance-attribute</code>","text":"<pre><code>fll: Final = FllExporter()\n</code></pre>"},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation.maxlevel","title":"maxlevel  <code>instance-attribute</code>","text":"<pre><code>maxlevel = 10\n</code></pre>"},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation.repr_float128","title":"repr_float128  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repr_float128 = repr_float\n</code></pre>"},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation.repr_float16","title":"repr_float16  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repr_float16 = repr_float\n</code></pre>"},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation.repr_float32","title":"repr_float32  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repr_float32 = repr_float\n</code></pre>"},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation.repr_float64","title":"repr_float64  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>repr_float64 = repr_float\n</code></pre>"},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation-functions","title":"Functions","text":""},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation.__init__","title":"__init__","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return code to construct the representation in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the representation in Python</p>"},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation.as_constructor","title":"as_constructor","text":"<pre><code>as_constructor(\n    x: T, /, fields: dict[str, Any] | None = None, *, positional: bool = False, cast_as: type[T] | None = None\n) -&gt; str\n</code></pre> <p>Return the Python code to use the constructor of the object.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>T</code> <p>object to construct</p> required <code>fields</code> <code>dict[str, Any] | None</code> <p>override the parameters and arguments to use in the constructor</p> <code>None</code> <code>positional</code> <code>bool</code> <p>use positional parameters if <code>true</code>, and keyword parameters otherwise</p> <code>False</code> <code>cast_as</code> <code>type[T] | None</code> <p>type to upcast the object (useful in inheritance approaches)</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>Python code to use the constructor of the object.</p>"},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation.construction_arguments","title":"construction_arguments","text":"<pre><code>construction_arguments(\n    x: T, /, fields: dict[str, Any] | None = None, *, positional: bool = False, cast_as: type[T] | None = None\n) -&gt; list[str]\n</code></pre> <p>Return the list of parameters and arguments for the constructor of the object.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>T</code> <p>object to construct</p> required <code>fields</code> <code>dict[str, Any] | None</code> <p>override the parameters and arguments to use in the constructor</p> <code>None</code> <code>positional</code> <code>bool</code> <p>use positional parameters if <code>true</code>, and keyword parameters otherwise</p> <code>False</code> <code>cast_as</code> <code>type[T] | None</code> <p>type to upcast the object (useful in inheritance approaches)</p> <code>None</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>list of parameters and arguments for the constructor of the object.</p>"},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation.import_statement","title":"import_statement","text":"<pre><code>import_statement() -&gt; str\n</code></pre> <p>Return the library's import statement based on the alias in the settings.</p> related <ul> <li>fuzzylite.library.Settings.alias</li> </ul> <p>Returns:</p> Type Description <code>str</code> <p>library's import statement based on the alias in the settings.</p>"},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation.package_of","title":"package_of","text":"<pre><code>package_of(x: Any) -&gt; str\n</code></pre> <p>Return the qualified class name of the object.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Any</code> <p>object to get package of</p> required <p>Returns:</p> Type Description <code>str</code> <p>qualified class name of the object.</p>"},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation.repr_float","title":"repr_float","text":"<pre><code>repr_float(x: float | floating[Any], level: int) -&gt; str\n</code></pre> <p>Return the string representation of the floating-point value in Python.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float | floating[Any]</code> <p>float to represent</p> required <code>level</code> <code>int</code> <p>irrelevant</p> required <p>Returns:</p> Type Description <code>str</code> <p>string representation of the floating-point value in Python.</p>"},{"location":"fuzzylite/library/Representation/#fuzzylite.library.Representation.repr_ndarray","title":"repr_ndarray","text":"<pre><code>repr_ndarray(x: Array[Any], level: int) -&gt; str\n</code></pre> <p>Return the string representation of the numpy array in Python.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Array[Any]</code> <p>numpy array to represent</p> required <code>level</code> <code>int</code> <p>level for recursion control</p> required <p>Returns:</p> Type Description <code>str</code> <p>string representation of the numpy array in Python</p>"},{"location":"fuzzylite/library/Settings/","title":"Settings","text":""},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings","title":"Settings","text":"<p>Settings for the library.</p>"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings-attributes","title":"Attributes","text":""},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings._factory_manager","title":"_factory_manager  <code>instance-attribute</code>","text":"<pre><code>_factory_manager = factory_manager\n</code></pre>"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings.alias","title":"alias  <code>instance-attribute</code>","text":"<pre><code>alias = alias\n</code></pre>"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings.atol","title":"atol  <code>instance-attribute</code>","text":"<pre><code>atol = atol\n</code></pre>"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings.debugging","title":"debugging  <code>property</code> <code>writable</code>","text":"<pre><code>debugging: bool\n</code></pre> <p>Get/Set the library in debug mode.</p>"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings.debugging--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>bool</code> <p>whether the library is in debug mode</p>"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings.debugging--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>bool</code> <p>set logging level to <code>DEBUG</code> if <code>true</code>, and to <code>ERROR</code> otherwise</p> required"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings.decimals","title":"decimals  <code>instance-attribute</code>","text":"<pre><code>decimals = decimals\n</code></pre>"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings.factory_manager","title":"factory_manager  <code>property</code> <code>writable</code>","text":"<pre><code>factory_manager: FactoryManager\n</code></pre> <p>Get/Set the factory manager.</p>"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings.factory_manager--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>FactoryManager</code> <p>factory manager</p>"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings.factory_manager--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>FactoryManager</code> <p>factory manager</p> required"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings.float_type","title":"float_type  <code>instance-attribute</code>","text":"<pre><code>float_type = float_type\n</code></pre>"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings.logger","title":"logger  <code>instance-attribute</code>","text":"<pre><code>logger = logger or getLogger('fuzzylite')\n</code></pre>"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings.rtol","title":"rtol  <code>instance-attribute</code>","text":"<pre><code>rtol = rtol\n</code></pre>"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings-functions","title":"Functions","text":""},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings.__init__","title":"__init__","text":"<pre><code>__init__(\n    float_type: Any = float64,\n    decimals: int = 3,\n    atol: float = 0.001,\n    rtol: float = 0.0,\n    alias: str = \"fl\",\n    logger: Logger | None = None,\n    factory_manager: FactoryManager | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>float_type</code> <code>Any</code> <p>floating point type.</p> <code>float64</code> <code>decimals</code> <code>int</code> <p>number of decimals.</p> <code>3</code> <code>atol</code> <code>float</code> <p>absolute tolerance.</p> <code>0.001</code> <code>rtol</code> <code>float</code> <p>relative tolerance.</p> <code>0.0</code> <code>alias</code> <code>str</code> <p>alias to use when representing objects (ie, <code>__repr__()</code>). Cases:     - fully qualified package when alias == \"\" (eg, <code>fuzzylite.term.Constant(name=\"A\", height=1.0)</code>)     - no prefixes when alias == \"*\" (eg, <code>Constant(name=\"A\", height=1.0)</code>)     - alias otherwise (eg, <code>{alias}.Constant(name=\"A\", height=1.0)</code></p> <code>'fl'</code> <code>logger</code> <code>Logger | None</code> <p>logger.</p> <code>None</code> <code>factory_manager</code> <code>FactoryManager | None</code> <p>factory manager.</p> <code>None</code>"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return code to construct the settings in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the settings in Python</p>"},{"location":"fuzzylite/library/Settings/#fuzzylite.library.Settings.context","title":"context","text":"<pre><code>context(\n    *,\n    float_type: Any | None = None,\n    decimals: int | None = None,\n    atol: float | None = None,\n    rtol: float | None = None,\n    alias: str | None = None,\n    logger: Logger | None = None,\n    factory_manager: FactoryManager | None = None\n) -&gt; Generator[None, None, None]\n</code></pre> <p>Create a context with specific settings.</p> <p>Parameters:</p> Name Type Description Default <code>float_type</code> <code>Any | None</code> <p>floating point type</p> <code>None</code> <code>decimals</code> <code>int | None</code> <p>number of decimals.</p> <code>None</code> <code>atol</code> <code>float | None</code> <p>absolute tolerance.</p> <code>None</code> <code>rtol</code> <code>float | None</code> <p>relative tolerance.</p> <code>None</code> <code>alias</code> <code>str | None</code> <p>alias for the library.</p> <code>None</code> <code>logger</code> <code>Logger | None</code> <p>logger.</p> <code>None</code> <code>factory_manager</code> <code>FactoryManager | None</code> <p>factory manager.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>context with specific settings.</p>"},{"location":"fuzzylite/library/_information/","title":"information","text":""},{"location":"fuzzylite/library/_information/#fuzzylite.library.information","title":"information  <code>module-attribute</code>","text":"<pre><code>information: Final = Information()\n</code></pre>"},{"location":"fuzzylite/library/_representation/","title":"representation","text":""},{"location":"fuzzylite/library/_representation/#fuzzylite.library.representation","title":"representation  <code>module-attribute</code>","text":"<pre><code>representation: Final = Representation()\n</code></pre>"},{"location":"fuzzylite/library/_settings/","title":"settings","text":""},{"location":"fuzzylite/library/_settings/#fuzzylite.library.settings","title":"settings  <code>module-attribute</code>","text":"<pre><code>settings: Final = Settings()\n</code></pre>"},{"location":"fuzzylite/library/array/","title":"array","text":"<p>Alias to numpy.array</p>"},{"location":"fuzzylite/library/array/#fuzzylite.library.array","title":"array  <code>module-attribute</code>","text":"<pre><code>array: Final = array\n</code></pre>"},{"location":"fuzzylite/library/inf/","title":"inf","text":"<p>Alias to numpy.inf</p>"},{"location":"fuzzylite/library/inf/#fuzzylite.library.inf","title":"inf  <code>module-attribute</code>","text":"<pre><code>inf: Final = inf\n</code></pre>"},{"location":"fuzzylite/library/nan/","title":"nan","text":"<p>Alias to numpy.nan</p>"},{"location":"fuzzylite/library/nan/#fuzzylite.library.nan","title":"nan  <code>module-attribute</code>","text":"<pre><code>nan: Final = nan\n</code></pre>"},{"location":"fuzzylite/library/repr/","title":"repr","text":""},{"location":"fuzzylite/library/repr/#fuzzylite.library.repr","title":"repr  <code>module-attribute</code>","text":"<pre><code>repr: Final = repr\n</code></pre>"},{"location":"fuzzylite/library/scalar/","title":"scalar","text":"<p>Alias to numpy.asarray with data type given by fuzzylite.library.Settings.float_type</p>"},{"location":"fuzzylite/library/scalar/#fuzzylite.library.scalar","title":"scalar","text":"<pre><code>scalar(x: Sequence[Any] | Array[Any]) -&gt; ScalarArray\n</code></pre><pre><code>scalar(x: Any) -&gt; Scalar\n</code></pre> <pre><code>scalar(x: Sequence[Any] | Array[Any] | Any, /, **kwargs: Any) -&gt; ScalarArray | Scalar\n</code></pre> <p>Convert the values into a floating point value defined by the library.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Sequence[Any] | Array[Any] | Any</code> <p>value to convert.</p> required <code>**kwargs</code> <code>Any</code> <p>keyword arguments to pass to numpy.asarray</p> <code>{}</code> <p>Returns:</p> Type Description <code>ScalarArray | Scalar</code> <p>array of converted values</p>"},{"location":"fuzzylite/library/to_float/","title":"to_float","text":""},{"location":"fuzzylite/library/to_float/#fuzzylite.library.to_float","title":"to_float","text":"<pre><code>to_float(x: Any) -&gt; float\n</code></pre> <p>Convert the value into a floating point defined by the library.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Any</code> <p>value to convert.</p> required <p>Returns:</p> Type Description <code>float</code> <p>converted value</p>"},{"location":"fuzzylite/norm/AlgebraicProduct/","title":"AlgebraicProduct","text":""},{"location":"fuzzylite/norm/AlgebraicProduct/#fuzzylite.norm.AlgebraicProduct","title":"AlgebraicProduct","text":"<p>               Bases: <code>TNorm</code></p> <p>TNorm to compute the algebraic product of any two values.</p> <p></p> Equation <p>\\(a \\otimes b=a\\times b\\)</p> related <ul> <li>fuzzylite.norm.AlgebraicSum</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/norm/AlgebraicProduct/#fuzzylite.norm.AlgebraicProduct-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/AlgebraicProduct/#fuzzylite.norm.AlgebraicProduct.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the algebraic product of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b=a\\times b\\)</p>"},{"location":"fuzzylite/norm/AlgebraicSum/","title":"AlgebraicSum","text":""},{"location":"fuzzylite/norm/AlgebraicSum/#fuzzylite.norm.AlgebraicSum","title":"AlgebraicSum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the algebraic sum of values any two values.</p> <p></p> Equation <p>\\(a \\oplus b=a+b-(a \\times b)\\)</p> related <ul> <li>fuzzylite.norm.AlgebraicProduct</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/norm/AlgebraicSum/#fuzzylite.norm.AlgebraicSum-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/AlgebraicSum/#fuzzylite.norm.AlgebraicSum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the algebraic sum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=a+b-(a \\times b)\\)</p>"},{"location":"fuzzylite/norm/BoundedDifference/","title":"BoundedDifference","text":""},{"location":"fuzzylite/norm/BoundedDifference/#fuzzylite.norm.BoundedDifference","title":"BoundedDifference","text":"<p>               Bases: <code>TNorm</code></p> <p>TNorm to compute the bounded difference between any two values.</p> <p></p> Equation <p>\\(a \\otimes b=\\max(0, a + b - 1)\\)</p> related <ul> <li>fuzzylite.norm.BoundedSum</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/norm/BoundedDifference/#fuzzylite.norm.BoundedDifference-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/BoundedDifference/#fuzzylite.norm.BoundedDifference.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the bounded difference between two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b=\\max(0, a + b - 1)\\)</p>"},{"location":"fuzzylite/norm/BoundedSum/","title":"BoundedSum","text":""},{"location":"fuzzylite/norm/BoundedSum/#fuzzylite.norm.BoundedSum","title":"BoundedSum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the bounded sum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=\\min(1, a+b)\\)</p> related <ul> <li>fuzzylite.norm.BoundedDifference</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/norm/BoundedSum/#fuzzylite.norm.BoundedSum-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/BoundedSum/#fuzzylite.norm.BoundedSum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the bounded sum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=\\min(1, a+b)\\)</p>"},{"location":"fuzzylite/norm/DrasticProduct/","title":"DrasticProduct","text":""},{"location":"fuzzylite/norm/DrasticProduct/#fuzzylite.norm.DrasticProduct","title":"DrasticProduct","text":"<p>               Bases: <code>TNorm</code></p> <p>TNorm to compute the drastic product of any two values.</p> <p></p> Equation <p>\\(a \\otimes b = \\begin{cases}     \\min(a,b) &amp; \\mbox{if } \\max(a,b)=1 \\cr     0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> related <ul> <li>fuzzylite.norm.DrasticSum</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/norm/DrasticProduct/#fuzzylite.norm.DrasticProduct-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/DrasticProduct/#fuzzylite.norm.DrasticProduct.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the drastic product of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value.</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b = \\begin{cases} \\min(a,b) &amp; \\mbox{if } \\max(a,b)=1 \\cr 0 &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/norm/DrasticSum/","title":"DrasticSum","text":""},{"location":"fuzzylite/norm/DrasticSum/#fuzzylite.norm.DrasticSum","title":"DrasticSum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the drastic sum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=\\begin{cases}     \\max(a,b) &amp; \\mbox{if } \\min(a,b)=0 \\cr      1 &amp; \\mbox{otherwise} \\end{cases}\\)</p> related <ul> <li>fuzzylite.norm.DrasticProduct</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/norm/DrasticSum/#fuzzylite.norm.DrasticSum-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/DrasticSum/#fuzzylite.norm.DrasticSum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the drastic sum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=\\begin{cases}  \\max(a,b) &amp; \\mbox{if } \\min(a,b)=0 \\cr  1 &amp; \\mbox{otherwise}  \\end{cases}\\)</p>"},{"location":"fuzzylite/norm/EinsteinProduct/","title":"EinsteinProduct","text":""},{"location":"fuzzylite/norm/EinsteinProduct/#fuzzylite.norm.EinsteinProduct","title":"EinsteinProduct","text":"<p>               Bases: <code>TNorm</code></p> <p>TNorm to compute the Einstein product of any two values.</p> <p></p> Equation <p>\\(a \\otimes b=\\dfrac{a\\times b}{2-(a+b-a\\times b)}\\)</p> related <ul> <li>fuzzylite.norm.EinsteinSum</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/norm/EinsteinProduct/#fuzzylite.norm.EinsteinProduct-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/EinsteinProduct/#fuzzylite.norm.EinsteinProduct.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the Einstein product of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b=\\dfrac{a\\times b}{2-(a+b-a\\times b)}\\)</p>"},{"location":"fuzzylite/norm/EinsteinSum/","title":"EinsteinSum","text":""},{"location":"fuzzylite/norm/EinsteinSum/#fuzzylite.norm.EinsteinSum","title":"EinsteinSum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the einstein sum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=\\dfrac{a+b}{1+a \\times b}\\)</p> related <ul> <li>fuzzylite.norm.EinsteinProduct</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/norm/EinsteinSum/#fuzzylite.norm.EinsteinSum-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/EinsteinSum/#fuzzylite.norm.EinsteinSum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the Einstein sum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=\\dfrac{a+b}{1+a \\times b}\\)</p>"},{"location":"fuzzylite/norm/HamacherProduct/","title":"HamacherProduct","text":""},{"location":"fuzzylite/norm/HamacherProduct/#fuzzylite.norm.HamacherProduct","title":"HamacherProduct","text":"<p>               Bases: <code>TNorm</code></p> <p>TNorm to compute the Hamacher product of any two values.</p> <p></p> Equation <p>\\(a \\otimes b=\\dfrac{a \\times b}{a+b- a \\times b}\\)</p> related <ul> <li>fuzzylite.norm.HamacherSum</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/norm/HamacherProduct/#fuzzylite.norm.HamacherProduct-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/HamacherProduct/#fuzzylite.norm.HamacherProduct.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the Hamacher product of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b=\\dfrac{a \\times b}{a+b- a \\times b}\\)</p>"},{"location":"fuzzylite/norm/HamacherSum/","title":"HamacherSum","text":""},{"location":"fuzzylite/norm/HamacherSum/#fuzzylite.norm.HamacherSum","title":"HamacherSum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the Hamacher sum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=\\dfrac{a+b-2(\\times a \\times b)}{1-a\\times b}\\)</p> related <ul> <li>fuzzylite.norm.HamacherProduct</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/norm/HamacherSum/#fuzzylite.norm.HamacherSum-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/HamacherSum/#fuzzylite.norm.HamacherSum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the Hamacher sum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=\\dfrac{a+b-2(\\times a \\times b)}{1-a\\times b}\\)</p>"},{"location":"fuzzylite/norm/Maximum/","title":"Maximum","text":""},{"location":"fuzzylite/norm/Maximum/#fuzzylite.norm.Maximum","title":"Maximum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the maximum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=\\max(a,b)\\)</p> related <ul> <li>fuzzylite.norm.Minimum</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/norm/Maximum/#fuzzylite.norm.Maximum-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/Maximum/#fuzzylite.norm.Maximum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the maximum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=\\max(a,b)\\)</p>"},{"location":"fuzzylite/norm/Minimum/","title":"Minimum","text":""},{"location":"fuzzylite/norm/Minimum/#fuzzylite.norm.Minimum","title":"Minimum","text":"<p>               Bases: <code>TNorm</code></p> <p>TNorm that computes the minimum of any two values.</p> <p></p> Equation <p>\\(a \\otimes b=\\min(a,b)\\)</p> related <ul> <li>fuzzylite.norm.Maximum</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/norm/Minimum/#fuzzylite.norm.Minimum-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/Minimum/#fuzzylite.norm.Minimum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the minimum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b=\\min(a,b)\\)</p>"},{"location":"fuzzylite/norm/NilpotentMaximum/","title":"NilpotentMaximum","text":""},{"location":"fuzzylite/norm/NilpotentMaximum/#fuzzylite.norm.NilpotentMaximum","title":"NilpotentMaximum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the nilpotent maximum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=\\begin{cases} \\max(a,b) &amp; \\mbox{if } a+b&lt;0 \\cr 1 &amp; \\mbox{otherwise} \\end{cases}\\)</p> related <ul> <li>fuzzylite.norm.NilpotentMinimum</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/norm/NilpotentMaximum/#fuzzylite.norm.NilpotentMaximum-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/NilpotentMaximum/#fuzzylite.norm.NilpotentMaximum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the nilpotent maximum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=\\begin{cases} \\max(a,b) &amp; \\mbox{if } a+b&lt;0 \\cr 1 &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/norm/NilpotentMinimum/","title":"NilpotentMinimum","text":""},{"location":"fuzzylite/norm/NilpotentMinimum/#fuzzylite.norm.NilpotentMinimum","title":"NilpotentMinimum","text":"<p>               Bases: <code>TNorm</code></p> <p>TNorm to compute the nilpotent minimum of any two values.</p> <p></p> Equation <p>\\(a \\otimes b=\\begin{cases}     \\min(a,b) &amp; \\mbox{if }a+b&gt;1 \\cr     0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> related <ul> <li>fuzzylite.norm.NilpotentMaximum</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/norm/NilpotentMinimum/#fuzzylite.norm.NilpotentMinimum-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/NilpotentMinimum/#fuzzylite.norm.NilpotentMinimum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the nilpotent minimum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b=\\begin{cases}  \\min(a,b) &amp; \\mbox{if }a+b&gt;1 \\cr  0 &amp; \\mbox{otherwise}  \\end{cases}\\)</p>"},{"location":"fuzzylite/norm/Norm/","title":"Norm","text":""},{"location":"fuzzylite/norm/Norm/#fuzzylite.norm.Norm","title":"Norm","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for norms.</p> fuzzylite.norm.TNorm fuzzylite.norm.SNorm fuzzylite.norm.AlgebraicProduct fuzzylite.norm.AlgebraicSum fuzzylite.norm.BoundedDifference fuzzylite.norm.BoundedSum fuzzylite.norm.DrasticProduct fuzzylite.norm.DrasticSum fuzzylite.norm.EinsteinProduct fuzzylite.norm.EinsteinSum fuzzylite.norm.HamacherProduct fuzzylite.norm.HamacherSum fuzzylite.norm.Minimum fuzzylite.norm.Maximum fuzzylite.norm.NilpotentMinimum fuzzylite.norm.NilpotentMaximum fuzzylite.norm.NormalizedSum fuzzylite.norm.UnboundedSum related <ul> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.factory.SNormFactory</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/norm/Norm/#fuzzylite.norm.Norm-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/Norm/#fuzzylite.norm.Norm.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the norm in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the norm in Python.</p>"},{"location":"fuzzylite/norm/Norm/#fuzzylite.norm.Norm.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the norm in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the norm in the FuzzyLite Language.</p>"},{"location":"fuzzylite/norm/Norm/#fuzzylite.norm.Norm.compute","title":"compute  <code>abstractmethod</code>","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Implement the norm.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>norm between \\(a\\) and \\(b\\)</p>"},{"location":"fuzzylite/norm/NormFunction/","title":"NormFunction","text":""},{"location":"fuzzylite/norm/NormFunction/#fuzzylite.norm.NormFunction","title":"NormFunction","text":"<p>               Bases: <code>TNorm</code>, <code>SNorm</code></p> <p>TNorm or SNorm based on a term function on any two values.</p> Equation <p>\\(a \\oplus b = a \\otimes b = f(a,b)\\)</p> <p>This Norm is not registered in the SNormFactory or TNormFactory.</p> related <ul> <li>fuzzylite.norm.NormLambda</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/norm/NormFunction/#fuzzylite.norm.NormFunction-attributes","title":"Attributes","text":""},{"location":"fuzzylite/norm/NormFunction/#fuzzylite.norm.NormFunction.function","title":"function  <code>instance-attribute</code>","text":"<pre><code>function = function\n</code></pre>"},{"location":"fuzzylite/norm/NormFunction/#fuzzylite.norm.NormFunction-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/NormFunction/#fuzzylite.norm.NormFunction.__init__","title":"__init__","text":"<pre><code>__init__(function: Function) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Function</code> <p>function \\(f(a,b)\\).</p> required"},{"location":"fuzzylite/norm/NormFunction/#fuzzylite.norm.NormFunction.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the norm in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the norm in Python.</p>"},{"location":"fuzzylite/norm/NormFunction/#fuzzylite.norm.NormFunction.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the Norm using \\(f(a,b)\\).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=f(a,b)\\)</p>"},{"location":"fuzzylite/norm/NormLambda/","title":"NormLambda","text":""},{"location":"fuzzylite/norm/NormLambda/#fuzzylite.norm.NormLambda","title":"NormLambda","text":"<p>               Bases: <code>TNorm</code>, <code>SNorm</code></p> <p>TNorm or SNorm based on a \\(\\lambda\\) function on any two values.</p> Equation <p>\\(a \\oplus b = a \\otimes b = \\lambda(a,b)\\)</p> <p>This Norm is not registered in the SNormFactory or TNormFactory.</p> related <ul> <li>fuzzylite.norm.NormFunction</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/norm/NormLambda/#fuzzylite.norm.NormLambda-attributes","title":"Attributes","text":""},{"location":"fuzzylite/norm/NormLambda/#fuzzylite.norm.NormLambda.function","title":"function  <code>instance-attribute</code>","text":"<pre><code>function = function\n</code></pre>"},{"location":"fuzzylite/norm/NormLambda/#fuzzylite.norm.NormLambda-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/NormLambda/#fuzzylite.norm.NormLambda.__init__","title":"__init__","text":"<pre><code>__init__(function: Callable[[Scalar, Scalar], Scalar]) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Callable[[Scalar, Scalar], Scalar]</code> <p>function \\(\\lambda(a,b)\\).</p> required"},{"location":"fuzzylite/norm/NormLambda/#fuzzylite.norm.NormLambda.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the norm in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the norm in Python.</p>"},{"location":"fuzzylite/norm/NormLambda/#fuzzylite.norm.NormLambda.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the norm using \\(\\lambda(a,b)\\).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b = a \\otimes b = \\lambda(a,b)\\)</p>"},{"location":"fuzzylite/norm/NormalizedSum/","title":"NormalizedSum","text":""},{"location":"fuzzylite/norm/NormalizedSum/#fuzzylite.norm.NormalizedSum","title":"NormalizedSum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the normalized sum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=\\dfrac{a+b}{\\max(1, a + b)}\\)</p> related <ul> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/norm/NormalizedSum/#fuzzylite.norm.NormalizedSum-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/NormalizedSum/#fuzzylite.norm.NormalizedSum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the normalized sum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=\\dfrac{a+b}{\\max(1, a + b)}\\)</p>"},{"location":"fuzzylite/norm/SNorm/","title":"SNorm","text":""},{"location":"fuzzylite/norm/SNorm/#fuzzylite.norm.SNorm","title":"SNorm","text":"<p>               Bases: <code>Norm</code></p> <p>Base class for S-Norms, used as fuzzy logic operator for disjunction and aggregation in rule blocks.</p> fuzzylite.norm.SNorm fuzzylite.norm.AlgebraicSum fuzzylite.norm.BoundedSum fuzzylite.norm.DrasticSum fuzzylite.norm.EinsteinSum fuzzylite.norm.HamacherSum fuzzylite.norm.Maximum fuzzylite.norm.NilpotentMaximum fuzzylite.norm.NormalizedSum fuzzylite.norm.UnboundedSum related <ul> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.term.Aggregated</li> <li>fuzzylite.rule.RuleBlock</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/norm/SNorm/#fuzzylite.norm.SNorm-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/SNorm/#fuzzylite.norm.SNorm.compute","title":"compute  <code>abstractmethod</code>","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Implement the S-Norm \\(a \\oplus b\\).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b\\)</p>"},{"location":"fuzzylite/norm/TNorm/","title":"TNorm","text":""},{"location":"fuzzylite/norm/TNorm/#fuzzylite.norm.TNorm","title":"TNorm","text":"<p>               Bases: <code>Norm</code></p> <p>Base class for T-Norms, used as fuzzy logic operator for conjunction and implication in rule blocks.</p> fuzzylite.norm.TNorm fuzzylite.norm.AlgebraicProduct fuzzylite.norm.BoundedDifference fuzzylite.norm.DrasticProduct fuzzylite.norm.EinsteinProduct fuzzylite.norm.HamacherProduct fuzzylite.norm.Minimum fuzzylite.norm.NilpotentMinimum related <ul> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.term.Activated</li> <li>fuzzylite.rule.RuleBlock</li> <li>fuzzylite.factory.TNormFactory</li> </ul>"},{"location":"fuzzylite/norm/TNorm/#fuzzylite.norm.TNorm-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/TNorm/#fuzzylite.norm.TNorm.compute","title":"compute  <code>abstractmethod</code>","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Implement the T-Norm \\(a \\otimes b\\).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\otimes b\\)</p>"},{"location":"fuzzylite/norm/UnboundedSum/","title":"UnboundedSum","text":""},{"location":"fuzzylite/norm/UnboundedSum/#fuzzylite.norm.UnboundedSum","title":"UnboundedSum","text":"<p>               Bases: <code>SNorm</code></p> <p>SNorm to compute the sum of any two values.</p> <p></p> Equation <p>\\(a \\oplus b=a+b\\)</p> related <ul> <li>fuzzylite.norm.BoundedSum</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.Norm</li> <li>fuzzylite.factory.SNormFactory</li> </ul>"},{"location":"fuzzylite/norm/UnboundedSum/#fuzzylite.norm.UnboundedSum-functions","title":"Functions","text":""},{"location":"fuzzylite/norm/UnboundedSum/#fuzzylite.norm.UnboundedSum.compute","title":"compute","text":"<pre><code>compute(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the sum of two membership function values.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>membership function value</p> required <code>b</code> <code>Scalar</code> <p>membership function value</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\oplus b=a+b\\)</p>"},{"location":"fuzzylite/operation/Op/","title":"Op","text":""},{"location":"fuzzylite/operation/Op/#fuzzylite.operation.Op","title":"Op  <code>module-attribute</code>","text":"<pre><code>Op = Operation\n</code></pre>"},{"location":"fuzzylite/operation/Operation/","title":"Operation","text":""},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation","title":"Operation","text":"<p>Methods for numeric operations, string manipulation, and other functions.</p> <p><code>fl.Op</code> is a shortcut to this class.</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation-attributes","title":"Attributes","text":""},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.isinf","title":"isinf  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>isinf = isinf\n</code></pre>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.isnan","title":"isnan  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>isnan = isnan\n</code></pre>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation-functions","title":"Functions","text":""},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.arity_of","title":"arity_of  <code>staticmethod</code>","text":"<pre><code>arity_of(method: Callable) -&gt; int\n</code></pre> <p>Gets the arity of the method.</p> <p>Parameters:</p> Name Type Description Default <code>method</code> <code>Callable</code> <p>method to get the arity from</p> required <p>Returns:</p> Type Description <code>int</code> <p>arity of the method.</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.as_identifier","title":"as_identifier  <code>staticmethod</code>","text":"<pre><code>as_identifier(name: str) -&gt; str\n</code></pre> <p>Convert the name into a valid FuzzyLite and Python identifier by removing non-alphanumeric characters and prepending <code>_</code> to names starting with a number.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name to convert</p> required <p>Returns:</p> Type Description <code>str</code> <p>name as a valid identifier.</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.bound","title":"bound  <code>staticmethod</code>","text":"<pre><code>bound(x: Scalar, minimum: float, maximum: float) -&gt; Scalar\n</code></pre> <p>Return \\(x\\) clipped between <code>[minimum, maximum]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>value to be clipped</p> required <code>minimum</code> <code>float</code> <p>minimum value of the range</p> required <code>maximum</code> <code>float</code> <p>maximum value of the range</p> required <p>Returns:</p> Type Description <code>Scalar</code> \\[\\begin{cases} \\min &amp; \\mbox{if $x &lt; \\min$} \\cr \\max &amp; \\mbox{if $x &gt; \\max$} \\cr x &amp; \\mbox{otherwise} \\end{cases}\\]"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.class_name","title":"class_name  <code>staticmethod</code>","text":"<pre><code>class_name(x: Any, /, qualname: bool = False) -&gt; str\n</code></pre> <p>Return the class name of the object.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Any</code> <p>object to get the class name</p> required <code>qualname</code> <code>bool</code> <p>use fully qualified classes</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>class name of the given object.</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.describe","title":"describe  <code>staticmethod</code>","text":"<pre><code>describe(instance: object, variables: bool = True, class_hierarchy: bool = False) -&gt; str\n</code></pre> <p>Describe the instance based on its variables and class hierarchy.</p> <p>Parameters:</p> Name Type Description Default <code>instance</code> <code>object</code> <p>instance to describe</p> required <code>variables</code> <code>bool</code> <p>include variables in the description</p> <code>True</code> <code>class_hierarchy</code> <code>bool</code> <p>include class hierarchy in the description.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>description of the instance</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.eq","title":"eq  <code>staticmethod</code>","text":"<pre><code>eq(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Return \\(a = b\\) (with NaN's as equal).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>scalar</p> required <code>b</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a=b\\)</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.ge","title":"ge  <code>staticmethod</code>","text":"<pre><code>ge(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Return \\(a \\ge b\\) (with NaN's as equal).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>scalar</p> required <code>b</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\ge b\\)</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.glob_examples","title":"glob_examples  <code>staticmethod</code>","text":"<pre><code>glob_examples(\n    return_type: Literal[\"module\"], module: ModuleType | None = None, recursive: bool = True\n) -&gt; Iterable[ModuleType]\n</code></pre><pre><code>glob_examples(\n    return_type: Literal[\"engine\"], module: ModuleType | None = None, recursive: bool = True\n) -&gt; Iterable[Engine]\n</code></pre><pre><code>glob_examples(\n    return_type: Literal[\"dataset\"] | Literal[\"fld\"], module: ModuleType | None = None, recursive: bool = True\n) -&gt; Iterable[ScalarArray]\n</code></pre><pre><code>glob_examples(\n    return_type: Literal[\"language\"] | Literal[\"fll\"], module: ModuleType | None = None, recursive: bool = True\n) -&gt; Iterable[str]\n</code></pre><pre><code>glob_examples(\n    return_type: Literal[\"files\"], module: ModuleType | None = None, recursive: bool = True\n) -&gt; Iterable[Path]\n</code></pre> <pre><code>glob_examples(\n    return_type: (\n        Literal[\"module\"]\n        | Literal[\"engine\"]\n        | Literal[\"dataset\"]\n        | Literal[\"fld\"]\n        | Literal[\"language\"]\n        | Literal[\"fll\"]\n        | Literal[\"files\"]\n    ) = \"engine\",\n    module: ModuleType | None = None,\n    recursive: bool = True,\n) -&gt; Iterable[ModuleType | Engine | ScalarArray | str | Path]\n</code></pre> <p>Glob the examples (alphabetically and in ascending order) returning the specified type.</p> <p>Parameters:</p> Name Type Description Default <code>return_type</code> <code>Literal['module'] | Literal['engine'] | Literal['dataset'] | Literal['fld'] | Literal['language'] | Literal['fll'] | Literal['files']</code> <p>type of objects to return</p> <code>'engine'</code> <code>module</code> <code>ModuleType | None</code> <p>package (eg, <code>fuzzylite.examples</code>) or module (eg, <code>fuzzylite.examples.terms.arc</code>) to glob</p> <code>None</code> <code>recursive</code> <code>bool</code> <p>recursively glob into subdirectories</p> <code>True</code> <p>Yields:</p> Type Description <code>Iterable[ModuleType | Engine | ScalarArray | str | Path]</code> <p>Iterable of the specified type.</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.gt","title":"gt  <code>staticmethod</code>","text":"<pre><code>gt(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Return \\(a &gt; b\\).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>scalar</p> required <code>b</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a&gt;b\\)</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.increment","title":"increment  <code>staticmethod</code>","text":"<pre><code>increment(x: list[int], minimum: list[int], maximum: list[int], position: int | None = None) -&gt; bool\n</code></pre> <p>Increment the list by the unit.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>list[int]</code> <p>list to increment</p> required <code>minimum</code> <code>list[int]</code> <p>list of minimum values for each element in the list</p> required <code>maximum</code> <code>list[int]</code> <p>list of maximum values for each element in the list</p> required <code>position</code> <code>int | None</code> <p>position in the list to increment</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>whether the list was incremented.</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.is_close","title":"is_close  <code>staticmethod</code>","text":"<pre><code>is_close(a: Scalar, b: Scalar) -&gt; bool | Array[bool_]\n</code></pre> <p>Return \\(a \\approx b\\) (with NaN's as equal) using the absolute and relative tolerances of the library.</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>scalar</p> required <code>b</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>bool | Array[bool_]</code> <p>\\(a \\approx b\\)</p> related <ul> <li>fuzzylite.library.Settings</li> </ul>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.le","title":"le  <code>staticmethod</code>","text":"<pre><code>le(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Return \\(a \\le b\\) (with NaN's as equal).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>scalar</p> required <code>b</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a \\le b\\)</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.lt","title":"lt  <code>staticmethod</code>","text":"<pre><code>lt(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Return \\(a &lt; b\\).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>scalar</p> required <code>b</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a &lt; b\\)</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.midpoints","title":"midpoints  <code>staticmethod</code>","text":"<pre><code>midpoints(start: float, end: float, resolution: int = 1000) -&gt; ScalarArray\n</code></pre> <p>Return the list of values in the range at the given resolution using the midpoint rule.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>start of range</p> required <code>end</code> <code>float</code> <p>end of range</p> required <code>resolution</code> <code>int</code> <p>number of divisions to discretize the range</p> <code>1000</code> <p>Returns:</p> Type Description <code>ScalarArray</code> <p>list of values in the range at the given resolution using the midpoint rule</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.neq","title":"neq  <code>staticmethod</code>","text":"<pre><code>neq(a: Scalar, b: Scalar) -&gt; Scalar\n</code></pre> <p>Return \\(a \\not= b\\) (with NaN's as equal).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>Scalar</code> <p>scalar</p> required <code>b</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(a\\not=b\\)</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.pascal_case","title":"pascal_case  <code>staticmethod</code>","text":"<pre><code>pascal_case(text: str) -&gt; str\n</code></pre> <p>Converts the string to PascalCase.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>any string</p> required <p>Returns:</p> Type Description <code>str</code> <p>text in <code>PascalCase</code></p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.scale","title":"scale  <code>staticmethod</code>","text":"<pre><code>scale(x: Scalar, x_min: float, x_max: float, y_min: float, y_max: float) -&gt; Scalar\n</code></pre> <p>Linearly interpolates \\(x\\) from the source range <code>[from_minimum, from_maximum]</code> to its new value in the target range <code>[to_minimum, to_maximum]</code>.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>value to interpolate</p> required <code>x_min</code> <code>float</code> <p>minimum value of the source range</p> required <code>x_max</code> <code>float</code> <p>maximum value of the source range</p> required <code>y_min</code> <code>float</code> <p>minimum value of the target range</p> required <code>y_max</code> <code>float</code> <p>maximum value of the target range</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x\\) linearly interpolated to the target range as: \\(y = \\dfrac{y_\\max - y_\\min}{x_\\max-x_\\min} (x-x_\\min) + y_\\min\\)</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.snake_case","title":"snake_case  <code>staticmethod</code>","text":"<pre><code>snake_case(text: str) -&gt; str\n</code></pre> <p>Converts the string to snake_case.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>any string</p> required <p>Returns:</p> Type Description <code>str</code> <p>text in <code>snake_case</code></p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.str","title":"str  <code>staticmethod</code>","text":"<pre><code>str(x: Any, /, delimiter: str = ' ') -&gt; str\n</code></pre> <p>Returns a string representation of the value.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Any</code> <p>value</p> required <code>delimiter</code> <code>str</code> <p>delimiter to use when <code>x</code> is a <code>Sequence</code> or <code>ScalarArray</code></p> <code>' '</code> <p>Returns:</p> Type Description <code>str</code> <p>string representation of the value.</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.strip_comments","title":"strip_comments  <code>staticmethod</code>","text":"<pre><code>strip_comments(fll: str, /, delimiter: str = '#') -&gt; str\n</code></pre> <p>Remove the comments from the text.</p> <p>Parameters:</p> Name Type Description Default <code>fll</code> <code>str</code> <p>text to strip comments from</p> required <code>delimiter</code> <code>str</code> <p>delimiter that indicates the start of a comment.</p> <code>'#'</code> <p>Returns:</p> Type Description <code>str</code> <p>text with comments stripped out.</p>"},{"location":"fuzzylite/operation/Operation/#fuzzylite.operation.Operation.to_fll","title":"to_fll  <code>staticmethod</code>","text":"<pre><code>to_fll(x: Any) -&gt; str\n</code></pre> <p>Return the string representation of the object in the FuzzyLite Language.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Any</code> <p>object</p> required <p>Returns:</p> Type Description <code>str</code> <p>string representation of the object in the FuzzyLite Language.</p>"},{"location":"fuzzylite/rule/Antecedent/","title":"Antecedent","text":""},{"location":"fuzzylite/rule/Antecedent/#fuzzylite.rule.Antecedent","title":"Antecedent","text":"<p>Expression tree that represents and evaluates the antecedent of a rule.</p> structure <p>The structure of a rule is:  <code>if (antecedent) then (consequent)</code></p> <p>The structure of the antecedent of a rule is:  <code>if variable is [hedge]* term [(and|or) variable is [hedge]* term]*</code></p> <p><code>*</code>-marked elements may appear zero or more times,  elements in brackets are optional, and  elements in parentheses are compulsory.</p> related <ul> <li>fuzzylite.rule.Consequent</li> <li>fuzzylite.rule.Rule</li> </ul>"},{"location":"fuzzylite/rule/Antecedent/#fuzzylite.rule.Antecedent-attributes","title":"Attributes","text":""},{"location":"fuzzylite/rule/Antecedent/#fuzzylite.rule.Antecedent.expression","title":"expression  <code>instance-attribute</code>","text":"<pre><code>expression: Expression | None = None\n</code></pre>"},{"location":"fuzzylite/rule/Antecedent/#fuzzylite.rule.Antecedent.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text = text\n</code></pre>"},{"location":"fuzzylite/rule/Antecedent/#fuzzylite.rule.Antecedent-functions","title":"Functions","text":""},{"location":"fuzzylite/rule/Antecedent/#fuzzylite.rule.Antecedent.__init__","title":"__init__","text":"<pre><code>__init__(text: str = '') -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>antecedent as text.</p> <code>''</code>"},{"location":"fuzzylite/rule/Antecedent/#fuzzylite.rule.Antecedent.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the antecedent in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the antecedent in Python.</p>"},{"location":"fuzzylite/rule/Antecedent/#fuzzylite.rule.Antecedent.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the antecedent as text.</p> <p>Returns:</p> Type Description <code>str</code> <p>antecedent as text</p>"},{"location":"fuzzylite/rule/Antecedent/#fuzzylite.rule.Antecedent.activation_degree","title":"activation_degree","text":"<pre><code>activation_degree(\n    conjunction: TNorm | None = None, disjunction: SNorm | None = None, node: Expression | None = None\n) -&gt; Scalar\n</code></pre> <p>Compute the activation degree of the antecedent on the expression tree from the given node.</p> <p>Parameters:</p> Name Type Description Default <code>conjunction</code> <code>TNorm | None</code> <p>conjunction operator from the rule block</p> <code>None</code> <code>disjunction</code> <code>SNorm | None</code> <p>disjunction operator from the rule block</p> <code>None</code> <code>node</code> <code>Expression | None</code> <p>node in the expression tree of the antecedent</p> <code>None</code> <p>Returns:</p> Type Description <code>Scalar</code> <p>activation degree of the antecedent.</p>"},{"location":"fuzzylite/rule/Antecedent/#fuzzylite.rule.Antecedent.infix","title":"infix","text":"<pre><code>infix(node: Expression | None = None) -&gt; str\n</code></pre> <p>Return the infix notation of the node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Expression | None</code> <p>node in the expression tree of the antecedent</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>infix notation of the node.</p>"},{"location":"fuzzylite/rule/Antecedent/#fuzzylite.rule.Antecedent.is_loaded","title":"is_loaded","text":"<pre><code>is_loaded() -&gt; bool\n</code></pre> <p>Return whether the antecedent is loaded.</p> <p>Returns:</p> Type Description <code>bool</code> <p>antecedent is loaded.</p>"},{"location":"fuzzylite/rule/Antecedent/#fuzzylite.rule.Antecedent.load","title":"load","text":"<pre><code>load(engine: Engine) -&gt; None\n</code></pre> <p>Load the antecedent using the engine to identify and get references to the input and output variables.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to get references in the antecedent.</p> required"},{"location":"fuzzylite/rule/Antecedent/#fuzzylite.rule.Antecedent.postfix","title":"postfix","text":"<pre><code>postfix(node: Expression | None = None) -&gt; str\n</code></pre> <p>Return the postfix notation of the node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Expression | None</code> <p>node in the expression tree of the antecedent</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>postfix notation of the node.</p>"},{"location":"fuzzylite/rule/Antecedent/#fuzzylite.rule.Antecedent.prefix","title":"prefix","text":"<pre><code>prefix(node: Expression | None = None) -&gt; str\n</code></pre> <p>Return the prefix notation of the node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Expression | None</code> <p>node in the expression tree of the antecedent</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>prefix notation of the node.</p>"},{"location":"fuzzylite/rule/Antecedent/#fuzzylite.rule.Antecedent.unload","title":"unload","text":"<pre><code>unload() -&gt; None\n</code></pre> <p>Unload the antecedent.</p>"},{"location":"fuzzylite/rule/Consequent/","title":"Consequent","text":""},{"location":"fuzzylite/rule/Consequent/#fuzzylite.rule.Consequent","title":"Consequent","text":"<p>Proposition set that represents and evaluates the consequent of a rule.</p> structure <p>The structure of a rule is:  <code>if (antecedent) then (consequent)</code></p> <p>The structure of the consequent of a rule is:  <code>then variable is [hedge]* term [and variable is [hedge]* term]* [with w]?</code></p> <p><code>*</code>-marked elements may appear zero or more times,  elements in brackets are optional,  elements in parentheses are compulsory, and  <code>?</code>-marked elements may appear once or not at all.</p> related <ul> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Rule</li> </ul>"},{"location":"fuzzylite/rule/Consequent/#fuzzylite.rule.Consequent-attributes","title":"Attributes","text":""},{"location":"fuzzylite/rule/Consequent/#fuzzylite.rule.Consequent.conclusions","title":"conclusions  <code>instance-attribute</code>","text":"<pre><code>conclusions: list[Proposition] = []\n</code></pre>"},{"location":"fuzzylite/rule/Consequent/#fuzzylite.rule.Consequent.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str = text\n</code></pre>"},{"location":"fuzzylite/rule/Consequent/#fuzzylite.rule.Consequent-functions","title":"Functions","text":""},{"location":"fuzzylite/rule/Consequent/#fuzzylite.rule.Consequent.__init__","title":"__init__","text":"<pre><code>__init__(text: str = '') -&gt; None\n</code></pre> <p>Constructor.</p> <p>text: consequent as text.</p>"},{"location":"fuzzylite/rule/Consequent/#fuzzylite.rule.Consequent.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the consequent in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the consequent in Python.</p>"},{"location":"fuzzylite/rule/Consequent/#fuzzylite.rule.Consequent.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the consequent as text.</p> <p>Returns:</p> Type Description <code>str</code> <p>consequent as text</p>"},{"location":"fuzzylite/rule/Consequent/#fuzzylite.rule.Consequent.is_loaded","title":"is_loaded","text":"<pre><code>is_loaded() -&gt; bool\n</code></pre> <p>Return whether the consequent is loaded.</p> <p>Returns:</p> Type Description <code>bool</code> <p>consequent is loaded.</p>"},{"location":"fuzzylite/rule/Consequent/#fuzzylite.rule.Consequent.load","title":"load","text":"<pre><code>load(engine: Engine) -&gt; None\n</code></pre> <p>Load the consequent using the engine to identify and get references to the input and output variables.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine to get references in the consequent.</p> required"},{"location":"fuzzylite/rule/Consequent/#fuzzylite.rule.Consequent.modify","title":"modify","text":"<pre><code>modify(activation_degree: Scalar, implication: TNorm | None) -&gt; None\n</code></pre> <p>Modify the consequent with the activation degree and the implication operator.</p> <p>Parameters:</p> Name Type Description Default <code>activation_degree</code> <code>Scalar</code> <p>activation degree computed in the antecedent of the rule</p> required <code>implication</code> <code>TNorm | None</code> <p>implication operator configured in the rule block.</p> required"},{"location":"fuzzylite/rule/Consequent/#fuzzylite.rule.Consequent.unload","title":"unload","text":"<pre><code>unload() -&gt; None\n</code></pre> <p>Unload the consequent.</p>"},{"location":"fuzzylite/rule/Expression/","title":"Expression","text":""},{"location":"fuzzylite/rule/Expression/#fuzzylite.rule.Expression","title":"Expression","text":"<p>               Bases: <code>ABC</code></p> <p>Base class to build an expression tree.</p> related <ul> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Consequent</li> <li>fuzzylite.rule.Rule</li> </ul>"},{"location":"fuzzylite/rule/Expression/#fuzzylite.rule.Expression-functions","title":"Functions","text":""},{"location":"fuzzylite/rule/Expression/#fuzzylite.rule.Expression.__init__","title":"__init__  <code>abstractmethod</code>","text":"<pre><code>__init__() -&gt; None\n</code></pre> <p>Constructor.</p>"},{"location":"fuzzylite/rule/Operator/","title":"Operator","text":""},{"location":"fuzzylite/rule/Operator/#fuzzylite.rule.Operator","title":"Operator","text":"<p>               Bases: <code>Expression</code></p> <p>Expression that represents a non-terminal node in the expression tree as a binary operator (i.e., <code>and</code> or <code>or</code>) on two Expression nodes.</p> related <ul> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Consequent</li> <li>fuzzylite.rule.Rule</li> </ul>"},{"location":"fuzzylite/rule/Operator/#fuzzylite.rule.Operator-attributes","title":"Attributes","text":""},{"location":"fuzzylite/rule/Operator/#fuzzylite.rule.Operator.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left = left\n</code></pre>"},{"location":"fuzzylite/rule/Operator/#fuzzylite.rule.Operator.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"fuzzylite/rule/Operator/#fuzzylite.rule.Operator.right","title":"right  <code>instance-attribute</code>","text":"<pre><code>right = right\n</code></pre>"},{"location":"fuzzylite/rule/Operator/#fuzzylite.rule.Operator-functions","title":"Functions","text":""},{"location":"fuzzylite/rule/Operator/#fuzzylite.rule.Operator.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', right: Expression | None = None, left: Expression | None = None) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the operator</p> <code>''</code> <code>left</code> <code>Expression | None</code> <p>left expression in the binary tree</p> <code>None</code> <code>right</code> <code>Expression | None</code> <p>right expression in the binary tree.</p> <code>None</code>"},{"location":"fuzzylite/rule/Operator/#fuzzylite.rule.Operator.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the name of the operator.</p> <p>Returns:</p> Type Description <code>str</code> <p>name of the operator.</p>"},{"location":"fuzzylite/rule/Proposition/","title":"Proposition","text":""},{"location":"fuzzylite/rule/Proposition/#fuzzylite.rule.Proposition","title":"Proposition","text":"<p>               Bases: <code>Expression</code></p> <p>Expression that represents a terminal node in the expression tree as <code>variable is [hedge]* term</code>.</p> related <ul> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Consequent</li> <li>fuzzylite.rule.Rule</li> </ul>"},{"location":"fuzzylite/rule/Proposition/#fuzzylite.rule.Proposition-attributes","title":"Attributes","text":""},{"location":"fuzzylite/rule/Proposition/#fuzzylite.rule.Proposition.hedges","title":"hedges  <code>instance-attribute</code>","text":"<pre><code>hedges: list[Hedge] = []\n</code></pre>"},{"location":"fuzzylite/rule/Proposition/#fuzzylite.rule.Proposition.term","title":"term  <code>instance-attribute</code>","text":"<pre><code>term = term\n</code></pre>"},{"location":"fuzzylite/rule/Proposition/#fuzzylite.rule.Proposition.variable","title":"variable  <code>instance-attribute</code>","text":"<pre><code>variable = variable\n</code></pre>"},{"location":"fuzzylite/rule/Proposition/#fuzzylite.rule.Proposition-functions","title":"Functions","text":""},{"location":"fuzzylite/rule/Proposition/#fuzzylite.rule.Proposition.__init__","title":"__init__","text":"<pre><code>__init__(variable: Variable | None = None, hedges: Iterable[Hedge] | None = None, term: Term | None = None) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>variable</code> <code>Variable | None</code> <p>variable in the proposition</p> <code>None</code> <code>hedges</code> <code>Iterable[Hedge] | None</code> <p>list of hedges that apply to the term of the variable</p> <code>None</code> <code>term</code> <code>Term | None</code> <p>term in the proposition.</p> <code>None</code>"},{"location":"fuzzylite/rule/Proposition/#fuzzylite.rule.Proposition.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return proposition as text.</p> <p>Returns:</p> Type Description <code>str</code> <p>proposition as text.</p>"},{"location":"fuzzylite/rule/Rule/","title":"Rule","text":""},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule","title":"Rule","text":"<p>Conditional statement that contributes to the control of an Engine.</p> <p>A rule consists of an Antecedent and a Consequent, each with propositions in the form <code>variable is term</code>.</p> <p>The propositions in the Antecedent are connected by the conjunctive <code>and</code> or the disjunctive <code>or</code>, which are fuzzy logic operators represented as TNorm and SNorm (respectively).</p> <p>The propositions in the Consequent are independent and separated by a symbolic <code>and</code>.</p> <p>The term in any proposition can be preceded by a hedge that modifies its membership function value of the term.</p> <p>The contribution of a rule to the control of the engine can be determined by its weight \\(w \\in [0.0, 1.0]\\), which is equal to 1.0 if omitted.</p> structure <p>The structure of a rule is:  <code>if (antecedent) then (consequent) [with weight]</code></p> <p>The structure of the antecedent is:  <code>if variable is [hedge]* term [(and|or) variable is [hedge]* term]*</code></p> <p>The structure of the consequent is:  <code>then variable is [hedge]* term [and variable is [hedge]* term]* [with w]?</code></p> <p>where elements in brackets are optional, elements in parentheses are compulsory, <code>*</code>-marked elements may appear zero or more times, and <code>?</code>-marked elements may appear once or not at all.</p> related <ul> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Consequent</li> <li>fuzzylite.hedge.Hedge</li> <li>fuzzylite.rule.RuleBlock</li> </ul>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule-attributes","title":"Attributes","text":""},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.AND","title":"AND  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AND = 'and'\n</code></pre>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.IF","title":"IF  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>IF = 'if'\n</code></pre>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.IS","title":"IS  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>IS = 'is'\n</code></pre>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.OR","title":"OR  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>OR = 'or'\n</code></pre>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.THEN","title":"THEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>THEN = 'then'\n</code></pre>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.WITH","title":"WITH  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WITH = 'with'\n</code></pre>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.activation_degree","title":"activation_degree  <code>instance-attribute</code>","text":"<pre><code>activation_degree = scalar(0.0)\n</code></pre>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.antecedent","title":"antecedent  <code>instance-attribute</code>","text":"<pre><code>antecedent = antecedent or Antecedent()\n</code></pre>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.consequent","title":"consequent  <code>instance-attribute</code>","text":"<pre><code>consequent = consequent or Consequent()\n</code></pre>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.enabled","title":"enabled  <code>instance-attribute</code>","text":"<pre><code>enabled = enabled\n</code></pre>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.text","title":"text  <code>property</code> <code>writable</code>","text":"<pre><code>text: str\n</code></pre> <p>Get/Set the rule as text.</p>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.text--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>str</code> <p>rule as text</p>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.text--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>rule as text</p> required"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.triggered","title":"triggered  <code>instance-attribute</code>","text":"<pre><code>triggered = array(False)\n</code></pre>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.weight","title":"weight  <code>instance-attribute</code>","text":"<pre><code>weight = weight\n</code></pre>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule-functions","title":"Functions","text":""},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.__init__","title":"__init__","text":"<pre><code>__init__(\n    enabled: bool = True,\n    weight: float = 1.0,\n    antecedent: Antecedent | None = None,\n    consequent: Consequent | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>enable the rule</p> <code>True</code> <code>weight</code> <code>float</code> <p>weight of the rule</p> <code>1.0</code> <code>antecedent</code> <code>Antecedent | None</code> <p>antecedent of the rule</p> <code>None</code> <code>consequent</code> <code>Consequent | None</code> <p>consequent of the rule</p> <code>None</code>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the rule in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the rule in Python.</p>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the rule in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the rule in the FuzzyLite Language.</p>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.activate_with","title":"activate_with","text":"<pre><code>activate_with(conjunction: TNorm | None, disjunction: SNorm | None) -&gt; Scalar\n</code></pre> <p>Compute and set activation degree of the rule with the conjunction and disjunction operators.</p> <p>Parameters:</p> Name Type Description Default <code>conjunction</code> <code>TNorm | None</code> <p>conjunction operator</p> required <code>disjunction</code> <code>SNorm | None</code> <p>disjunction operator</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>activation degree of the rule.</p>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(text: str, engine: Engine | None = None) -&gt; Rule\n</code></pre> <p>Create rule from the text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>rule as text</p> required <code>engine</code> <code>Engine | None</code> <p>engine that the rule (partially) controls</p> <code>None</code>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.deactivate","title":"deactivate","text":"<pre><code>deactivate() -&gt; None\n</code></pre> <p>Deactivate the rule.</p>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.is_loaded","title":"is_loaded","text":"<pre><code>is_loaded() -&gt; bool\n</code></pre> <p>Return whether the rule is loaded.</p> <p>Returns:</p> Type Description <code>bool</code> <p>rule is loaded.</p>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.load","title":"load","text":"<pre><code>load(engine: Engine) -&gt; None\n</code></pre> <p>Load the rule using the engine to identify and get references to the input and output variables.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine that the rule (partially) controls</p> required"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.parse","title":"parse","text":"<pre><code>parse(text: str) -&gt; None\n</code></pre> <p>Parse and load the rule based on the text.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>rule as text.</p> required"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.trigger","title":"trigger","text":"<pre><code>trigger(implication: TNorm | None) -&gt; None\n</code></pre> <p>Trigger the rule using the implication operator and the previously computed activation degree.</p> <p>Parameters:</p> Name Type Description Default <code>implication</code> <code>TNorm | None</code> <p>implication operator.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>when the rule is not loaded</p>"},{"location":"fuzzylite/rule/Rule/#fuzzylite.rule.Rule.unload","title":"unload","text":"<pre><code>unload() -&gt; None\n</code></pre> <p>Unload the rule.</p>"},{"location":"fuzzylite/rule/RuleBlock/","title":"RuleBlock","text":""},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock","title":"RuleBlock","text":"<p>Block of rules and fuzzy logic operators required to control an engine.</p> related <ul> <li>fuzzylite.engine.Engine</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.norm.SNorm</li> <li>fuzzylite.norm.TNorm</li> <li>fuzzylite.activation.Activation</li> </ul>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock-attributes","title":"Attributes","text":""},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.activation","title":"activation  <code>instance-attribute</code>","text":"<pre><code>activation = activation\n</code></pre>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.conjunction","title":"conjunction  <code>instance-attribute</code>","text":"<pre><code>conjunction = conjunction\n</code></pre>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description = description\n</code></pre>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.disjunction","title":"disjunction  <code>instance-attribute</code>","text":"<pre><code>disjunction = disjunction\n</code></pre>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.enabled","title":"enabled  <code>instance-attribute</code>","text":"<pre><code>enabled = enabled\n</code></pre>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.implication","title":"implication  <code>instance-attribute</code>","text":"<pre><code>implication = implication\n</code></pre>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.rules","title":"rules  <code>instance-attribute</code>","text":"<pre><code>rules = list(rules or [])\n</code></pre>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock-functions","title":"Functions","text":""},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(item: int) -&gt; Rule\n</code></pre><pre><code>__getitem__(item: slice) -&gt; list[Rule]\n</code></pre> <pre><code>__getitem__(item: int | slice) -&gt; Rule | list[Rule]\n</code></pre> <p>Allow indexing rules in rule block (eg, <code>rule_block[0]</code>).</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>int | slice</code> <p>rule index or slice</p> required <p>Returns:</p> Type Description <code>Rule | list[Rule]</code> <p>rule at index or slice of rules</p>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    description: str = \"\",\n    enabled: bool = True,\n    conjunction: TNorm | None = None,\n    disjunction: SNorm | None = None,\n    implication: TNorm | None = None,\n    activation: Activation | None = None,\n    rules: Iterable[Rule] | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the rule block</p> <code>''</code> <code>description</code> <code>str</code> <p>description of the rule block</p> <code>''</code> <code>enabled</code> <code>bool</code> <p>enable the rule block</p> <code>True</code> <code>conjunction</code> <code>TNorm | None</code> <p>conjunction operator</p> <code>None</code> <code>disjunction</code> <code>SNorm | None</code> <p>disjunction operator</p> <code>None</code> <code>implication</code> <code>TNorm | None</code> <p>implication operator</p> <code>None</code> <code>activation</code> <code>Activation | None</code> <p>activation method</p> <code>None</code> <code>rules</code> <code>Iterable[Rule] | None</code> <p>list of rules.</p> <code>None</code>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[Rule]\n</code></pre> <p>Return the iterator of the rules.</p> <p>Returns:</p> Type Description <code>Iterator[Rule]</code> <p>iterator of the rules</p>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Return the number of rules.</p> <p>Returns:</p> Type Description <code>int</code> <p>number of rules</p>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the rule block in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the rule block in Python.</p>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the rule block in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the rule block in the FuzzyLite Language.</p>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.activate","title":"activate","text":"<pre><code>activate() -&gt; None\n</code></pre> <p>Activate the rule block.</p>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.load_rules","title":"load_rules","text":"<pre><code>load_rules(engine: Engine) -&gt; None\n</code></pre> <p>Load all the rules in the rule block.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine where this rule block is registered.</p> required"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.reload_rules","title":"reload_rules","text":"<pre><code>reload_rules(engine: Engine) -&gt; None\n</code></pre> <p>Reload all the rules in the rule block.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine</code> <p>engine where this rule block is registered.</p> required"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.rule","title":"rule","text":"<pre><code>rule(index: int) -&gt; Rule\n</code></pre> <p>Get the rule at the index.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>index of the rule.</p> required <p>Returns:</p> Type Description <code>Rule</code> <p>rule at the index</p>"},{"location":"fuzzylite/rule/RuleBlock/#fuzzylite.rule.RuleBlock.unload_rules","title":"unload_rules","text":"<pre><code>unload_rules() -&gt; None\n</code></pre> <p>Unload all the rules in the rule block.</p>"},{"location":"fuzzylite/term/Activated/","title":"Activated","text":""},{"location":"fuzzylite/term/Activated/#fuzzylite.term.Activated","title":"Activated","text":"<p>               Bases: <code>Term</code></p> <p>Special term that represents the activation of terms when processing the antecedent of a rule.</p> Equation <p>\\(\\mu(x) = \\alpha_a \\otimes \\mu_a(x)\\)</p> <p>where</p> <ul> <li>\\(\\alpha_a\\): activation degree of term \\(a\\)</li> <li>\\(\\otimes\\): implication operator</li> <li>\\(\\mu_a\\): activated term \\(a\\)</li> </ul> related <ul> <li>fuzzylite.term.Term</li> <li>fuzzylite.term.Aggregated</li> <li>fuzzylite.variable.OutputVariable</li> <li>fuzzylite.defuzzifier.WeightedDefuzzifier</li> </ul>"},{"location":"fuzzylite/term/Activated/#fuzzylite.term.Activated-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Activated/#fuzzylite.term.Activated.degree","title":"degree  <code>property</code> <code>writable</code>","text":"<pre><code>degree: Scalar\n</code></pre> <p>Get/Set the activation degree of the term.</p>"},{"location":"fuzzylite/term/Activated/#fuzzylite.term.Activated.degree--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>Scalar</code> <p>activation degree of the term.</p>"},{"location":"fuzzylite/term/Activated/#fuzzylite.term.Activated.degree--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>Scalar</code> <p>activation degree of the term, with replacements of <code>{nan: 0.0, -inf: 0.0, inf: 1.0}</code></p> required Note <p>replacements of <code>{nan: 0.0, -inf: 0.0, inf: 1.0}</code> are made to sensibly deal with non-finite activations (eg, <code>NaN</code> input values)</p>"},{"location":"fuzzylite/term/Activated/#fuzzylite.term.Activated.implication","title":"implication  <code>instance-attribute</code>","text":"<pre><code>implication = implication\n</code></pre>"},{"location":"fuzzylite/term/Activated/#fuzzylite.term.Activated.term","title":"term  <code>instance-attribute</code>","text":"<pre><code>term = term\n</code></pre>"},{"location":"fuzzylite/term/Activated/#fuzzylite.term.Activated-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Activated/#fuzzylite.term.Activated.__init__","title":"__init__","text":"<pre><code>__init__(term: Term, degree: Scalar = 1.0, implication: TNorm | None = None) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>activated term</p> required <code>degree</code> <code>Scalar</code> <p>activation degree of the term</p> <code>1.0</code> <code>implication</code> <code>TNorm | None</code> <p>implication operator</p> <code>None</code>"},{"location":"fuzzylite/term/Activated/#fuzzylite.term.Activated.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the term in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in Python.</p>"},{"location":"fuzzylite/term/Activated/#fuzzylite.term.Activated.fuzzy_value","title":"fuzzy_value","text":"<pre><code>fuzzy_value(padding: bool = False) -&gt; Array[str_]\n</code></pre> <p>Return fuzzy value in the form <code>{degree}/{name}</code>.</p> <p>Parameters:</p> Name Type Description Default <code>padding</code> <code>bool</code> <p>whether to pad the degree sign (eg, <code>\" - \"</code> when <code>True</code> and <code>\"-\"</code> otherwise)</p> <code>False</code> <p>Returns:</p> Type Description <code>Array[str_]</code> <p>fuzzy value in the form <code>{degree}/{name}</code></p>"},{"location":"fuzzylite/term/Activated/#fuzzylite.term.Activated.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the implication of the activation degree and the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\alpha_a \\otimes \\mu_a(x)\\)</p>"},{"location":"fuzzylite/term/Activated/#fuzzylite.term.Activated.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>degree * term</code> if not implication else <code>implication(degree, term)</code></p>"},{"location":"fuzzylite/term/Aggregated/","title":"Aggregated","text":""},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated","title":"Aggregated","text":"<p>               Bases: <code>Term</code></p> <p>Special term that represents a fuzzy set of activated terms to mainly serve as the fuzzy output value of output variables.</p> Equation <p>\\(\\mu(x)=\\bigoplus_i^n\\alpha_i\\otimes\\mu_i(x) = \\alpha_1\\otimes\\mu_1(x) \\oplus \\ldots \\oplus \\alpha_n\\otimes\\mu_n(x)\\)</p> <p>where</p> <ul> <li>\\(\\alpha_i\\): activation degree of term \\(i\\)</li> <li>\\(\\mu_i\\): membership function of term \\(i\\)</li> <li>\\(\\otimes\\): implication operator</li> <li>\\(\\oplus\\): aggregation operator</li> </ul> related <ul> <li>fuzzylite.term.Activated</li> <li>fuzzylite.variable.OutputVariable</li> <li>fuzzylite.rule.Antecedent</li> <li>fuzzylite.rule.Rule</li> <li>fuzzylite.term.Term</li> </ul>"},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated.aggregation","title":"aggregation  <code>instance-attribute</code>","text":"<pre><code>aggregation = aggregation\n</code></pre>"},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated.maximum","title":"maximum  <code>instance-attribute</code>","text":"<pre><code>maximum = maximum\n</code></pre>"},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated.minimum","title":"minimum  <code>instance-attribute</code>","text":"<pre><code>minimum = minimum\n</code></pre>"},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated.terms","title":"terms  <code>instance-attribute</code>","text":"<pre><code>terms = list(terms or [])\n</code></pre>"},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    minimum: float = nan,\n    maximum: float = nan,\n    aggregation: SNorm | None = None,\n    terms: Iterable[Activated] | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the aggregated term</p> <code>''</code> <code>minimum</code> <code>float</code> <p>minimum value of the range of the fuzzy set</p> <code>nan</code> <code>maximum</code> <code>float</code> <p>maximum value of the range of the fuzzy set</p> <code>nan</code> <code>aggregation</code> <code>SNorm | None</code> <p>aggregation operator</p> <code>None</code> <code>terms</code> <code>Iterable[Activated] | None</code> <p>list of activated terms</p> <code>None</code>"},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the term in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in Python.</p>"},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated.activation_degree","title":"activation_degree","text":"<pre><code>activation_degree(term: Term) -&gt; Scalar\n</code></pre> <p>Compute the aggregated activation degree of the term.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>Term</code> <p>term to compute the aggregated activation degree</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>aggregated activation degree for the term.</p>"},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated.clear","title":"clear","text":"<pre><code>clear() -&gt; None\n</code></pre> <p>Clear the list of activated terms.</p>"},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated.grouped_terms","title":"grouped_terms","text":"<pre><code>grouped_terms() -&gt; dict[str, Activated]\n</code></pre> <p>Group the activated terms and aggregate their activation degrees.</p> <p>Returns:</p> Type Description <code>dict[str, Activated]</code> <p>grouped activated terms by name with aggregated activation degrees.</p> related <ul> <li>fuzzylite.defuzzifier.WeightedSum</li> <li>fuzzylite.defuzzifier.WeightedAverage</li> </ul>"},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated.highest_activated_term","title":"highest_activated_term","text":"<pre><code>highest_activated_term() -&gt; Activated | None\n</code></pre> <p>Find the term with the maximum aggregated activation degree.</p> <p>Returns:</p> Type Description <code>Activated | None</code> <p>term with the maximum aggregated activation degree.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when working with vectorization (eg, size(activation_degree) &gt; 1)</p>"},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Aggregate the activated terms' membership function values of \\(x\\) using the aggregation operator.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x)=\\bigoplus_i^n\\alpha_i\\otimes\\mu_i(x) = \\alpha_1\\otimes\\mu_1(x) \\oplus \\ldots \\oplus \\alpha_n\\otimes\\mu_n(x)\\)</p>"},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>aggregation minimum maximum terms</code></p>"},{"location":"fuzzylite/term/Aggregated/#fuzzylite.term.Aggregated.range","title":"range","text":"<pre><code>range() -&gt; float\n</code></pre> <p>Return the magnitude of the range of the fuzzy set.</p> <p>Returns:</p> Type Description <code>float</code> <p><code>maximum - minimum</code></p>"},{"location":"fuzzylite/term/Arc/","title":"Arc","text":""},{"location":"fuzzylite/term/Arc/#fuzzylite.term.Arc","title":"Arc","text":"<p>               Bases: <code>Term</code></p> <p>Edge term that represents the arc-shaped membership function.</p> <p></p> Equation <p>\\(\\mu(x)=\\dfrac{h\\sqrt{r^2 - (x-c)^2}}{|r|}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(r\\): radius of the Arc</li> <li>\\(c\\): center of the Arc</li> </ul>"},{"location":"fuzzylite/term/Arc/#fuzzylite.term.Arc-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Arc/#fuzzylite.term.Arc.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end = end\n</code></pre>"},{"location":"fuzzylite/term/Arc/#fuzzylite.term.Arc.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start = start\n</code></pre>"},{"location":"fuzzylite/term/Arc/#fuzzylite.term.Arc-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Arc/#fuzzylite.term.Arc.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', start: float = nan, end: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>start</code> <code>float</code> <p>start of the Arc</p> <code>nan</code> <code>end</code> <code>float</code> <p>end of the Arc</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/term/Arc/#fuzzylite.term.Arc.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>start end [height]</code></p> required"},{"location":"fuzzylite/term/Arc/#fuzzylite.term.Arc.is_monotonic","title":"is_monotonic","text":"<pre><code>is_monotonic() -&gt; bool\n</code></pre> <p>Return <code>True</code> because the term is monotonic.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code></p>"},{"location":"fuzzylite/term/Arc/#fuzzylite.term.Arc.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x)=\\dfrac{h\\sqrt{r^2 - (x-c)^2}}{|r|}\\), clipped accordingly</p>"},{"location":"fuzzylite/term/Arc/#fuzzylite.term.Arc.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>start end</code></p>"},{"location":"fuzzylite/term/Arc/#fuzzylite.term.Arc.tsukamoto","title":"tsukamoto","text":"<pre><code>tsukamoto(y: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the tsukamoto value of the monotonic term for activation degree \\(y\\).</p> Equation <p>\\(y=\\dfrac{h\\sqrt{r^2 - (x-c)^2}}{|r|}\\)</p> <p>\\(x=c\\pm \\sqrt{r^2-\\dfrac{yr}{h}}\\)</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>Scalar</code> <p>activation degree</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x=c\\pm \\sqrt{r^2-\\dfrac{yr}{h}}\\)</p>"},{"location":"fuzzylite/term/Bell/","title":"Bell","text":""},{"location":"fuzzylite/term/Bell/#fuzzylite.term.Bell","title":"Bell","text":"<p>               Bases: <code>Term</code></p> <p>Extended term that represents the generalized bell curve membership function.</p> <p></p> Equation <p>\\(\\mu(x)=\\dfrac{h}{1 + \\left(\\dfrac{|x-c|}{w}\\right)^{2s}}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(c\\): center of the Bell</li> <li>\\(w\\): width of the Bell</li> <li>\\(s\\): slope of the Bell</li> </ul>"},{"location":"fuzzylite/term/Bell/#fuzzylite.term.Bell-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Bell/#fuzzylite.term.Bell.center","title":"center  <code>instance-attribute</code>","text":"<pre><code>center = center\n</code></pre>"},{"location":"fuzzylite/term/Bell/#fuzzylite.term.Bell.slope","title":"slope  <code>instance-attribute</code>","text":"<pre><code>slope = slope\n</code></pre>"},{"location":"fuzzylite/term/Bell/#fuzzylite.term.Bell.width","title":"width  <code>instance-attribute</code>","text":"<pre><code>width = width\n</code></pre>"},{"location":"fuzzylite/term/Bell/#fuzzylite.term.Bell-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Bell/#fuzzylite.term.Bell.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', center: float = nan, width: float = nan, slope: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>center</code> <code>float</code> <p>center of the Bell</p> <code>nan</code> <code>width</code> <code>float</code> <p>width of the Bell</p> <code>nan</code> <code>slope</code> <code>float</code> <p>slope of the Bell</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/term/Bell/#fuzzylite.term.Bell.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>center width slope [height]</code>.</p> required"},{"location":"fuzzylite/term/Bell/#fuzzylite.term.Bell.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x)=\\dfrac{h}{1 + \\left(\\dfrac{|x-c|}{w}\\right)^{2s}}\\)</p>"},{"location":"fuzzylite/term/Bell/#fuzzylite.term.Bell.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>center width slope [height]</code>.</p>"},{"location":"fuzzylite/term/Binary/","title":"Binary","text":""},{"location":"fuzzylite/term/Binary/#fuzzylite.term.Binary","title":"Binary","text":"<p>               Bases: <code>Term</code></p> <p>Edge Term that represents the binary membership function.</p> <p></p> Equation <p>\\(\\mu(x) = \\begin{cases}     h &amp; \\mbox{if } (d=\\infty \\wedge x \\ge s) \\vee (d=-\\infty \\wedge x \\le s) \\cr     0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(s\\): start of the Binary</li> <li>\\(d\\): direction of the Binary</li> </ul>"},{"location":"fuzzylite/term/Binary/#fuzzylite.term.Binary-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Binary/#fuzzylite.term.Binary.direction","title":"direction  <code>instance-attribute</code>","text":"<pre><code>direction = direction\n</code></pre>"},{"location":"fuzzylite/term/Binary/#fuzzylite.term.Binary.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start = start\n</code></pre>"},{"location":"fuzzylite/term/Binary/#fuzzylite.term.Binary-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Binary/#fuzzylite.term.Binary.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', start: float = nan, direction: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>start</code> <code>float</code> <p>start of the Binary</p> <code>nan</code> <code>direction</code> <code>float</code> <p>direction of the Binary (-inf, inf)</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/term/Binary/#fuzzylite.term.Binary.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>start direction [height]</code>.</p> required"},{"location":"fuzzylite/term/Binary/#fuzzylite.term.Binary.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\begin{cases} h &amp; \\mbox{if } (d=\\infty \\wedge x \\ge s) \\vee (d=-\\infty \\wedge x \\le s) \\cr 0 &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/term/Binary/#fuzzylite.term.Binary.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>start direction [height]</code>.</p>"},{"location":"fuzzylite/term/Concave/","title":"Concave","text":""},{"location":"fuzzylite/term/Concave/#fuzzylite.term.Concave","title":"Concave","text":"<p>               Bases: <code>Term</code></p> <p>Edge Term that represents the concave membership function.</p> <p></p> Equation <p>\\(\\mu(x) = \\begin{cases}     h  \\dfrac{e - i} {2e - i - x} &amp; \\mbox{if } i \\leq e \\wedge x &lt; e \\mbox{ (increasing concave)} \\cr     h  \\dfrac{i - e} {-2e + i + x} &amp; \\mbox{if } i &gt; e \\wedge x &gt; e \\mbox{ (decreasing concave)} \\cr     h &amp; \\mbox{otherwise} \\cr \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(i\\): inflection of the Concave</li> <li>\\(e\\): end of the Concave</li> </ul>"},{"location":"fuzzylite/term/Concave/#fuzzylite.term.Concave-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Concave/#fuzzylite.term.Concave.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end = end\n</code></pre>"},{"location":"fuzzylite/term/Concave/#fuzzylite.term.Concave.inflection","title":"inflection  <code>instance-attribute</code>","text":"<pre><code>inflection = inflection\n</code></pre>"},{"location":"fuzzylite/term/Concave/#fuzzylite.term.Concave-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Concave/#fuzzylite.term.Concave.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', inflection: float = nan, end: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>inflection</code> <code>float</code> <p>inflection of the Concave</p> <code>nan</code> <code>end</code> <code>float</code> <p>end of the Concave</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/term/Concave/#fuzzylite.term.Concave.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>inflection end [height]</code>.</p> required"},{"location":"fuzzylite/term/Concave/#fuzzylite.term.Concave.is_monotonic","title":"is_monotonic","text":"<pre><code>is_monotonic() -&gt; bool\n</code></pre> <p>Return <code>True</code> because the term is monotonic.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code></p>"},{"location":"fuzzylite/term/Concave/#fuzzylite.term.Concave.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\begin{cases} h  \\dfrac{e - i} {2e - i - x} &amp; \\mbox{if } i \\leq e \\wedge x &lt; e \\mbox{ (increasing concave)} \\cr h  \\dfrac{i - e} {-2e + i + x} &amp; \\mbox{if } i &gt; e \\wedge x &gt; e \\mbox{ (decreasing concave)} \\cr h &amp; \\mbox{otherwise} \\cr \\end{cases}\\)</p>"},{"location":"fuzzylite/term/Concave/#fuzzylite.term.Concave.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>inflection end [height]</code>.</p>"},{"location":"fuzzylite/term/Concave/#fuzzylite.term.Concave.tsukamoto","title":"tsukamoto","text":"<pre><code>tsukamoto(y: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the tsukamoto value of the monotonic term for activation degree \\(y\\).</p> Equation <p>\\(y = h \\dfrac{e - i} {2e - i - x}\\)</p> <p>\\(x = h \\dfrac{e-i}{y} + 2e -i\\)</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>Scalar</code> <p>activation degree</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x = h \\dfrac{e-i}{y} + 2e -i\\)</p>"},{"location":"fuzzylite/term/Constant/","title":"Constant","text":""},{"location":"fuzzylite/term/Constant/#fuzzylite.term.Constant","title":"Constant","text":"<p>               Bases: <code>Term</code></p> <p>Zero polynomial term \\(k\\) that represents a constant value.</p> <p></p> Equation <p>\\(\\mu(x) = k\\)</p> <p>where</p> <ul> <li>\\(k\\): value of the Constant</li> </ul>"},{"location":"fuzzylite/term/Constant/#fuzzylite.term.Constant-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Constant/#fuzzylite.term.Constant.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value = value\n</code></pre>"},{"location":"fuzzylite/term/Constant/#fuzzylite.term.Constant-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Constant/#fuzzylite.term.Constant.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', value: float = nan) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>value</code> <code>float</code> <p>value of the Constant</p> <code>nan</code>"},{"location":"fuzzylite/term/Constant/#fuzzylite.term.Constant.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the term in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in Python.</p>"},{"location":"fuzzylite/term/Constant/#fuzzylite.term.Constant.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>k</code></p> required"},{"location":"fuzzylite/term/Constant/#fuzzylite.term.Constant.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>irrelevant</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = k\\)</p>"},{"location":"fuzzylite/term/Constant/#fuzzylite.term.Constant.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>k</code></p>"},{"location":"fuzzylite/term/Cosine/","title":"Cosine","text":""},{"location":"fuzzylite/term/Cosine/#fuzzylite.term.Cosine","title":"Cosine","text":"<p>               Bases: <code>Term</code></p> <p>Extended term that represents the cosine membership function.</p> <p></p> Equation <p>\\(\\mu(x) = \\begin{cases}     \\dfrac{h}{2} \\left(1 + \\cos\\left(\\dfrac{2.0}{w}\\pi(x-c)\\right)\\right) &amp; \\mbox{if } c - \\dfrac{w}{2} \\le x \\le c + \\dfrac{w}{2} \\cr     0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(c\\): center of the Cosine</li> <li>\\(w\\): width of the Cosine</li> </ul>"},{"location":"fuzzylite/term/Cosine/#fuzzylite.term.Cosine-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Cosine/#fuzzylite.term.Cosine.center","title":"center  <code>instance-attribute</code>","text":"<pre><code>center = center\n</code></pre>"},{"location":"fuzzylite/term/Cosine/#fuzzylite.term.Cosine.width","title":"width  <code>instance-attribute</code>","text":"<pre><code>width = width\n</code></pre>"},{"location":"fuzzylite/term/Cosine/#fuzzylite.term.Cosine-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Cosine/#fuzzylite.term.Cosine.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', center: float = nan, width: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>center</code> <code>float</code> <p>center of the Cosine</p> <code>nan</code> <code>width</code> <code>float</code> <p>width of the Cosine</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/term/Cosine/#fuzzylite.term.Cosine.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>center width [height]</code>.</p> required"},{"location":"fuzzylite/term/Cosine/#fuzzylite.term.Cosine.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\begin{cases} \\dfrac{h}{2} \\left(1 + \\cos\\left(\\dfrac{2.0}{w}\\pi(x-c)\\right)\\right) &amp; \\mbox{if } c - \\dfrac{w}{2} \\le x \\le c + \\dfrac{w}{2} \\cr 0 &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/term/Cosine/#fuzzylite.term.Cosine.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>center width [height]</code>.</p>"},{"location":"fuzzylite/term/Discrete/","title":"Discrete","text":""},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete","title":"Discrete","text":"<p>               Bases: <code>Term</code></p> <p>Basic term that represents a discrete membership function.</p> <p></p> Equation <p>\\(\\mu(x) = h\\dfrac{(y_\\max - y_\\min)}{(x_\\max - x_\\min)}  (x - x_\\min) + y_\\min\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(x_{\\min}, x_{\\max}\\): lower and upper bounds of \\(x\\), respectively</li> <li>\\(y_{\\min}, y_{\\max}\\): membership function values \\(\\mu(x_{\\min})\\) and \\(\\mu(x_{\\max})\\), respectively</li> </ul> related <ul> <li>numpy.interp</li> </ul> Warning <p>The pairs of values in any Discrete term must be sorted in ascending order by the \\(x\\) coordinate because the membership function is computed using binary search to find the lower and upper bounds of \\(x\\).</p>"},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete.Floatable","title":"Floatable  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Floatable = Union[SupportsFloat, str]\n</code></pre>"},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete.values","title":"values  <code>instance-attribute</code>","text":"<pre><code>values = values\n</code></pre>"},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', values: ScalarArray | Sequence[Floatable] | None = None, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the term</p> <code>''</code> <code>values</code> <code>ScalarArray | Sequence[Floatable] | None</code> <p>2D array of \\((x,y)\\) pairs</p> <code>None</code> <code>height</code> <code>float</code> <p>height of the term.</p> <code>1.0</code>"},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>x1 y1 ... xn yn [height]</code>.</p> required"},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(\n    name: str,\n    xy: str | Sequence[Floatable] | tuple[Sequence[Floatable], Sequence[Floatable]] | dict[Floatable, Floatable],\n    height: float = 1.0,\n) -&gt; Discrete\n</code></pre> <p>Create a discrete term from the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the term</p> required <code>xy</code> <code>str | Sequence[Floatable] | tuple[Sequence[Floatable], Sequence[Floatable]] | dict[Floatable, Floatable]</code> <p>coordinates</p> required <code>height</code> <code>float</code> <p>height of the term</p> <code>1.0</code> <p>Returns:</p> Type Description <code>Discrete</code> <p>Discrete term.</p>"},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>The function uses binary search to find the lower and upper bounds of \\(x\\) and then linearly interpolates the membership function value between the bounds.</p> Warning <p>The pairs of values in any Discrete term must be sorted in ascending order by the \\(x\\) coordinate because the membership function is computed using binary search to find the lower and upper bounds of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = h\\dfrac{(y_\\max - y_\\min)}{(x_\\max - x_\\min)}  (x - x_\\min) + y_\\min\\)</p>"},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>x1 y1 ... xn yn [height]</code>.</p>"},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete.sort","title":"sort","text":"<pre><code>sort() -&gt; None\n</code></pre> <p>Sort in ascending order the pairs of values by the \\(x\\)-coordinate.</p>"},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict[float, float]\n</code></pre> <p>Return a dictionary of values in the form <code>{x: y}</code>.</p> <p>Returns:</p> Type Description <code>dict[float, float]</code> <p>dictionary of values in the form <code>{x: y}</code>.</p>"},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete.to_list","title":"to_list","text":"<pre><code>to_list() -&gt; list[float]\n</code></pre> <p>Return a list of values in the form <code>[x1,y1, ..., xn, yn]</code>.</p> <p>Returns:</p> Type Description <code>list[float]</code> <p>list of values in the form <code>[x1,y1, ..., xn, yn]</code>.</p>"},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete.to_xy","title":"to_xy  <code>staticmethod</code>","text":"<pre><code>to_xy(x: Any, y: Any) -&gt; ScalarArray\n</code></pre> <p>Create list of values from the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Any</code> <p>\\(x\\)-coordinate(s) that can be converted into scalar(s)</p> required <code>y</code> <code>Any</code> <p>\\(y\\)-coordinate(s) that can be converted into scalar(s)</p> required <p>Returns:</p> Type Description <code>ScalarArray</code> <p>array of \\(n\\)-rows and \\(2\\)-columns \\((n,2)\\).</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when the shapes of \\(x\\) and \\(y\\) are different.</p>"},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete.x","title":"x","text":"<pre><code>x() -&gt; ScalarArray\n</code></pre> <p>Return \\(x\\) coordinates.</p> <p>Returns:</p> Type Description <code>ScalarArray</code> <p>\\(x\\) coordinates.</p>"},{"location":"fuzzylite/term/Discrete/#fuzzylite.term.Discrete.y","title":"y","text":"<pre><code>y() -&gt; ScalarArray\n</code></pre> <p>Return \\(y\\) coordinates.</p> <p>Returns:</p> Type Description <code>ScalarArray</code> <p>\\(y\\) coordinates.</p>"},{"location":"fuzzylite/term/Function/","title":"Function","text":""},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function","title":"Function","text":"<p>               Bases: <code>Term</code></p> <p>Polynomial term that represents a generic function.</p> <p></p> Equation <p>\\(f : x \\mapsto f(x)\\)</p> <p>The function term is also used to convert the text of the antecedent of a rule from infix to postfix notation.</p> related <ul> <li>fuzzylite.rule.Antecedent</li> </ul>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.engine","title":"engine  <code>instance-attribute</code>","text":"<pre><code>engine = engine\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.formula","title":"formula  <code>instance-attribute</code>","text":"<pre><code>formula = formula\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.root","title":"root  <code>instance-attribute</code>","text":"<pre><code>root: Node | None = None\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: dict[str, Scalar] = copy() if variables else {}\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function-classes","title":"Classes","text":""},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element","title":"Element","text":"<p>Representation of a single element in a formula: either a function or an operator.</p> <p>If the Element represents a function, its parameter is the arity of the function (only unary or binary supported) If the Element represents an operator, its parameters are: <code>arity</code>, <code>precedence</code>, and <code>associativity</code>.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element.arity","title":"arity  <code>instance-attribute</code>","text":"<pre><code>arity = arity\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element.associativity","title":"associativity  <code>instance-attribute</code>","text":"<pre><code>associativity = associativity\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description = description\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element.method","title":"method  <code>instance-attribute</code>","text":"<pre><code>method = method\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element.precedence","title":"precedence  <code>instance-attribute</code>","text":"<pre><code>precedence = precedence\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type = type if isinstance(type, Type) else Type[type]\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element-classes","title":"Classes","text":""},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element.Type","title":"Type","text":"<p>               Bases: <code>Enum</code></p> <p>Type of function element.</p> Attributes\u00b6 <code></code> Function <code>class-attribute</code> <code>instance-attribute</code> \u00b6 <pre><code>Function = auto()\n</code></pre> <code></code> Operator <code>class-attribute</code> <code>instance-attribute</code> \u00b6 <pre><code>Operator = auto()\n</code></pre> Functions\u00b6 <code></code> __repr__ \u00b6 <pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the name of the element in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the name of the element in Python.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str,\n    description: str,\n    type: Type | str,\n    method: Callable[..., Scalar],\n    arity: int = 0,\n    precedence: int = 0,\n    associativity: int = -1,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the element</p> required <code>description</code> <code>str</code> <p>description of the element</p> required <code>type</code> <code>Type | str</code> <p>type of the element</p> required <code>method</code> <code>Callable[..., Scalar]</code> <p>reference to the function (only supports unary or binary)</p> required <code>arity</code> <code>int</code> <p>number of operands required</p> <code>0</code> <code>precedence</code> <code>int</code> <p>precedence of operators, where higher precedence comes first (see Order of operations)</p> <code>0</code> <code>associativity</code> <code>int</code> <p>precedence of grouping operators in the absence of parentheses (see Operator associativity)</p> <code>-1</code>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the element in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the element in Python.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element.is_function","title":"is_function","text":"<pre><code>is_function() -&gt; bool\n</code></pre> <p>Return whether the element is a fuzzylite.term.Function.Element.Type.Function.</p> <p>Returns:</p> Type Description <code>bool</code> <p>element is fuzzylite.term.Function.Element.Type.Function</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Element.is_operator","title":"is_operator","text":"<pre><code>is_operator() -&gt; bool\n</code></pre> <p>Return whether the element is a fuzzylite.term.Function.Element.Type.Operator.</p> <p>Returns:</p> Type Description <code>bool</code> <p>element is fuzzylite.term.Function.Element.Type.Operator</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Node","title":"Node","text":"<p>Basic binary tree structure.</p> <p>A node can point to left and right nodes to build a binary tree.</p> <p>A node can represent:</p> <ul> <li>an element (Function or Operator),</li> <li>an input or output variable by name,</li> <li>a constant floating-point value</li> </ul>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Node-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Node.constant","title":"constant  <code>instance-attribute</code>","text":"<pre><code>constant = constant\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Node.element","title":"element  <code>instance-attribute</code>","text":"<pre><code>element = element\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Node.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left = left\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Node.right","title":"right  <code>instance-attribute</code>","text":"<pre><code>right = right\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Node.variable","title":"variable  <code>instance-attribute</code>","text":"<pre><code>variable = variable\n</code></pre>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Node-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Node.__init__","title":"__init__","text":"<pre><code>__init__(\n    element: Element | None = None,\n    variable: str = \"\",\n    constant: float = nan,\n    left: Node | None = None,\n    right: Node | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>element</code> <code>Element | None</code> <p>node refers to a function or an operator</p> <code>None</code> <code>variable</code> <code>str</code> <p>node refers to a variable by name</p> <code>''</code> <code>constant</code> <code>float</code> <p>node refers to an arbitrary floating-point value</p> <code>nan</code> <code>right</code> <code>Node | None</code> <p>node has an expression tree on the right</p> <code>None</code> <code>left</code> <code>Node | None</code> <p>node has an expression tree on the left.</p> <code>None</code>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Node.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the node in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the node in Python.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Node.evaluate","title":"evaluate","text":"<pre><code>evaluate(local_variables: dict[str, Scalar] | None = None) -&gt; Scalar\n</code></pre> <p>Recursively evaluate the node and substitute the variables with the given values (if any).</p> <p>Parameters:</p> Name Type Description Default <code>local_variables</code> <code>dict[str, Scalar] | None</code> <p>map of substitutions of variable names for scalars</p> <code>None</code> <p>Returns:</p> Type Description <code>Scalar</code> <p>scalar as the result of the evaluation.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when function arity is not met with left and right nodes</p> <code>ValueError</code> <p>when the node represents a variable but the map does not contain its substitution value</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Node.infix","title":"infix","text":"<pre><code>infix(node: Node | None = None) -&gt; str\n</code></pre> <p>Return the infix notation of the node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node | None</code> <p>node in the expression tree (defaults to <code>self</code> if <code>None</code>)</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>infix notation of the node.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Node.postfix","title":"postfix","text":"<pre><code>postfix(node: Node | None = None) -&gt; str\n</code></pre> <p>Return the postfix notation of the node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node | None</code> <p>node in the expression tree (defaults to <code>self</code> if <code>None</code>)</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>postfix notation of the node.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Node.prefix","title":"prefix","text":"<pre><code>prefix(node: Node | None = None) -&gt; str\n</code></pre> <p>Return the prefix notation of the node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>Node | None</code> <p>node in the expression tree (defaults to <code>self</code> if <code>None</code>)</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>prefix notation of the node.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.Node.value","title":"value","text":"<pre><code>value() -&gt; str\n</code></pre> <p>Return the value of the node based on its contents.</p> <p>The value of the node is the first of:</p> <ol> <li>operation or function name if there is an element</li> <li>variable name if it is not empty</li> <li>constant value.</li> </ol> <p>Returns:</p> Type Description <code>str</code> <p>value of the node based on its contents.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    formula: str = \"\",\n    engine: Engine | None = None,\n    variables: dict[str, Scalar] | None = None,\n    load: bool = False,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the term</p> <code>''</code> <code>formula</code> <code>str</code> <p>formula defining the membership function</p> <code>''</code> <code>engine</code> <code>Engine | None</code> <p>engine to which the Function can have access</p> <code>None</code> <code>variables</code> <code>dict[str, Scalar] | None</code> <p>map of substitution variables</p> <code>None</code> <code>load</code> <code>bool</code> <p>load the function on creation.</p> <code>False</code>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the term in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in Python.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>formula</code>.</p> required"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.create","title":"create  <code>staticmethod</code>","text":"<pre><code>create(name: str, formula: str, engine: Engine | None = None) -&gt; Function\n</code></pre> <p>Create and configure a function term.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the term</p> required <code>formula</code> <code>str</code> <p>formula defining the membership function</p> required <code>engine</code> <code>Engine | None</code> <p>engine to which the Function can have access</p> <code>None</code> <p>Returns:</p> Type Description <code>Function</code> <p>configured function term</p> <p>Raises:</p> Type Description <code>SyntaxError</code> <p>when the formula has a syntax error</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.evaluate","title":"evaluate","text":"<pre><code>evaluate(variables: dict[str, Scalar] | None = None) -&gt; Scalar\n</code></pre> <p>Evaluate the function value using the map of variable substitutions (if any).</p> <p>Parameters:</p> Name Type Description Default <code>variables</code> <code>dict[str, Scalar] | None</code> <p>map containing substitutions of variable names for values</p> <code>None</code> <p>Returns:</p> Type Description <code>Scalar</code> <p>function value using the map of variable substitutions (if any).</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>when the function is not loaded</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.format_infix","title":"format_infix  <code>classmethod</code>","text":"<pre><code>format_infix(formula: str) -&gt; str\n</code></pre> <p>Format the formula expressed in infix notation.</p> <p>Parameters:</p> Name Type Description Default <code>formula</code> <code>str</code> <p>formula expressed in infix notation.</p> required <p>Returns:</p> Type Description <code>str</code> <p>formatted formula expressed in infix notation.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.infix_to_postfix","title":"infix_to_postfix  <code>classmethod</code>","text":"<pre><code>infix_to_postfix(formula: str) -&gt; str\n</code></pre> <p>Convert the formula to postfix notation.</p> <p>Parameters:</p> Name Type Description Default <code>formula</code> <code>str</code> <p>right-hand side of an equation expressed in infix notation</p> required <p>Returns:</p> Type Description <code>str</code> <p>formula in postfix notation</p> <p>Raises:</p> Type Description <code>SyntaxError</code> <p>when the formula has syntax errors.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.is_loaded","title":"is_loaded","text":"<pre><code>is_loaded() -&gt; bool\n</code></pre> <p>Return whether the function is loaded.</p> <p>Returns:</p> Type Description <code>bool</code> <p>function is loaded.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.load","title":"load","text":"<pre><code>load() -&gt; None\n</code></pre> <p>Load the function using the formula expressed in infix notation.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>The value of variable <code>x</code> will be added to the <code>variables</code> map, and so will the current values of the input variables and output variables if the engine has been set.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(f(x)\\)</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when an input or output variable is named <code>x</code></p> <code>ValueError</code> <p>when the map of variables contain names of input or output variables</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>formula</code>.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.parse","title":"parse  <code>classmethod</code>","text":"<pre><code>parse(formula: str) -&gt; Node\n</code></pre> <p>Create a node as a binary expression tree of the formula.</p> <p>Parameters:</p> Name Type Description Default <code>formula</code> <code>str</code> <p>right-hand side of an equation expressed in infix notation</p> required <p>Returns:</p> Type Description <code>Node</code> <p>node as a binary expression tree of the formula</p> <p>Raises:</p> Type Description <code>SyntaxError</code> <p>when the formula has syntax errors.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.unload","title":"unload","text":"<pre><code>unload() -&gt; None\n</code></pre> <p>Unload the function and reset the map of substitution variables.</p>"},{"location":"fuzzylite/term/Function/#fuzzylite.term.Function.update_reference","title":"update_reference","text":"<pre><code>update_reference(engine: Engine | None) -&gt; None\n</code></pre> <p>Update the reference to the engine (if any) and load the function if it is not loaded.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine | None</code> <p>engine to which the term belongs to.</p> required"},{"location":"fuzzylite/term/Gaussian/","title":"Gaussian","text":""},{"location":"fuzzylite/term/Gaussian/#fuzzylite.term.Gaussian","title":"Gaussian","text":"<p>               Bases: <code>Term</code></p> <p>Extended term that represents the gaussian curve membership function.</p> <p></p> Equation <p>\\(\\mu(x) = h \\exp\\left(-\\dfrac{(x-\\mu)^2}{2\\sigma^2}\\right)\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(\\mu\\): mean of the Gaussian</li> <li>\\(\\sigma\\): standard deviation of the Gaussian</li> </ul>"},{"location":"fuzzylite/term/Gaussian/#fuzzylite.term.Gaussian-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Gaussian/#fuzzylite.term.Gaussian.mean","title":"mean  <code>instance-attribute</code>","text":"<pre><code>mean = mean\n</code></pre>"},{"location":"fuzzylite/term/Gaussian/#fuzzylite.term.Gaussian.standard_deviation","title":"standard_deviation  <code>instance-attribute</code>","text":"<pre><code>standard_deviation = standard_deviation\n</code></pre>"},{"location":"fuzzylite/term/Gaussian/#fuzzylite.term.Gaussian-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Gaussian/#fuzzylite.term.Gaussian.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', mean: float = nan, standard_deviation: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>mean</code> <code>float</code> <p>mean of the Gaussian</p> <code>nan</code> <code>standard_deviation</code> <code>float</code> <p>standard deviation of the Gaussian</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term.</p> <code>1.0</code>"},{"location":"fuzzylite/term/Gaussian/#fuzzylite.term.Gaussian.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>mean standard_deviation [height]</code>.</p> required"},{"location":"fuzzylite/term/Gaussian/#fuzzylite.term.Gaussian.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = h \\exp\\left(-\\dfrac{(x-\\mu)^2}{2\\sigma^2}\\right)\\)</p>"},{"location":"fuzzylite/term/Gaussian/#fuzzylite.term.Gaussian.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>mean standard_deviation [height]</code>.</p>"},{"location":"fuzzylite/term/GaussianProduct/","title":"GaussianProduct","text":""},{"location":"fuzzylite/term/GaussianProduct/#fuzzylite.term.GaussianProduct","title":"GaussianProduct","text":"<p>               Bases: <code>Term</code></p> <p>Extended term that represents the two-sided gaussian membership function.</p> <p></p> Equation <p>\\(a = \\begin{cases} \\mbox{Gaussian}^{\\mu_a}_{\\sigma_a}(x) &amp; \\mbox{if } x &lt; \\mu_a \\cr 1.0 &amp; \\mbox{otherwise} \\cr \\end{cases}\\)</p> <p>\\(b = \\begin{cases} \\mbox{Gaussian}^{\\mu_b}_{\\sigma_b}(x) &amp; \\mbox{if } x &gt; \\mu_b \\cr 1.0 &amp; \\mbox{otherwise} \\cr \\end{cases}\\)</p> <p>\\(\\mu(x) = h (a \\times b)\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(\\mu_a, \\sigma_a\\): mean and standard deviation of the first Gaussian</li> <li>\\(\\mu_b, \\sigma_b\\): mean and standard deviation of the second Gaussian</li> </ul>"},{"location":"fuzzylite/term/GaussianProduct/#fuzzylite.term.GaussianProduct-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/GaussianProduct/#fuzzylite.term.GaussianProduct.mean_a","title":"mean_a  <code>instance-attribute</code>","text":"<pre><code>mean_a = mean_a\n</code></pre>"},{"location":"fuzzylite/term/GaussianProduct/#fuzzylite.term.GaussianProduct.mean_b","title":"mean_b  <code>instance-attribute</code>","text":"<pre><code>mean_b = mean_b\n</code></pre>"},{"location":"fuzzylite/term/GaussianProduct/#fuzzylite.term.GaussianProduct.standard_deviation_a","title":"standard_deviation_a  <code>instance-attribute</code>","text":"<pre><code>standard_deviation_a = standard_deviation_a\n</code></pre>"},{"location":"fuzzylite/term/GaussianProduct/#fuzzylite.term.GaussianProduct.standard_deviation_b","title":"standard_deviation_b  <code>instance-attribute</code>","text":"<pre><code>standard_deviation_b = standard_deviation_b\n</code></pre>"},{"location":"fuzzylite/term/GaussianProduct/#fuzzylite.term.GaussianProduct-functions","title":"Functions","text":""},{"location":"fuzzylite/term/GaussianProduct/#fuzzylite.term.GaussianProduct.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    mean_a: float = nan,\n    standard_deviation_a: float = nan,\n    mean_b: float = nan,\n    standard_deviation_b: float = nan,\n    height: float = 1.0,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>mean_a</code> <code>float</code> <p>mean of the first Gaussian</p> <code>nan</code> <code>standard_deviation_a</code> <code>float</code> <p>standard deviation of the first Gaussian</p> <code>nan</code> <code>mean_b</code> <code>float</code> <p>mean of the second Gaussian</p> <code>nan</code> <code>standard_deviation_b</code> <code>float</code> <p>standard deviation of the second Gaussian</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/term/GaussianProduct/#fuzzylite.term.GaussianProduct.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>mean_a standard_deviation_a mean_b standard_deviation_b [height]</code>.</p> required"},{"location":"fuzzylite/term/GaussianProduct/#fuzzylite.term.GaussianProduct.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = h (a \\times b)\\)</p>"},{"location":"fuzzylite/term/GaussianProduct/#fuzzylite.term.GaussianProduct.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the space-separated parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>mean_a standard_deviation_a mean_b standard_deviation_b [height]</code>.</p>"},{"location":"fuzzylite/term/Linear/","title":"Linear","text":""},{"location":"fuzzylite/term/Linear/#fuzzylite.term.Linear","title":"Linear","text":"<p>               Bases: <code>Term</code></p> <p>Linear polynomial term.</p> <p></p> Equation <p>\\(\\mu(x)= \\mathbf{c}\\mathbf{v}+k = \\sum_i c_iv_i + k\\)</p> <p>where</p> <ul> <li>\\(x\\): irrelevant</li> <li>\\(\\mathbf{v}\\): vector of values from the input variables</li> <li>\\(\\mathbf{c}\\) vector of coefficients for the input variables</li> <li>\\(k\\) is a constant</li> </ul>"},{"location":"fuzzylite/term/Linear/#fuzzylite.term.Linear-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Linear/#fuzzylite.term.Linear.coefficients","title":"coefficients  <code>instance-attribute</code>","text":"<pre><code>coefficients = list(coefficients or [])\n</code></pre>"},{"location":"fuzzylite/term/Linear/#fuzzylite.term.Linear.engine","title":"engine  <code>instance-attribute</code>","text":"<pre><code>engine = engine\n</code></pre>"},{"location":"fuzzylite/term/Linear/#fuzzylite.term.Linear-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Linear/#fuzzylite.term.Linear.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', coefficients: Sequence[float] | None = None, engine: Engine | None = None) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the term</p> <code>''</code> <code>coefficients</code> <code>Sequence[float] | None</code> <p>coefficients for the input variables (plus constant \\(k\\), optionally)</p> <code>None</code> <code>engine</code> <code>Engine | None</code> <p>engine with the input variables</p> <code>None</code>"},{"location":"fuzzylite/term/Linear/#fuzzylite.term.Linear.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the term in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in Python.</p>"},{"location":"fuzzylite/term/Linear/#fuzzylite.term.Linear.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>coefficients <code>c1 ... cn k</code>.</p> required"},{"location":"fuzzylite/term/Linear/#fuzzylite.term.Linear.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x)=\\sum_i c_iv_i + k\\)</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when the number of coefficients (+1) is different from the number of input variables</p>"},{"location":"fuzzylite/term/Linear/#fuzzylite.term.Linear.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>c1 ... cn k</code>.</p>"},{"location":"fuzzylite/term/Linear/#fuzzylite.term.Linear.update_reference","title":"update_reference","text":"<pre><code>update_reference(engine: Engine | None) -&gt; None\n</code></pre> <p>Set the reference to the engine.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine | None</code> <p>engine with the input variables</p> required"},{"location":"fuzzylite/term/PiShape/","title":"PiShape","text":""},{"location":"fuzzylite/term/PiShape/#fuzzylite.term.PiShape","title":"PiShape","text":"<p>               Bases: <code>Term</code></p> <p>Extended term that represents the Pi-shaped membership function.</p> <p></p> Equation <p>\\(\\mu(x) = h \\left(\\mbox{SShape}_{a}^{b}(x) \\times \\mbox{ZShape}_{c}^{d}(x)\\right)\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(a, b\\): bottom left and top left parameters of the PiShape</li> <li>\\(c, d\\): top right and bottom right parameters of the PiShape</li> </ul> related <ul> <li>fuzzylite.term.SShape</li> <li>fuzzylite.term.ZShape</li> </ul>"},{"location":"fuzzylite/term/PiShape/#fuzzylite.term.PiShape-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/PiShape/#fuzzylite.term.PiShape.bottom_left","title":"bottom_left  <code>instance-attribute</code>","text":"<pre><code>bottom_left = bottom_left\n</code></pre>"},{"location":"fuzzylite/term/PiShape/#fuzzylite.term.PiShape.bottom_right","title":"bottom_right  <code>instance-attribute</code>","text":"<pre><code>bottom_right = bottom_right\n</code></pre>"},{"location":"fuzzylite/term/PiShape/#fuzzylite.term.PiShape.top_left","title":"top_left  <code>instance-attribute</code>","text":"<pre><code>top_left = top_left\n</code></pre>"},{"location":"fuzzylite/term/PiShape/#fuzzylite.term.PiShape.top_right","title":"top_right  <code>instance-attribute</code>","text":"<pre><code>top_right = top_right\n</code></pre>"},{"location":"fuzzylite/term/PiShape/#fuzzylite.term.PiShape-functions","title":"Functions","text":""},{"location":"fuzzylite/term/PiShape/#fuzzylite.term.PiShape.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    bottom_left: float = nan,\n    top_left: float = nan,\n    top_right: float = nan,\n    bottom_right: float = nan,\n    height: float = 1.0,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>bottom_left</code> <code>float</code> <p>bottom-left value of the PiShape</p> <code>nan</code> <code>top_left</code> <code>float</code> <p>top-left value of the PiShape</p> <code>nan</code> <code>top_right</code> <code>float</code> <p>top-right value of the PiShape</p> <code>nan</code> <code>bottom_right</code> <code>float</code> <p>bottom-right value of the PiShape</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term.</p> <code>1.0</code>"},{"location":"fuzzylite/term/PiShape/#fuzzylite.term.PiShape.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>bottom_left top_left top_right bottom_right [height]</code>.</p> required"},{"location":"fuzzylite/term/PiShape/#fuzzylite.term.PiShape.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = h \\left(\\mbox{SShape}_{a}^{b}(x) \\times \\mbox{ZShape}_{c}^{d}(x)\\right)\\)</p>"},{"location":"fuzzylite/term/PiShape/#fuzzylite.term.PiShape.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>bottom_left top_left top_right bottom_right [height]</code>.</p>"},{"location":"fuzzylite/term/Ramp/","title":"Ramp","text":""},{"location":"fuzzylite/term/Ramp/#fuzzylite.term.Ramp","title":"Ramp","text":"<p>               Bases: <code>Term</code></p> <p>Edge term that represents the ramp membership function.</p> <p></p> Equation <p>\\(\\mu(x) =  \\begin{cases}     h \\dfrac{x - s} {e - s} &amp; \\mbox{if } s &lt; x &lt; e \\cr     h \\dfrac{s - x} {s - e} &amp; \\mbox{if } e &lt; x &lt; s \\cr     h &amp; \\mbox{if } s &lt; e \\wedge x \\ge e \\cr     h &amp; \\mbox{if } s &gt; e \\wedge x \\le e \\cr     0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(s\\): start of the Ramp</li> <li>\\(e\\): end of the Ramp</li> </ul>"},{"location":"fuzzylite/term/Ramp/#fuzzylite.term.Ramp-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Ramp/#fuzzylite.term.Ramp.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end = end\n</code></pre>"},{"location":"fuzzylite/term/Ramp/#fuzzylite.term.Ramp.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start = start\n</code></pre>"},{"location":"fuzzylite/term/Ramp/#fuzzylite.term.Ramp-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Ramp/#fuzzylite.term.Ramp.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', start: float = nan, end: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>start</code> <code>float</code> <p>start of the Ramp</p> <code>nan</code> <code>end</code> <code>float</code> <p>end of the Ramp</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/term/Ramp/#fuzzylite.term.Ramp.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>start end [height]</code>.</p> required"},{"location":"fuzzylite/term/Ramp/#fuzzylite.term.Ramp.is_monotonic","title":"is_monotonic","text":"<pre><code>is_monotonic() -&gt; bool\n</code></pre> <p>Return <code>True</code> because the term is monotonic.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code></p>"},{"location":"fuzzylite/term/Ramp/#fuzzylite.term.Ramp.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) =  \\begin{cases} h \\dfrac{x - s} {e - s} &amp; \\mbox{if } s &lt; x &lt; e \\cr h \\dfrac{s - x} {s - e} &amp; \\mbox{if } e &lt; x &lt; s \\cr h &amp; \\mbox{if } s &lt; e \\wedge x \\ge e \\cr h &amp; \\mbox{if } s &gt; e \\wedge x \\le e \\cr 0 &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/term/Ramp/#fuzzylite.term.Ramp.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>start end [height]</code>.</p>"},{"location":"fuzzylite/term/Ramp/#fuzzylite.term.Ramp.tsukamoto","title":"tsukamoto","text":"<pre><code>tsukamoto(y: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the tsukamoto value of the monotonic term for activation degree \\(y\\).</p> Equation <p>\\(y = h \\dfrac{x - s} {e - s}\\)</p> <p>\\(x = s + (e-s) \\dfrac{y}{h}\\)</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>Scalar</code> <p>activation degree</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x = s + (e-s) \\dfrac{y}{h}\\)</p>"},{"location":"fuzzylite/term/Rectangle/","title":"Rectangle","text":""},{"location":"fuzzylite/term/Rectangle/#fuzzylite.term.Rectangle","title":"Rectangle","text":"<p>               Bases: <code>Term</code></p> <p>Basic term that represents the rectangle membership function.</p> <p></p> Equation <p>\\(\\mu(x) = \\begin{cases}     h &amp; \\mbox{if } s \\le x \\le e \\cr     0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(s\\): start of the Rectangle</li> <li>\\(e\\): end of the Rectangle</li> </ul>"},{"location":"fuzzylite/term/Rectangle/#fuzzylite.term.Rectangle-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Rectangle/#fuzzylite.term.Rectangle.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end = end\n</code></pre>"},{"location":"fuzzylite/term/Rectangle/#fuzzylite.term.Rectangle.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start = start\n</code></pre>"},{"location":"fuzzylite/term/Rectangle/#fuzzylite.term.Rectangle-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Rectangle/#fuzzylite.term.Rectangle.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', start: float = nan, end: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>start</code> <code>float</code> <p>start of the Rectangle</p> <code>nan</code> <code>end</code> <code>float</code> <p>end of the Rectangle</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/term/Rectangle/#fuzzylite.term.Rectangle.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>start end [height]</code>.</p> required"},{"location":"fuzzylite/term/Rectangle/#fuzzylite.term.Rectangle.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\begin{cases} h &amp; \\mbox{if } s \\le x \\le e \\cr 0 &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/term/Rectangle/#fuzzylite.term.Rectangle.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>start end [height]</code>.</p>"},{"location":"fuzzylite/term/SShape/","title":"SShape","text":""},{"location":"fuzzylite/term/SShape/#fuzzylite.term.SShape","title":"SShape","text":"<p>               Bases: <code>Term</code></p> <p>Edge Term that represents the S-shaped membership function.</p> <p></p> Equation: <p>\\(\\mu(x) = \\begin{cases}     0 &amp; \\mbox{if } x \\leq s \\cr     2h \\left(\\dfrac{x - s}{e-s}\\right)^2 &amp; \\mbox{if } s &lt; x \\leq \\dfrac{s+e}{2}\\cr     h - 2h\\left(\\dfrac{x - e}{e-s}\\right)^2 &amp; \\mbox{if } \\dfrac{s+e}{2} &lt; x &lt; e\\cr     h &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(s\\): start of the SShape</li> <li>\\(e\\): end of the SShape</li> </ul>"},{"location":"fuzzylite/term/SShape/#fuzzylite.term.SShape-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/SShape/#fuzzylite.term.SShape.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end = end\n</code></pre>"},{"location":"fuzzylite/term/SShape/#fuzzylite.term.SShape.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start = start\n</code></pre>"},{"location":"fuzzylite/term/SShape/#fuzzylite.term.SShape-functions","title":"Functions","text":""},{"location":"fuzzylite/term/SShape/#fuzzylite.term.SShape.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', start: float = nan, end: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>start</code> <code>float</code> <p>start of the SShape</p> <code>nan</code> <code>end</code> <code>float</code> <p>end of the SShape</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/term/SShape/#fuzzylite.term.SShape.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>start end [height]</code>.</p> required"},{"location":"fuzzylite/term/SShape/#fuzzylite.term.SShape.is_monotonic","title":"is_monotonic","text":"<pre><code>is_monotonic() -&gt; bool\n</code></pre> <p>Return <code>True</code> because the term is monotonic.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code></p>"},{"location":"fuzzylite/term/SShape/#fuzzylite.term.SShape.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\begin{cases} 0 &amp; \\mbox{if } x \\leq s \\cr 2h \\left(\\dfrac{x - s}{e-s}\\right)^2 &amp; \\mbox{if } s &lt; x \\leq \\dfrac{s+e}{2}\\cr h - 2h\\left(\\dfrac{x - e}{e-s}\\right)^2 &amp; \\mbox{if } \\dfrac{s+e}{2} &lt; x &lt; e\\cr h &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/term/SShape/#fuzzylite.term.SShape.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>start end [height]</code>.</p>"},{"location":"fuzzylite/term/SShape/#fuzzylite.term.SShape.tsukamoto","title":"tsukamoto","text":"<pre><code>tsukamoto(y: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the tsukamoto value of the monotonic term for activation degree \\(y\\).</p> Equation <p>\\(y = \\begin{cases} 0 &amp; \\mbox{if } x \\leq s \\cr 2h \\left(\\dfrac{x - s}{e-s}\\right)^2 &amp; \\mbox{if } s &lt; x \\leq \\dfrac{s+e}{2}\\cr h - 2h\\left(\\dfrac{x - e}{e-s}\\right)^2 &amp; \\mbox{if } \\dfrac{s+e}{2} &lt; x &lt; e\\cr h &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>\\(x = \\begin{cases}     s + (e-s) \\sqrt{\\dfrac{y}{2h}} &amp; \\mbox{if } y \\le \\dfrac{h}{2} \\cr     e - (e-s) \\sqrt{\\dfrac{h-y}{2h}} &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>Scalar</code> <p>activation degree</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x = \\begin{cases} s + (e-s) \\sqrt{\\dfrac{y}{2h}} &amp; \\mbox{if } y \\le \\dfrac{h}{2} \\cr e - (e-s) \\sqrt{\\dfrac{h-y}{2h}} &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/term/SemiEllipse/","title":"SemiEllipse","text":""},{"location":"fuzzylite/term/SemiEllipse/#fuzzylite.term.SemiEllipse","title":"SemiEllipse","text":"<p>               Bases: <code>Term</code></p> <p>Basic term that represents the semi-ellipse membership function.</p> <p></p> Equation <p>\\(\\mu(x) = h \\dfrac{\\sqrt{r^2- (x-c)^2}}{r}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(r\\): radius of the SemiEllipse</li> <li>\\(c\\): center of the SemiEllipse</li> </ul>"},{"location":"fuzzylite/term/SemiEllipse/#fuzzylite.term.SemiEllipse-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/SemiEllipse/#fuzzylite.term.SemiEllipse.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end = end\n</code></pre>"},{"location":"fuzzylite/term/SemiEllipse/#fuzzylite.term.SemiEllipse.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start = start\n</code></pre>"},{"location":"fuzzylite/term/SemiEllipse/#fuzzylite.term.SemiEllipse-functions","title":"Functions","text":""},{"location":"fuzzylite/term/SemiEllipse/#fuzzylite.term.SemiEllipse.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', start: float = nan, end: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>start</code> <code>float</code> <p>start of the SemiEllipse</p> <code>nan</code> <code>end</code> <code>float</code> <p>end of the SemiEllipse</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term.</p> <code>1.0</code>"},{"location":"fuzzylite/term/SemiEllipse/#fuzzylite.term.SemiEllipse.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>start end [height]</code></p> required"},{"location":"fuzzylite/term/SemiEllipse/#fuzzylite.term.SemiEllipse.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = h \\dfrac{\\sqrt{r^2- (x-c)^2}}{r}\\)</p>"},{"location":"fuzzylite/term/SemiEllipse/#fuzzylite.term.SemiEllipse.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>start end [height]</code></p>"},{"location":"fuzzylite/term/Sigmoid/","title":"Sigmoid","text":""},{"location":"fuzzylite/term/Sigmoid/#fuzzylite.term.Sigmoid","title":"Sigmoid","text":"<p>               Bases: <code>Term</code></p> <p>Edge Term that represents the sigmoid membership function.</p> <p></p> Equation <p>\\(\\mu(x) = \\dfrac{h}{1 + \\exp(-s(x-i))}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(s\\): slope of the Sigmoid</li> <li>\\(i\\): inflection of the Sigmoid</li> </ul>"},{"location":"fuzzylite/term/Sigmoid/#fuzzylite.term.Sigmoid-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Sigmoid/#fuzzylite.term.Sigmoid.inflection","title":"inflection  <code>instance-attribute</code>","text":"<pre><code>inflection = inflection\n</code></pre>"},{"location":"fuzzylite/term/Sigmoid/#fuzzylite.term.Sigmoid.slope","title":"slope  <code>instance-attribute</code>","text":"<pre><code>slope = slope\n</code></pre>"},{"location":"fuzzylite/term/Sigmoid/#fuzzylite.term.Sigmoid-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Sigmoid/#fuzzylite.term.Sigmoid.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', inflection: float = nan, slope: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>inflection</code> <code>float</code> <p>inflection of the Sigmoid</p> <code>nan</code> <code>slope</code> <code>float</code> <p>slope of the Sigmoid</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/term/Sigmoid/#fuzzylite.term.Sigmoid.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>inflection slope [height]</code>.</p> required"},{"location":"fuzzylite/term/Sigmoid/#fuzzylite.term.Sigmoid.is_monotonic","title":"is_monotonic","text":"<pre><code>is_monotonic() -&gt; bool\n</code></pre> <p>Return <code>True</code> because the term is monotonic.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code></p>"},{"location":"fuzzylite/term/Sigmoid/#fuzzylite.term.Sigmoid.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\dfrac{h}{1 + \\exp(-s(x-i))}\\)</p>"},{"location":"fuzzylite/term/Sigmoid/#fuzzylite.term.Sigmoid.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>inflection slope [height]</code>.</p>"},{"location":"fuzzylite/term/Sigmoid/#fuzzylite.term.Sigmoid.tsukamoto","title":"tsukamoto","text":"<pre><code>tsukamoto(y: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the tsukamoto value of the monotonic term for activation degree \\(y\\).</p> Equation <p>\\(y=\\dfrac{h}{1 + \\exp(-s(x-i))}\\)</p> <p>\\(x=i\\dfrac{\\log{\\left(\\dfrac{h}{y}-1\\right)}}{-s}\\)</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>Scalar</code> <p>activation degree</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x=i\\dfrac{\\log{\\left(\\dfrac{h}{y}-1\\right)}}{-s}\\)</p>"},{"location":"fuzzylite/term/SigmoidDifference/","title":"SigmoidDifference","text":""},{"location":"fuzzylite/term/SigmoidDifference/#fuzzylite.term.SigmoidDifference","title":"SigmoidDifference","text":"<p>               Bases: <code>Term</code></p> <p>Extended Term that represents the difference between two sigmoid membership functions.</p> <p></p> Equation <p>\\(a = \\mbox{Sigmoid}_\\mbox{left}^\\mbox{rise}(x)\\)</p> <p>\\(b = \\mbox{Sigmoid}_\\mbox{right}^\\mbox{fall}(x)\\)</p> <p>\\(\\mu(x) = h (a-b)\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(\\mbox{left}, \\mbox{rise}\\): inflection and slope of left Sigmoid</li> <li>\\(\\mbox{right}, \\mbox{fall}\\): inflection and slope of right Sigmoid</li> </ul>"},{"location":"fuzzylite/term/SigmoidDifference/#fuzzylite.term.SigmoidDifference-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/SigmoidDifference/#fuzzylite.term.SigmoidDifference.falling","title":"falling  <code>instance-attribute</code>","text":"<pre><code>falling = falling\n</code></pre>"},{"location":"fuzzylite/term/SigmoidDifference/#fuzzylite.term.SigmoidDifference.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left = left\n</code></pre>"},{"location":"fuzzylite/term/SigmoidDifference/#fuzzylite.term.SigmoidDifference.right","title":"right  <code>instance-attribute</code>","text":"<pre><code>right = right\n</code></pre>"},{"location":"fuzzylite/term/SigmoidDifference/#fuzzylite.term.SigmoidDifference.rising","title":"rising  <code>instance-attribute</code>","text":"<pre><code>rising = rising\n</code></pre>"},{"location":"fuzzylite/term/SigmoidDifference/#fuzzylite.term.SigmoidDifference-functions","title":"Functions","text":""},{"location":"fuzzylite/term/SigmoidDifference/#fuzzylite.term.SigmoidDifference.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    left: float = nan,\n    rising: float = nan,\n    falling: float = nan,\n    right: float = nan,\n    height: float = 1.0,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>left</code> <code>float</code> <p>inflection of the left Sigmoid</p> <code>nan</code> <code>rising</code> <code>float</code> <p>slope of the left Sigmoid</p> <code>nan</code> <code>falling</code> <code>float</code> <p>slope of the right Sigmoid</p> <code>nan</code> <code>right</code> <code>float</code> <p>inflection of the right Sigmoid</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term.</p> <code>1.0</code>"},{"location":"fuzzylite/term/SigmoidDifference/#fuzzylite.term.SigmoidDifference.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>left rising falling right [height]</code>.</p> required"},{"location":"fuzzylite/term/SigmoidDifference/#fuzzylite.term.SigmoidDifference.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = h (a-b)\\)</p>"},{"location":"fuzzylite/term/SigmoidDifference/#fuzzylite.term.SigmoidDifference.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>left rising falling right [height]</code>.</p>"},{"location":"fuzzylite/term/SigmoidProduct/","title":"SigmoidProduct","text":""},{"location":"fuzzylite/term/SigmoidProduct/#fuzzylite.term.SigmoidProduct","title":"SigmoidProduct","text":"<p>               Bases: <code>Term</code></p> <p>Extended Term that represents the product of two sigmoid membership functions.</p> <p></p> Equation <p>\\(a = \\mbox{Sigmoid}_\\mbox{left}^\\mbox{rise}(x)\\)</p> <p>\\(b = \\mbox{Sigmoid}_\\mbox{right}^\\mbox{fall}(x)\\)</p> <p>\\(\\mu(x) = h (a \\times b)\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(\\mbox{left}, \\mbox{rise}\\): inflection and slope of left Sigmoid</li> <li>\\(\\mbox{right}, \\mbox{fall}\\): inflection and slope of right Sigmoid</li> </ul>"},{"location":"fuzzylite/term/SigmoidProduct/#fuzzylite.term.SigmoidProduct-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/SigmoidProduct/#fuzzylite.term.SigmoidProduct.falling","title":"falling  <code>instance-attribute</code>","text":"<pre><code>falling = falling\n</code></pre>"},{"location":"fuzzylite/term/SigmoidProduct/#fuzzylite.term.SigmoidProduct.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left = left\n</code></pre>"},{"location":"fuzzylite/term/SigmoidProduct/#fuzzylite.term.SigmoidProduct.right","title":"right  <code>instance-attribute</code>","text":"<pre><code>right = right\n</code></pre>"},{"location":"fuzzylite/term/SigmoidProduct/#fuzzylite.term.SigmoidProduct.rising","title":"rising  <code>instance-attribute</code>","text":"<pre><code>rising = rising\n</code></pre>"},{"location":"fuzzylite/term/SigmoidProduct/#fuzzylite.term.SigmoidProduct-functions","title":"Functions","text":""},{"location":"fuzzylite/term/SigmoidProduct/#fuzzylite.term.SigmoidProduct.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    left: float = nan,\n    rising: float = nan,\n    falling: float = nan,\n    right: float = nan,\n    height: float = 1.0,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>left</code> <code>float</code> <p>inflection of the left Sigmoid</p> <code>nan</code> <code>rising</code> <code>float</code> <p>slope of the left Sigmoid</p> <code>nan</code> <code>falling</code> <code>float</code> <p>slope of the right Sigmoid</p> <code>nan</code> <code>right</code> <code>float</code> <p>inflection of the right Sigmoid</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term.</p> <code>1.0</code>"},{"location":"fuzzylite/term/SigmoidProduct/#fuzzylite.term.SigmoidProduct.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>left rising falling right [height]</code>.</p> required"},{"location":"fuzzylite/term/SigmoidProduct/#fuzzylite.term.SigmoidProduct.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = h (a \\times b)\\)</p>"},{"location":"fuzzylite/term/SigmoidProduct/#fuzzylite.term.SigmoidProduct.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>left rising falling right [height]</code>.</p>"},{"location":"fuzzylite/term/Spike/","title":"Spike","text":""},{"location":"fuzzylite/term/Spike/#fuzzylite.term.Spike","title":"Spike","text":"<p>               Bases: <code>Term</code></p> <p>Extended Term that represents the spike membership function.</p> <p></p> Equation <p>\\(\\mu(x)=h \\exp\\left(-\\left|\\dfrac{10}{w} (x - c)\\right|\\right)\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(w\\): width of the Spike</li> <li>\\(c\\): center of the Spike</li> </ul>"},{"location":"fuzzylite/term/Spike/#fuzzylite.term.Spike-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Spike/#fuzzylite.term.Spike.center","title":"center  <code>instance-attribute</code>","text":"<pre><code>center = center\n</code></pre>"},{"location":"fuzzylite/term/Spike/#fuzzylite.term.Spike.width","title":"width  <code>instance-attribute</code>","text":"<pre><code>width = width\n</code></pre>"},{"location":"fuzzylite/term/Spike/#fuzzylite.term.Spike-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Spike/#fuzzylite.term.Spike.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', center: float = nan, width: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>center</code> <code>float</code> <p>center of the Spike</p> <code>nan</code> <code>width</code> <code>float</code> <p>width of the Spike</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/term/Spike/#fuzzylite.term.Spike.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>center width [height]</code>.</p> required"},{"location":"fuzzylite/term/Spike/#fuzzylite.term.Spike.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x)=h \\exp\\left(-\\left|\\dfrac{10}{w} (x - c)\\right|\\right)\\)</p>"},{"location":"fuzzylite/term/Spike/#fuzzylite.term.Spike.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>center width [height]</code>.</p>"},{"location":"fuzzylite/term/Term/","title":"Term","text":""},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term","title":"Term","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for linguistic terms.</p> <p>The linguistic terms in this library can be divided into four groups, namely <code>basic</code>, <code>extended</code>, <code>edge</code>, and <code>function</code>.</p> <code>basic/function</code> <code>extended</code> <code>edge</code> fuzzylite.term.Discrete fuzzylite.term.Bell fuzzylite.term.Arc fuzzylite.term.Rectangle fuzzylite.term.Cosine fuzzylite.term.Binary fuzzylite.term.SemiEllipse fuzzylite.term.Gaussian fuzzylite.term.Concave fuzzylite.term.Triangle fuzzylite.term.GaussianProduct fuzzylite.term.Ramp fuzzylite.term.Trapezoid fuzzylite.term.PiShape fuzzylite.term.Sigmoid fuzzylite.term.Constant fuzzylite.term.SigmoidDifference fuzzylite.term.SShape     - fuzzylite.term.ZShape fuzzylite.term.Linear fuzzylite.term.SigmoidProduct fuzzylite.term.SShape fuzzylite.term.Function fuzzylite.term.Spike fuzzylite.term.ZShape related <ul> <li>fuzzylite.variable.Variable</li> <li>fuzzylite.variable.InputVariable</li> <li>fuzzylite.variable.OutputVariable</li> </ul>"},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term.height","title":"height  <code>instance-attribute</code>","text":"<pre><code>height = height\n</code></pre>"},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the term</p> <code>''</code> <code>height</code> <code>float</code> <p>height of the term.</p> <code>1.0</code>"},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the term in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in Python.</p>"},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the term in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the term in the FuzzyLite Language.</p>"},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term._parameters","title":"_parameters","text":"<pre><code>_parameters(*args: object) -&gt; str\n</code></pre> <p>Concatenate the arguments and the height.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>object</code> <p>arguments to configure the term</p> <code>()</code> <p>Returns:</p> Type Description <code>str</code> <p>parameters concatenated and an optional <code>height</code> at the end.</p>"},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term._parse","title":"_parse","text":"<pre><code>_parse(required: int, parameters: str, *, height: bool = True) -&gt; list[float]\n</code></pre> <p>Parse the required values from the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>required</code> <code>int</code> <p>number of values to parse</p> required <code>parameters</code> <code>str</code> <p>text containing the values</p> required <code>height</code> <code>bool</code> <p>whether <code>parameters</code> contains an extra value for the height of the term</p> <code>True</code> <p>Returns:</p> Type Description <code>list[float]</code> <p>list of floating-point values parsed from the parameters.</p>"},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>The <code>parameters</code> is a list of space-separated values, with an optional value at the end to set the <code>height</code> (defaults to <code>1.0</code> if absent)</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p>space-separated parameter values to configure the term.</p> required"},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term.discretize","title":"discretize","text":"<pre><code>discretize(start: float, end: float, resolution: int = 10, midpoints: bool = True) -&gt; Discrete\n</code></pre> <p>Discretize the term.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>float</code> <p>start of the range</p> required <code>end</code> <code>float</code> <p>end of the range</p> required <code>resolution</code> <code>int</code> <p>number of points to discretize</p> <code>10</code> <code>midpoints</code> <code>bool</code> <p>use midpoints method or include start and end.</p> <code>True</code> related <ul> <li>fuzzylite.operation.Operation.midpoints</li> <li>numpy.linspace</li> </ul>"},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term.is_monotonic","title":"is_monotonic","text":"<pre><code>is_monotonic() -&gt; bool\n</code></pre> <p>Return whether the term is monotonic.</p> <p>Returns:</p> Type Description <code>bool</code> <p>False.</p>"},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term.membership","title":"membership  <code>abstractmethod</code>","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the membership function value of \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>membership function value \\(\\mu(x)\\).</p>"},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p>list of space-separated parameters of the term.</p>"},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term.tsukamoto","title":"tsukamoto","text":"<pre><code>tsukamoto(y: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the tsukamoto value of the monotonic term for activation degree \\(y\\).</p> Equation <p>\\(g(y) = \\{ z \\in\\mathbb{R} : \\mu(z) = y \\}\\)</p> Warning <p>Raises <code>RuntimeError</code> because the term does not support Tsukamoto</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>Scalar</code> <p>activation degree</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>because the term does not support Tsukamoto</p>"},{"location":"fuzzylite/term/Term/#fuzzylite.term.Term.update_reference","title":"update_reference","text":"<pre><code>update_reference(engine: Engine | None) -&gt; None\n</code></pre> <p>Update the reference (if any) to the engine the term belongs to.</p> <p>Parameters:</p> Name Type Description Default <code>engine</code> <code>Engine | None</code> <p>engine to which the term belongs to.</p> required"},{"location":"fuzzylite/term/Trapezoid/","title":"Trapezoid","text":""},{"location":"fuzzylite/term/Trapezoid/#fuzzylite.term.Trapezoid","title":"Trapezoid","text":"<p>               Bases: <code>Term</code></p> <p>Basic Term that represents the trapezoid membership function.</p> <p></p> Equation <p>\\(\\mu(x)= \\begin{cases}     0 &amp; \\mbox{if } x &lt; a \\vee x &gt; d\\cr     h \\dfrac{x - a}{b - a}  &amp; \\mbox{if } a \\le x &lt; b\\cr     h &amp; \\mbox{if } (b \\le x \\le c) \\vee (a=-\\infty \\wedge x &lt; b) \\vee (d=\\infty \\wedge x &gt; c) \\cr     h \\dfrac{d - x}{d - c} &amp; \\mbox{if } c &lt; x \\le d\\cr     \\text{NaN} &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(a\\): bottom left vertex of the Trapezoid</li> <li>\\(b\\): top left vertex of the Trapezoid</li> <li>\\(c\\): top right vertex of the Trapezoid</li> <li>\\(d\\): bottom right vertex of the trapezoid</li> </ul>"},{"location":"fuzzylite/term/Trapezoid/#fuzzylite.term.Trapezoid-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Trapezoid/#fuzzylite.term.Trapezoid.bottom_left","title":"bottom_left  <code>instance-attribute</code>","text":"<pre><code>bottom_left = bottom_left\n</code></pre>"},{"location":"fuzzylite/term/Trapezoid/#fuzzylite.term.Trapezoid.bottom_right","title":"bottom_right  <code>instance-attribute</code>","text":"<pre><code>bottom_right = bottom_right\n</code></pre>"},{"location":"fuzzylite/term/Trapezoid/#fuzzylite.term.Trapezoid.top_left","title":"top_left  <code>instance-attribute</code>","text":"<pre><code>top_left = top_left\n</code></pre>"},{"location":"fuzzylite/term/Trapezoid/#fuzzylite.term.Trapezoid.top_right","title":"top_right  <code>instance-attribute</code>","text":"<pre><code>top_right = top_right\n</code></pre>"},{"location":"fuzzylite/term/Trapezoid/#fuzzylite.term.Trapezoid-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Trapezoid/#fuzzylite.term.Trapezoid.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    bottom_left: float = nan,\n    top_left: float = nan,\n    top_right: float = nan,\n    bottom_right: float = nan,\n    height: float = 1.0,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>bottom_left</code> <code>float</code> <p>first vertex of the Trapezoid</p> <code>nan</code> <code>top_left</code> <code>float</code> <p>second vertex of the Trapezoid</p> <code>nan</code> <code>top_right</code> <code>float</code> <p>third vertex of the Trapezoid</p> <code>nan</code> <code>bottom_right</code> <code>float</code> <p>fourth vertex of the Trapezoid</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/term/Trapezoid/#fuzzylite.term.Trapezoid.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>bottom_left top_left top_right bottom_right [height]</code>.</p> required"},{"location":"fuzzylite/term/Trapezoid/#fuzzylite.term.Trapezoid.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x)= \\begin{cases} 0 &amp; \\mbox{if } x &lt; a \\vee x &gt; d\\cr h \\dfrac{x - a}{b - a}  &amp; \\mbox{if } a \\le x &lt; b\\cr h &amp; \\mbox{if } (b \\le x \\le c) \\vee (a=-\\infty \\wedge x &lt; b) \\vee (d=\\infty \\wedge x &gt; c) \\cr h \\dfrac{d - x}{d - c} &amp; \\mbox{if } c &lt; x \\le d\\cr \\text{NaN} &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/term/Trapezoid/#fuzzylite.term.Trapezoid.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>bottom_left top_left top_right bottom_right [height]</code>.</p>"},{"location":"fuzzylite/term/Triangle/","title":"Triangle","text":""},{"location":"fuzzylite/term/Triangle/#fuzzylite.term.Triangle","title":"Triangle","text":"<p>               Bases: <code>Term</code></p> <p>Basic Term that represents the triangle membership function.</p> <p></p> Equation <p>\\(\\mu(x)= \\begin{cases}     0 &amp; \\mbox{if } x &lt; a \\vee x &gt; c \\cr     h &amp; \\mbox{if } (x = b) \\vee (a=-\\infty \\wedge x &lt; b) \\vee (c=\\infty \\wedge x &gt; b) \\cr     h \\dfrac{x - a}{b - a} &amp; \\mbox{if } a \\le x &lt; b \\cr     h \\dfrac{c - x}{c - b} &amp; \\mbox{if } b &lt; x \\le c \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(a\\): left vertex of the Triangle</li> <li>\\(b\\): top vertex of the Triangle</li> <li>\\(c\\): right vertex of the Triangle</li> </ul>"},{"location":"fuzzylite/term/Triangle/#fuzzylite.term.Triangle-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/Triangle/#fuzzylite.term.Triangle.left","title":"left  <code>instance-attribute</code>","text":"<pre><code>left = left\n</code></pre>"},{"location":"fuzzylite/term/Triangle/#fuzzylite.term.Triangle.right","title":"right  <code>instance-attribute</code>","text":"<pre><code>right = right\n</code></pre>"},{"location":"fuzzylite/term/Triangle/#fuzzylite.term.Triangle.top","title":"top  <code>instance-attribute</code>","text":"<pre><code>top = top\n</code></pre>"},{"location":"fuzzylite/term/Triangle/#fuzzylite.term.Triangle-functions","title":"Functions","text":""},{"location":"fuzzylite/term/Triangle/#fuzzylite.term.Triangle.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', left: float = nan, top: float = nan, right: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>left</code> <code>float</code> <p>first vertex of the Triangle</p> <code>nan</code> <code>top</code> <code>float</code> <p>second vertex of the Triangle</p> <code>nan</code> <code>right</code> <code>float</code> <p>third vertex of the Triangle</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/term/Triangle/#fuzzylite.term.Triangle.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>left top right [height]</code>.</p> required"},{"location":"fuzzylite/term/Triangle/#fuzzylite.term.Triangle.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x)= \\begin{cases} 0 &amp; \\mbox{if } x &lt; a \\vee x &gt; c \\cr h &amp; \\mbox{if } (x = b) \\vee (a=-\\infty \\wedge x &lt; b) \\vee (c=\\infty \\wedge x &gt; b) \\cr h \\dfrac{x - a}{b - a} &amp; \\mbox{if } a \\le x &lt; b \\cr h \\dfrac{c - x}{c - b} &amp; \\mbox{if } b &lt; x \\le c \\end{cases}\\)</p>"},{"location":"fuzzylite/term/Triangle/#fuzzylite.term.Triangle.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>left top right [height]</code>.</p>"},{"location":"fuzzylite/term/ZShape/","title":"ZShape","text":""},{"location":"fuzzylite/term/ZShape/#fuzzylite.term.ZShape","title":"ZShape","text":"<p>               Bases: <code>Term</code></p> <p>Edge Term that represents the ZShape membership function.</p> <p></p> Equation <p>\\(\\mu(x) = \\begin{cases}     1 &amp; \\mbox{if } x \\leq s \\cr     h - 2h\\left(\\dfrac{x - s}{e-s}\\right)^2 &amp; \\mbox{if }  s &lt; x &lt; \\dfrac{s+e}{2} \\cr     2h \\left(\\dfrac{x - e}{e-s}\\right)^2 &amp; \\mbox{if } \\dfrac{s+e}{2} \\le  x &lt; e\\cr     0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>where</p> <ul> <li>\\(h\\): height of the Term</li> <li>\\(s\\): start of the ZShape</li> <li>\\(e\\): end of the ZShape</li> </ul>"},{"location":"fuzzylite/term/ZShape/#fuzzylite.term.ZShape-attributes","title":"Attributes","text":""},{"location":"fuzzylite/term/ZShape/#fuzzylite.term.ZShape.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end = end\n</code></pre>"},{"location":"fuzzylite/term/ZShape/#fuzzylite.term.ZShape.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start = start\n</code></pre>"},{"location":"fuzzylite/term/ZShape/#fuzzylite.term.ZShape-functions","title":"Functions","text":""},{"location":"fuzzylite/term/ZShape/#fuzzylite.term.ZShape.__init__","title":"__init__","text":"<pre><code>__init__(name: str = '', start: float = nan, end: float = nan, height: float = 1.0) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the Term</p> <code>''</code> <code>start</code> <code>float</code> <p>start of the ZShape</p> <code>nan</code> <code>end</code> <code>float</code> <p>end of the ZShape</p> <code>nan</code> <code>height</code> <code>float</code> <p>height of the Term</p> <code>1.0</code>"},{"location":"fuzzylite/term/ZShape/#fuzzylite.term.ZShape.configure","title":"configure","text":"<pre><code>configure(parameters: str) -&gt; None\n</code></pre> <p>Configure the term with the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>str</code> <p><code>start end [height]</code>.</p> required"},{"location":"fuzzylite/term/ZShape/#fuzzylite.term.ZShape.is_monotonic","title":"is_monotonic","text":"<pre><code>is_monotonic() -&gt; bool\n</code></pre> <p>Return <code>True</code> because the term is monotonic.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code></p>"},{"location":"fuzzylite/term/ZShape/#fuzzylite.term.ZShape.membership","title":"membership","text":"<pre><code>membership(x: Scalar) -&gt; Scalar\n</code></pre> <p>Computes the membership function evaluated at \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>scalar</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(\\mu(x) = \\begin{cases} 1 &amp; \\mbox{if } x \\leq s \\cr h - 2h\\left(\\dfrac{x - s}{e-s}\\right)^2 &amp; \\mbox{if }  s &lt; x &lt; \\dfrac{s+e}{2} \\cr 2h \\left(\\dfrac{x - e}{e-s}\\right)^2 &amp; \\mbox{if } \\dfrac{s+e}{2} \\le  x &lt; e\\cr 0 &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/term/ZShape/#fuzzylite.term.ZShape.parameters","title":"parameters","text":"<pre><code>parameters() -&gt; str\n</code></pre> <p>Return the parameters of the term.</p> <p>Returns:</p> Type Description <code>str</code> <p><code>start end [height]</code>.</p>"},{"location":"fuzzylite/term/ZShape/#fuzzylite.term.ZShape.tsukamoto","title":"tsukamoto","text":"<pre><code>tsukamoto(y: Scalar) -&gt; Scalar\n</code></pre> <p>Compute the tsukamoto value of the monotonic term for activation degree \\(y\\).</p> Equation <p>\\(y = \\begin{cases} 1 &amp; \\mbox{if } x \\leq s \\cr h - 2h\\left(\\dfrac{x - s}{e-s}\\right)^2 &amp; \\mbox{if }  s &lt; x &lt; \\dfrac{s+e}{2} \\cr 2h \\left(\\dfrac{x - e}{e-s}\\right)^2 &amp; \\mbox{if } \\dfrac{s+e}{2} \\le  x &lt; e\\cr 0 &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>\\(x = \\begin{cases}     e + (e-s) \\sqrt{\\dfrac{y}{2h}} &amp; \\mbox{if } y \\le \\dfrac{h}{2} \\cr     s + (e-s) \\sqrt{\\dfrac{h-y}{2h}} &amp; \\mbox{otherwise} \\end{cases}\\)</p> <p>Parameters:</p> Name Type Description Default <code>y</code> <code>Scalar</code> <p>activation degree</p> required <p>Returns:</p> Type Description <code>Scalar</code> <p>\\(x = \\begin{cases} e + (e-s) \\sqrt{\\dfrac{y}{2h}} &amp; \\mbox{if } y \\le \\dfrac{h}{2} \\cr s + (e-s) \\sqrt{\\dfrac{h-y}{2h}} &amp; \\mbox{otherwise} \\end{cases}\\)</p>"},{"location":"fuzzylite/types/Array/","title":"Array","text":"<p>Alias to numpy.typing.NDArray</p>"},{"location":"fuzzylite/types/Scalar/","title":"Scalar","text":""},{"location":"fuzzylite/types/Scalar/#fuzzylite.types.Scalar","title":"Scalar  <code>module-attribute</code>","text":"<pre><code>Scalar = Union[float, floating[Any], NDArray[floating[Any]]]\n</code></pre>"},{"location":"fuzzylite/types/ScalarArray/","title":"ScalarArray","text":""},{"location":"fuzzylite/types/ScalarArray/#fuzzylite.types.ScalarArray","title":"ScalarArray  <code>module-attribute</code>","text":"<pre><code>ScalarArray = NDArray[floating[Any]]\n</code></pre>"},{"location":"fuzzylite/variable/InputVariable/","title":"InputVariable","text":""},{"location":"fuzzylite/variable/InputVariable/#fuzzylite.variable.InputVariable","title":"InputVariable","text":"<p>               Bases: <code>Variable</code></p> <p>Variable to represent the input of a fuzzy logic controller.</p> related <ul> <li>fuzzylite.variable.Variable</li> <li>fuzzylite.variable.OutputVariable</li> <li>fuzzylite.term.Term</li> </ul>"},{"location":"fuzzylite/variable/InputVariable/#fuzzylite.variable.InputVariable-functions","title":"Functions","text":""},{"location":"fuzzylite/variable/InputVariable/#fuzzylite.variable.InputVariable.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    description: str = \"\",\n    enabled: bool = True,\n    minimum: float = -inf,\n    maximum: float = inf,\n    lock_range: bool = False,\n    terms: Iterable[Term] | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the variable</p> <code>''</code> <code>description</code> <code>str</code> <p>description of the variable</p> <code>''</code> <code>enabled</code> <code>bool</code> <p>enable the variable</p> <code>True</code> <code>minimum</code> <code>float</code> <p>minimum value of the variable</p> <code>-inf</code> <code>maximum</code> <code>float</code> <p>maximum value of the variable</p> <code>inf</code> <code>lock_range</code> <code>bool</code> <p>lock the value to the range of the variable</p> <code>False</code> <code>terms</code> <code>Iterable[Term] | None</code> <p>list of terms.</p> <code>None</code>"},{"location":"fuzzylite/variable/InputVariable/#fuzzylite.variable.InputVariable.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the input variable in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the input variable in the FuzzyLite Language.</p>"},{"location":"fuzzylite/variable/InputVariable/#fuzzylite.variable.InputVariable.fuzzy_value","title":"fuzzy_value","text":"<pre><code>fuzzy_value() -&gt; Array[str_]\n</code></pre> <p>Return the current fuzzy input value.</p> <p>The fuzzy value is computed by evaluating the membership function of the current input value \\(x\\) for each term \\(i\\), resulting in a fuzzy input value in the form \\(\\tilde{x}=\\sum_i{\\mu_i(x)/i}\\).</p> <p>Returns:</p> Type Description <code>Array[str_]</code> <p>current fuzzy value expressed as \\(\\sum_i{\\mu_i(x)/i}\\).</p>"},{"location":"fuzzylite/variable/OutputVariable/","title":"OutputVariable","text":""},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable","title":"OutputVariable","text":"<p>               Bases: <code>Variable</code></p> <p>Variable to represents the output of a fuzzy logic controller.</p> <p>During the activation of a rule block, the activated terms of each rule are aggregated in the fuzzy output, which represents a fuzzy set hereinafter referred to as \\(\\tilde{y}\\).</p> <p>The defuzzification of \\(\\tilde{y}\\) converts the fuzzy output value \\(\\tilde{y}\\) into a crisp output value \\(y\\), which is stored as the value of this variable.</p> related <ul> <li>fuzzylite.variable.Variable</li> <li>fuzzylite.variable.InputVariable</li> <li>fuzzylite.term.Term</li> <li>fuzzylite.rule.RuleBlock</li> <li>fuzzylite.norm.SNorm</li> </ul>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable-attributes","title":"Attributes","text":""},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.aggregation","title":"aggregation  <code>property</code> <code>writable</code>","text":"<pre><code>aggregation: SNorm | None\n</code></pre> <p>Get/Set the aggregation operator.</p>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.aggregation--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>SNorm | None</code> <p>aggregation operator.</p>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.aggregation--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>SNorm</code> <p>aggregation operator</p> required"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.default_value","title":"default_value  <code>instance-attribute</code>","text":"<pre><code>default_value = default_value\n</code></pre>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.defuzzifier","title":"defuzzifier  <code>instance-attribute</code>","text":"<pre><code>defuzzifier = defuzzifier\n</code></pre>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.fuzzy","title":"fuzzy  <code>instance-attribute</code>","text":"<pre><code>fuzzy = Aggregated(name=name, minimum=minimum, maximum=maximum, aggregation=aggregation)\n</code></pre>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.lock_previous","title":"lock_previous  <code>instance-attribute</code>","text":"<pre><code>lock_previous = lock_previous\n</code></pre>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.maximum","title":"maximum  <code>property</code> <code>writable</code>","text":"<pre><code>maximum: float\n</code></pre> <p>Get/Set the maximum value of the range of the output variable.</p>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.maximum--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>float</code> <p>maximum value of the range of the output variable.</p>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.maximum--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>maximum value of the output variable.</p> required"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.minimum","title":"minimum  <code>property</code> <code>writable</code>","text":"<pre><code>minimum: float\n</code></pre> <p>Get/Set the minimum value of the range of the output variable.</p>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.minimum--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>float</code> <p>minimum value of the range of the output variable.</p>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.minimum--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>minimum value of the output variable.</p> required"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.previous_value","title":"previous_value  <code>instance-attribute</code>","text":"<pre><code>previous_value = nan\n</code></pre>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable-functions","title":"Functions","text":""},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    description: str = \"\",\n    enabled: bool = True,\n    minimum: float = -inf,\n    maximum: float = inf,\n    lock_range: bool = False,\n    lock_previous: bool = False,\n    default_value: float = nan,\n    aggregation: SNorm | None = None,\n    defuzzifier: Defuzzifier | None = None,\n    terms: Iterable[Term] | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the variable</p> <code>''</code> <code>description</code> <code>str</code> <p>description of the variable</p> <code>''</code> <code>enabled</code> <code>bool</code> <p>enable the variable</p> <code>True</code> <code>minimum</code> <code>float</code> <p>minimum value of the variable</p> <code>-inf</code> <code>maximum</code> <code>float</code> <p>maximum value of the variable</p> <code>inf</code> <code>lock_range</code> <code>bool</code> <p>lock the value to the range of the variable</p> <code>False</code> <code>lock_previous</code> <code>bool</code> <p>lock the previous value of the output variable</p> <code>False</code> <code>default_value</code> <code>float</code> <p>default value of the output variable</p> <code>nan</code> <code>aggregation</code> <code>SNorm | None</code> <p>aggregation operator</p> <code>None</code> <code>defuzzifier</code> <code>Defuzzifier | None</code> <p>defuzzifier of the output variable</p> <code>None</code> <code>terms</code> <code>Iterable[Term] | None</code> <p>list of terms.</p> <code>None</code>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the output variable in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the output variable in Python.</p>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the output variable in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the output variable in the FuzzyLite Language.</p>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.clear","title":"clear","text":"<pre><code>clear() -&gt; None\n</code></pre> <p>Clear the output variable.</p>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.defuzzify","title":"defuzzify","text":"<pre><code>defuzzify() -&gt; None\n</code></pre> <p>Defuzzify the output variable and store the output value and the previous output value.</p> <p>The final value \\(y\\) depends on the following cascade of properties in order of precedence expressed in the FuzzyLite Language:</p> <ul> <li> <p><code>lock-previous: boolean</code>: when the output value is not finite (ie, <code>nan</code> or <code>inf</code>) and <code>lock-previous: true</code>, then the output value is replaced with the value defuzzified in the previous iteration.</p> </li> <li> <p><code>default: scalar</code>: when the output value is (still) not finite and the default value is not <code>nan</code>, then the output value is replaced with the <code>default</code> value.</p> </li> <li> <p><code>lock-range: boolean</code>: when <code>lock-range: true</code>, the output value is clipped to the range of the variable.</p> </li> </ul>"},{"location":"fuzzylite/variable/OutputVariable/#fuzzylite.variable.OutputVariable.fuzzy_value","title":"fuzzy_value","text":"<pre><code>fuzzy_value() -&gt; Array[str_]\n</code></pre> <p>Return the current fuzzy output value.</p> <p>Returns:</p> Type Description <code>Array[str_]</code> <p>current fuzzy output value.</p>"},{"location":"fuzzylite/variable/Variable/","title":"Variable","text":""},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable","title":"Variable","text":"<p>Base class for linguistic variables.</p> related <ul> <li>fuzzylite.variable.InputVariable</li> <li>fuzzylite.variable.OutputVariable</li> </ul>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable-attributes","title":"Attributes","text":""},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description = description\n</code></pre>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.drange","title":"drange  <code>property</code>","text":"<pre><code>drange: float\n</code></pre> <p>Return the magnitude of the range of the variable.</p> <p>Returns:</p> Type Description <code>float</code> <p><code>maximum - minimum</code></p>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.enabled","title":"enabled  <code>instance-attribute</code>","text":"<pre><code>enabled = enabled\n</code></pre>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.lock_range","title":"lock_range  <code>instance-attribute</code>","text":"<pre><code>lock_range = lock_range\n</code></pre>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.maximum","title":"maximum  <code>instance-attribute</code>","text":"<pre><code>maximum = maximum\n</code></pre>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.minimum","title":"minimum  <code>instance-attribute</code>","text":"<pre><code>minimum = minimum\n</code></pre>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name = name\n</code></pre>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.range","title":"range  <code>property</code> <code>writable</code>","text":"<pre><code>range: tuple[float, float]\n</code></pre> <p>Return the range of the variable.</p>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.range--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>tuple[float, float]</code> <p>tuple of (minimum, maximum).</p>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.range--setter","title":"Setter","text":"<p>Parameters:</p> Name Type Description Default <code>min_max</code> <code>tuple[float, float]</code> <p>range of the variable</p> required"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.terms","title":"terms  <code>instance-attribute</code>","text":"<pre><code>terms = list(terms or [])\n</code></pre>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.value","title":"value  <code>property</code> <code>writable</code>","text":"<pre><code>value: Scalar\n</code></pre> <p>Get/Set the value of the variable.</p>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.value--getter","title":"Getter","text":"<p>Returns:</p> Type Description <code>Scalar</code> <p>value of the variable</p>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.value--setter","title":"Setter","text":"<p>when <code>lock_range = true</code>, the value is clipped to the range of the variable</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Scalar</code> <p>value of the variable</p> required"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable-functions","title":"Functions","text":""},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(item: int | str) -&gt; Term\n</code></pre><pre><code>__getitem__(item: slice) -&gt; list[Term]\n</code></pre> <pre><code>__getitem__(item: int | str | slice) -&gt; Term | list[Term]\n</code></pre> <p>Allow indexing terms by index, name, or slices (eg, <code>engine[\"power\"][\"low\"]</code>).</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>int | str | slice</code> <p>index, name, or slice of terms</p> required <p>Returns:</p> Type Description <code>Term | list[Term]</code> <p>term by index or name, or slice of terms</p>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.__init__","title":"__init__","text":"<pre><code>__init__(\n    name: str = \"\",\n    description: str = \"\",\n    enabled: bool = True,\n    minimum: float = -inf,\n    maximum: float = inf,\n    lock_range: bool = False,\n    terms: Iterable[Term] | None = None,\n) -&gt; None\n</code></pre> <p>Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the variable</p> <code>''</code> <code>description</code> <code>str</code> <p>description of the variable</p> <code>''</code> <code>enabled</code> <code>bool</code> <p>enable the variable</p> <code>True</code> <code>minimum</code> <code>float</code> <p>minimum value of the range</p> <code>-inf</code> <code>maximum</code> <code>float</code> <p>maximum value of the range</p> <code>inf</code> <code>lock_range</code> <code>bool</code> <p>lock the value to the range of the variable</p> <code>False</code> <code>terms</code> <code>Iterable[Term] | None</code> <p>list of terms</p> <code>None</code>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; Iterator[Term]\n</code></pre> <p>Return the iterator of the terms.</p> <p>Returns:</p> Type Description <code>Iterator[Term]</code> <p>iterator of the terms</p>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.__len__","title":"__len__","text":"<pre><code>__len__() -&gt; int\n</code></pre> <p>Return the number of terms.</p> <p>Returns:</p> Type Description <code>int</code> <p>number of terms</p>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return the code to construct the variable in Python.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the variable in Python.</p>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return the code to construct the variable in the FuzzyLite Language.</p> <p>Returns:</p> Type Description <code>str</code> <p>code to construct the variable in the FuzzyLite Language.</p>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.clear","title":"clear","text":"<pre><code>clear() -&gt; None\n</code></pre> <p>Clear the variable to its initial state.</p>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.fuzzify","title":"fuzzify","text":"<pre><code>fuzzify(x: Scalar) -&gt; Array[str_]\n</code></pre> <p>Return the fuzzy representation of \\(x\\).</p> <p>The fuzzy representation is computed by evaluating the membership function of \\(x\\) for each term \\(i\\), resulting in a fuzzy value in the form \\(\\tilde{x}=\\sum_i{\\mu_i(x)/i}\\)</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>Scalar</code> <p>value to fuzzify</p> required <p>Returns:</p> Type Description <code>Array[str_]</code> <p>fuzzy value expressed as \\(\\sum_i{\\mu_i(x)/i}\\).</p>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.highest_membership","title":"highest_membership","text":"<pre><code>highest_membership(x: float) -&gt; Activated | None\n</code></pre> <p>Return the term that has the highest membership function value for \\(x\\).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>float</code> <p>value</p> required <p>Returns:</p> Type Description <code>Activated | None</code> <p>term \\(i\\) that maximimizes \\(\\mu_i(x)\\)</p>"},{"location":"fuzzylite/variable/Variable/#fuzzylite.variable.Variable.term","title":"term","text":"<pre><code>term(name_or_index: str | int) -&gt; Term\n</code></pre> <p>Find the term by the name or index.</p> <p>The best performance is \\(O(1)\\) when using indices, and the worst performance is \\(O(n)\\) when using names, where \\(n\\) is the number terms.</p> <p>Parameters:</p> Name Type Description Default <code>name_or_index</code> <code>str | int</code> <p>name or index of the term</p> required <p>Returns:</p> Type Description <code>Term</code> <p>term by the name or index</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>when there is no term by the given name.</p> <code>IndexError</code> <p>when the index is out of range</p>"}]}